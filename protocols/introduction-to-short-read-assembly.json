{"uri":"introduction-to-short-read-assembly-pifdkbn","version_id":"0","protocol_name":"Introduction to short read assembly","protocol_name_html":"Introduction to short read assembly","is_prepublished":"0","can_edit":"0","parent_id":null,"api_version":"1","is_new_mode":"0","last_modified":"1523979287","type_id":"1","link":null,"fork_id":"","public_fork_note":"","number_of_steps":"5","has_versions":"0","first_published_date":"1523979287","publish_date":"2018-04-17 15:34:47","documents":null,"have_protocol_in_step":"0","is_protocol_in_step":"0","vendor_name":"Contributed by users","vendor_link":"https:\/\/www.protocols.io","vendor_logo":"\/img\/vendors\/1.png","mod_mins":"-45","mod_secs":"1","description":"<p>Here is a short intro on short read assembly using the SPAdes assembler.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>Some notes on tool installation:<\/p>\n<p>To install SPAdes or other tools into your PATH you may wish to use a package manager called Miniconda. For this\u00a0go to the website here and download the 64-bit Linux distribution:<br \/>https:\/\/conda.io\/miniconda.html<br \/># then, once you have located this file on your computer, type <br \/>bash Miniconda2-latest-Linux-x86_64.sh<br \/># and follow the installation instructions. When asked to append the PATH info say \"yes\".<br \/># After this you will need to close your terminal and re-open it before beginning again. Then you should be able to install tools using conda. For the module today we will need to install two tools: the sra-toolkit and an assembler called spades. <br \/>conda install -c bioconda sra-tools<br \/>conda install -c bioconda spades<\/p>","is_bookmarked":"0","can_reassign":"1","before_start":null,"has_guidelines":"0","materials":[],"warning":null,"version_class":"11559","public":"1","is_owner":"1","is_original_owner":"1","created_on":"1523978526","protocol_affiliation":"Virginia Tech","affiliation":"Virginia Tech","doi":"dx.doi.org\/10.17504\/protocols.io.pifdkbn","doi_status":"2","changed_fork_steps":null,"profile_url":"FrankAylward-y22344v2x2","protocol_img":"https:\/\/www.protocols.io\/img\/default_protocol.png","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","full_name":"Frank Aylward","created_by":"Frank Aylward","private_link":"C85D804852634651776174560F3B0E5E","original_img":"1","username":"frank-aylward","is_retracted":"0","retraction_reason":null,"plos_id":null,"manuscript_citation":null,"journal_name":null,"is_donations_disabled":"0","is_donations_disabled_by_user":"9","item_record_id":304729,"fork_info":[],"compare_forks":[],"protocols":[],"groups":[],"number_of_shared_runs":[],"ownership_history":[],"keywords":"","transfer_to_user":[],"sub_transfer":false,"is_transfer_pending":false,"number_of_bookmarks":"0","collections":[],"tags":[],"archived":0,"sub_authors":[],"sub_protocols_number":0,"can_edit_shared":0,"shared_runs":[],"is_shared_run":0,"is_shared":1,"banner":null,"contact_badges":[{"badge_id":"4","badge_image":"\/img\/badges\/gold.svg","badge_description":"Gold power author!"}],"number_of_comments":0,"is_locked":0,"is_locked_by":false,"authors":"Frank Aylward","authors_list":[{"name":"Frank Aylward","affiliation":"Virginia Tech","username":"frank-aylward","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png"}],"user":{"profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","username":"frank-aylward","full_name":"Frank Aylward","created_by":"Frank Aylward"},"access":{"can_view":"1","can_remove":"0","can_add":"0","can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":"0","can_move":"1","can_transfer":"1","can_download":"1","is_locked":"0"},"is_contact_suspended":0,"guidelines":null,"status_id":"2","is_research":"0","status_info":"We are still developing and optimizing this protocol","steps":[{"id":"622377","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"F5B460E8384B413E838B36604C97F8AE","previous_guid":null,"previous_id":"0","last_modified":"1523978671","components":[{"component_id":"1092301","previous_id":0,"original_id":"0","guid":"CEC5A892606F4525ADDC1C3FB3C7FB72","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Get the reads","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Get the reads"},"is_project":0},{"component_id":"1092300","previous_id":"1092301","original_id":"0","guid":"19CE119BE27F41A9803C06F027D436CA","previous_guid":"CEC5A892606F4525ADDC1C3FB3C7FB72","component_type_id":"1","data_id":null,"data":"<p># today we will be working with the raw reads from the Staphylococcus phage 812 genome sequencing project.<\/p>\n<p># To get the raw reads we need to use a program called the sra-toolkit. This is a tool maintained by NCBI to allow users to download data easily from the command line. <br \/># The toolkit allows users to specify the unique accession number for a project and then download the associated reads. <br \/># Here we will also use a command -X, which specifies how many reads we want to download. Since these datasets can be quite large we want to start with a small number. Here we will use 10,000<\/p>\n<p># we also want to use the --split-3 flag, which for Illumina data makes sure the forward and reverse reads are split into separate files. <br \/>fastq-dump -X 10000 --split-3 SRR6764339<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p># today we will be working with the raw reads from the Staphylococcus phage 812 genome sequencing project.<\/p>\n<p># To get the raw reads we need to use a program called the sra-toolkit. This is a tool maintained by NCBI to allow users to download data easily from the command line. <br \/># The toolkit allows users to specify the unique accession number for a project and then download the associated reads. <br \/># Here we will also use a command -X, which specifies how many reads we want to download. Since these datasets can be quite large we want to start with a small number. Here we will use 10,000<\/p>\n<p># we also want to use the --split-3 flag, which for Illumina data makes sure the forward and reverse reads are split into separate files. <br \/>fastq-dump -X 10000 --split-3 SRR6764339<\/p>"},"is_project":0}]},{"id":"622378","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"17F49DCD863E4C6DAF1E1012DEB076B1","previous_guid":"F5B460E8384B413E838B36604C97F8AE","previous_id":"622377","last_modified":"1523978650","components":[{"component_id":"1092303","previous_id":0,"original_id":"0","guid":"F080EE2E38ED4E959C4E8A5C9773FC13","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Run spades and get the assembly","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Run spades and get the assembly"},"is_project":0},{"component_id":"1092302","previous_id":"1092303","original_id":"0","guid":"0F90C051DD7E45B69474EBA5A05772C8","previous_guid":"F080EE2E38ED4E959C4E8A5C9773FC13","component_type_id":"1","data_id":null,"data":"<p># Now once we have the raw reads we can begin assembling them using a program calls SPAdes. <br \/># Now actually running the assembly is fairly easy- we just specify the read files, an output folder name, the number of threads we want to use, and the k-mer length.<\/p>\n<p>spades.py -1 SRR6764339_1.fastq -2 SRR6764339_2.fastq -o phage -t 4 -k 21 &amp;&gt; log.txt<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p># Now once we have the raw reads we can begin assembling them using a program calls SPAdes. <br \/># Now actually running the assembly is fairly easy- we just specify the read files, an output folder name, the number of threads we want to use, and the k-mer length.<\/p>\n<p>spades.py -1 SRR6764339_1.fastq -2 SRR6764339_2.fastq -o phage -t 4 -k 21 &amp;&gt; log.txt<\/p>\n<p>\u00a0<\/p>"},"is_project":0}]},{"id":"622379","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"980948AD5B264628A07311DD807B9D37","previous_guid":"17F49DCD863E4C6DAF1E1012DEB076B1","previous_id":"622378","last_modified":"1523979081","components":[{"component_id":"1092305","previous_id":0,"original_id":"0","guid":"07735FBE24E14475949991EC24FAD34F","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Visualize the assembly","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Visualize the assembly"},"is_project":0},{"component_id":"1092304","previous_id":"1092305","original_id":"0","guid":"209041A78F2541099A068D7B405A6671","previous_guid":"07735FBE24E14475949991EC24FAD34F","component_type_id":"1","data_id":null,"data":"<p>Once you get the assemlby you can visualize the De Bruijn graph using a program called Bandage. It can be installed here:<\/p>\n<p>https:\/\/rrwick.github.io\/Bandage\/<\/p>\n<p>\u00a0<\/p>\n<p>Once you get it installed you can upload the .fastg file and have Bandage draw the graph. You should get something that looks like this:<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v32jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v3zjtte.png\" data-ofn=\"Screenshot (5).png\" \/><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Once you get the assemlby you can visualize the De Bruijn graph using a program called Bandage. It can be installed here:<\/p>\n<p>https:\/\/rrwick.github.io\/Bandage\/<\/p>\n<p>\u00a0<\/p>\n<p>Once you get it installed you can upload the .fastg file and have Bandage draw the graph. You should get something that looks like this:<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v32jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v3zjtte.png\" data-ofn=\"Screenshot (5).png\" \/><\/p>"},"is_project":0}]},{"id":"622380","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"B1315BFC2DF647E789C46D64008A997F","previous_guid":"980948AD5B264628A07311DD807B9D37","previous_id":"622379","last_modified":"1523979173","components":[{"component_id":"1092307","previous_id":0,"original_id":"0","guid":"4EDB1C5E8C484309A19C111653B3EE42","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Visualize the assembly","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Visualize the assembly"},"is_project":0},{"component_id":"1092306","previous_id":"1092307","original_id":"0","guid":"F3DD5B2B3E0A493388EB5FA783784ACC","previous_guid":"4EDB1C5E8C484309A19C111653B3EE42","component_type_id":"1","data_id":null,"data":"<p>You can also color the De Bruijn graph by depth of <img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v34jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v33jtte.png\" data-ofn=\"Screenshot (6).png\" \/>coverage on the left-hand side. This can give you an idea of if high-coverage repetitive elements might be causingn problems. This should look like this:<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>You can also color the De Bruijn graph by depth of <img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v34jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v33jtte.png\" data-ofn=\"Screenshot (6).png\" \/>coverage on the left-hand side. This can give you an idea of if high-coverage repetitive elements might be causingn problems. This should look like this:<\/p>\n<p>\u00a0<\/p>"},"is_project":0}]},{"id":"622381","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"361120FAED4F4598A14C978B9CBDB0C0","previous_guid":"B1315BFC2DF647E789C46D64008A997F","previous_id":"622380","last_modified":"1523979240","components":[{"component_id":"1092309","previous_id":0,"original_id":"0","guid":"C3F30895040C42CAA32EE7C5B0363E80","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Visualize the assembly","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Visualize the assembly"},"is_project":0},{"component_id":"1092308","previous_id":"1092309","original_id":"0","guid":"C026A2FC51874FFA8B6DFEFFEF5E8F7C","previous_guid":"C3F30895040C42CAA32EE7C5B0363E80","component_type_id":"1","data_id":null,"data":"<p>Now go back to the SPAdes command and play around with the k-mer length. How does k-mer length change the topology of the de Bruijn graph?<\/p>\n<p>What about the number of reads used- what if you downloaded 10X fewer or 10X more reads and used those for assembly? How does that change the topology of the de Bruijn graph?<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Now go back to the SPAdes command and play around with the k-mer length. How does k-mer length change the topology of the de Bruijn graph?<\/p>\n<p>What about the number of reads used- what if you downloaded 10X fewer or 10X more reads and used those for assembly? How does that change the topology of the de Bruijn graph?<\/p>"},"is_project":0}]}]}