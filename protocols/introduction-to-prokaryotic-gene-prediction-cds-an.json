{"uri":"introduction-to-prokaryotic-gene-prediction-cds-an-pjrdkm6","version_id":"1","protocol_name":"Introduction to Prokaryotic gene prediction (CDS and rRNA)","protocol_name_html":"Introduction to Prokaryotic gene prediction (CDS and rRNA)","is_prepublished":"0","can_edit":"0","parent_id":"11560","api_version":"1","is_new_mode":"0","last_modified":"1527255136","type_id":"1","link":null,"fork_id":"","public_fork_note":"","number_of_steps":"8","has_versions":"1","first_published_date":"1527255136","publish_date":"2018-05-25 13:32:16","documents":null,"have_protocol_in_step":"0","is_protocol_in_step":"0","vendor_name":"Contributed by users","vendor_link":"https:\/\/www.protocols.io","vendor_logo":"\/img\/vendors\/1.png","mod_mins":"-16","mod_secs":"11","description":"<p><strong>This is a short tutorial on how to get started with gene prediciton in Prokaryotic genomes via the command line.<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Code is intended for use on an Ubuntu 16.04 LTS OS.<\/p>\n<p>\u00a0<\/p>\n<p>The tools we will use here are:<\/p>\n<p>Prodigal. https:\/\/github.com\/hyattpd\/Prodigal<\/p>\n<p>Barrnap. https:\/\/github.com\/tseemann\/barrnap<\/p>\n<p>\u00a0<\/p>\n<p>This tutorial is intended for teaching purposes, but if you use any of the tools in a scientific paper do not forget to cite the appropriate publications!<\/p>\n<p>\u00a0<\/p>\n<p><strong>Prodigal:<\/strong><\/p>\n<p>Prodigal: prokaryotic gene recognition and translation initiation site identification.<\/p>\n<p>BMC Bioinformatics, 2010, Volume 11, Number 1, Page 1<\/p>\n<div>Doug Hyatt, Gwo-Liang Chen, Philip F LoCascio, <span style=\"display: inline;\"> Miriam L Land, <\/span><span style=\"display: inline;\"> Frank W Larimer, <\/span><span style=\"display: inline;\"> Loren J Hauser <\/span><\/div>\n<p>\u00a0<\/p>\n<p><strong>Barrnap:<\/strong><\/p>\n<p>Seemann T (2013), barrnap 0.8 : rap. id ribosomal RNA predictionhttps:\/\/github.com\/tseemann\/barrnap<\/p>\n<p>\u00a0<\/p>\n<p><strong>Bedtools<\/strong><\/p>\n<div>\n<div>BEDTools: a flexible suite of utilities for comparing genomic features.<em> Bioinformatics<\/em>, Volume 26, Issue 6, 15 March 2010, Pages 841\u2013842, <a href=\"https:\/\/doi.org\/10.1093\/bioinformatics\/btq033\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/doi.org\/10.1093\/bioinformatics\/btq033<\/a><\/div>\n<\/div>","is_bookmarked":"0","can_reassign":"1","before_start":null,"has_guidelines":"0","materials":[],"warning":null,"version_class":"11560","public":"1","is_owner":"1","is_original_owner":"1","created_on":"1524075057","protocol_affiliation":"Virginia Tech","affiliation":"Virginia Tech","doi":"dx.doi.org\/10.17504\/protocols.io.pjrdkm6","doi_status":"2","changed_fork_steps":null,"profile_url":"FrankAylward-y22344v2x2","protocol_img":"https:\/\/www.protocols.io\/img\/default_protocol.png","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","full_name":"Frank Aylward","created_by":"Frank Aylward","private_link":"2631BB317CEEA2DB887B441A84AA0BAE","original_img":"1","username":"frank-aylward","is_retracted":"0","retraction_reason":null,"plos_id":null,"manuscript_citation":null,"journal_name":null,"is_donations_disabled":"0","is_donations_disabled_by_user":"9","item_record_id":305873,"fork_info":[],"compare_forks":[],"protocols":[],"groups":[],"number_of_shared_runs":[],"ownership_history":[],"keywords":"","transfer_to_user":[],"sub_transfer":false,"is_transfer_pending":false,"number_of_bookmarks":"0","collections":[],"tags":[],"archived":0,"sub_authors":[],"sub_protocols_number":0,"can_edit_shared":0,"shared_runs":[],"is_shared_run":0,"is_shared":1,"banner":null,"contact_badges":[{"badge_id":"4","badge_image":"\/img\/badges\/gold.svg","badge_description":"Gold power author!"}],"number_of_comments":0,"is_locked":0,"is_locked_by":false,"authors":"Frank Aylward","authors_list":[{"name":"Frank Aylward","affiliation":"Virginia Tech","username":"frank-aylward","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png"}],"user":{"profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","username":"frank-aylward","full_name":"Frank Aylward","created_by":"Frank Aylward"},"access":{"can_view":"1","can_remove":"0","can_add":"0","can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":"0","can_move":"1","can_transfer":"1","can_download":"1","is_locked":"0"},"is_contact_suspended":0,"guidelines":null,"status_id":"1","is_research":"0","status_info":"We use this protocol in our group and it is working","steps":[{"id":"622799","is_changed":1,"original_id":"622382","is_skipped":"0","is_checked":"0","guid":"519177ED29384533B2A05CD25B8A6D62","previous_guid":null,"previous_id":null,"last_modified":"1527084950","components":[{"component_id":"1093403","previous_id":0,"original_id":"1092311","guid":"582C914B519A4517BD20B803EF7B6B39","previous_guid":null,"component_type_id":"6","data_id":null,"data":"Download a Prokaryotic genome to start analyzing","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Download a Prokaryotic genome to start analyzing"},"is_project":0},{"component_id":"1093404","previous_id":"1093403","original_id":"1092310","guid":"165659E2059F4595842BC90C6AE6AC2B","previous_guid":"582C914B519A4517BD20B803EF7B6B39","component_type_id":"1","data_id":null,"data":"<p>Here we'll be working with <em>Prochlorococcus marinus<\/em> MED4.<\/p>\n<p>\u00a0<\/p>\n<p><strong>wget -O med4_genome.fna.gz ftp:\/\/ftp.ncbi.nlm.nih.gov\/genomes\/all\/GCF\/000\/007\/925\/GCF_000007925.1_ASM792v1\/GCF_000007925.1_ASM792v1_genomic.fna.gz<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>gunzip med4_genome.fna.gz<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>You should see something like this:<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v5vjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v5ujtte.png\" data-ofn=\"Screenshot (8).png\" \/><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Here we'll be working with <em>Prochlorococcus marinus<\/em> MED4.<\/p>\n<p>\u00a0<\/p>\n<p><strong>wget -O med4_genome.fna.gz ftp:\/\/ftp.ncbi.nlm.nih.gov\/genomes\/all\/GCF\/000\/007\/925\/GCF_000007925.1_ASM792v1\/GCF_000007925.1_ASM792v1_genomic.fna.gz<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>gunzip med4_genome.fna.gz<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>You should see something like this:<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v5vjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v5ujtte.png\" data-ofn=\"Screenshot (8).png\" \/><\/p>"},"is_project":0}],"available_protocols":["11560"]},{"id":"622800","is_changed":1,"original_id":"622383","is_skipped":"0","is_checked":"0","guid":"515E4A77C84B4F99925C5218C4B3603E","previous_guid":"519177ED29384533B2A05CD25B8A6D62","previous_id":"622799","last_modified":"1524094508","components":[{"component_id":"1093405","previous_id":0,"original_id":"1092312","guid":"47494793AE1D4BEF942104884001664D","previous_guid":null,"component_type_id":"1","data_id":null,"data":"<p>To install Prodigal (on Ubuntu) try:<\/p>\n<p><strong>sudo apt install prodigal<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>You may be asked to confirm that you want to install- for this just type \"Y\".<\/p>\n<p>\u00a0<\/p>\n<p>For a quick description of the usage and flags you can simply type:<\/p>\n<p><strong>prodigal<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>And you should see these usage instructions:<\/p>\n<p>\u00a0<img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v5xjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v5wjtte.png\" data-ofn=\"Screenshot (9).png\" \/><\/p>\n<p>\u00a0<\/p>\n<p>Prodigal will predict genes from chromosomes (or contigs), translate those genes into amino acids, and produce annotation summary files such as gff, depending on what options you use.\u00a0 <br \/><strong>prodigal -i med4_genome.fna -a med4.proteins.faa -d med4.genes.fna -f gff -o med4.prodigal.gff<\/strong><\/p>\n<p>\u00a0<\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>To install Prodigal (on Ubuntu) try:<\/p>\n<p><strong>sudo apt install prodigal<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>You may be asked to confirm that you want to install- for this just type \"Y\".<\/p>\n<p>\u00a0<\/p>\n<p>For a quick description of the usage and flags you can simply type:<\/p>\n<p><strong>prodigal<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>And you should see these usage instructions:<\/p>\n<p>\u00a0<img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v5xjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v5wjtte.png\" data-ofn=\"Screenshot (9).png\" \/><\/p>\n<p>\u00a0<\/p>\n<p>Prodigal will predict genes from chromosomes (or contigs), translate those genes into amino acids, and produce annotation summary files such as gff, depending on what options you use.\u00a0 <br \/><strong>prodigal -i med4_genome.fna -a med4.proteins.faa -d med4.genes.fna -f gff -o med4.prodigal.gff<\/strong><\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"1093406","previous_id":"1093405","original_id":"1092313","guid":"D52584F7BAC3442AB493DBA9FEF7877E","previous_guid":"47494793AE1D4BEF942104884001664D","component_type_id":"6","data_id":null,"data":"Predict protein-coding genes using Prodigal","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Predict protein-coding genes using Prodigal"},"is_project":0}],"available_protocols":["11560"]},{"id":"622801","is_changed":1,"original_id":"622384","is_skipped":"0","is_checked":"0","guid":"3344E7D29B014AAC872836E7AA043680","previous_guid":"C19448921E6B4E4192782A267085BC54","previous_id":"622806","last_modified":"1524076260","components":[{"component_id":"1093407","previous_id":0,"original_id":"1092315","guid":"2C72581BF43A4240932C4B7B84645820","previous_guid":null,"component_type_id":"6","data_id":null,"data":"Now back to Prodigal","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Now back to Prodigal"},"is_project":0},{"component_id":"1093408","previous_id":"1093407","original_id":"1092314","guid":"6444A34F6105402084D5BAD1A25FE29E","previous_guid":"2C72581BF43A4240932C4B7B84645820","component_type_id":"1","data_id":null,"data":"<p>Note that in addition to the protein and gene files we also got a gff file, which is a Gene Feature Format file. This gives information on the length and location of the genes that were predicted. We won't go into much detail about this here, but GFF files are handy for downstream applications like read mapping. You can read more about this format here: https:\/\/useast.ensembl.org\/info\/website\/upload\/gff.html<\/p>\n<p>\u00a0<\/p>\n<p>With prodigal you can also make Genbank format file instead of a GFF file, if you wish.<br \/><strong>prodigal -i med4_genome.fna -a med4.proteins.faa -d med4.genes.fna -f gbk -o med4.prodigal.gbk<\/strong><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Note that in addition to the protein and gene files we also got a gff file, which is a Gene Feature Format file. This gives information on the length and location of the genes that were predicted. We won't go into much detail about this here, but GFF files are handy for downstream applications like read mapping. You can read more about this format here: https:\/\/useast.ensembl.org\/info\/website\/upload\/gff.html<\/p>\n<p>\u00a0<\/p>\n<p>With prodigal you can also make Genbank format file instead of a GFF file, if you wish.<br \/><strong>prodigal -i med4_genome.fna -a med4.proteins.faa -d med4.genes.fna -f gbk -o med4.prodigal.gbk<\/strong><\/p>"},"is_project":0}],"available_protocols":["11560"]},{"id":"622802","is_changed":1,"original_id":"622385","is_skipped":"0","is_checked":"0","guid":"4A831CD370A04DEC9DDB25ACFCECD346","previous_guid":"3344E7D29B014AAC872836E7AA043680","previous_id":"622801","last_modified":"1524095001","components":[{"component_id":"1093409","previous_id":0,"original_id":"1092316","guid":"95D3B15EA22846C5AEFC5400DF05C20C","previous_guid":null,"component_type_id":"1","data_id":null,"data":"<p>So far we have been focusing on protein-coding genes, but there are other genes we will also want to predict for a more complete genome annotation.<\/p>\n<p>Barrnap is a program that is useful for predicting rRNA genes. To install:<\/p>\n<p><strong>sudo apt install barrnap<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>And to run:<br \/><strong>barrnap med4_genome.fna &gt; med4.rRNA.gff<\/strong><\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>So far we have been focusing on protein-coding genes, but there are other genes we will also want to predict for a more complete genome annotation.<\/p>\n<p>Barrnap is a program that is useful for predicting rRNA genes. To install:<\/p>\n<p><strong>sudo apt install barrnap<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>And to run:<br \/><strong>barrnap med4_genome.fna &gt; med4.rRNA.gff<\/strong><\/p>"},"is_project":0},{"component_id":"1093410","previous_id":"1093409","original_id":"1092317","guid":"8ABB30E8E9DB489F8D8CCC8F3E086C73","previous_guid":"95D3B15EA22846C5AEFC5400DF05C20C","component_type_id":"6","data_id":null,"data":"What about rRNA genes?","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"What about rRNA genes?"},"is_project":0}],"available_protocols":["11560"]},{"id":"622803","is_changed":1,"original_id":"622386","is_skipped":"0","is_checked":"0","guid":"3F086D7575CF4653BA0C984DB3EA33AE","previous_guid":"4A831CD370A04DEC9DDB25ACFCECD346","previous_id":"622802","last_modified":"1524076545","components":[{"component_id":"1093411","previous_id":0,"original_id":"1092319","guid":"CD88CE64E7C84AE482445124BBBEB490","previous_guid":null,"component_type_id":"6","data_id":null,"data":"Parsing the barrnap GFF output","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Parsing the barrnap GFF output"},"is_project":0},{"component_id":"1093412","previous_id":"1093411","original_id":"1092318","guid":"68CA56D85E1946C3B98D89FD33D66AD2","previous_guid":"CD88CE64E7C84AE482445124BBBEB490","component_type_id":"1","data_id":null,"data":"<p>Barrnap only provides the summary files (in this case gff). So we need to do a bit more work to get the actual sequences.<\/p>\n<p>One very useful tool or parsing GFF files is called BEDtools. To install:<\/p>\n<p>sudo apt install bedtools<\/p>\n<p>\u00a0<\/p>\n<p>There are many different utilities in bedtools. Here we will want to use the \"getfasta\" option, which will allow us to supply the fasta file of the Prochlorococcus genome and the barrnap GFF file to obtain the rRNA sequences. Note that the GFF file has the coordinates of where the rRNA genes are encoded, so between the GFF file and the .FNA file we have all the information we need. <br \/><strong>bedtools getfasta -fi med4_genome.fna -bed med4.rRNA.gff -fo med4.rRNA.fasta<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>16S rRNA genes are extremely useful for classification. If you ever have a genome and you don't know what it is, a good first step is to identify any 16S ribosomal genes in the chromosome and use them for classification.<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Barrnap only provides the summary files (in this case gff). So we need to do a bit more work to get the actual sequences.<\/p>\n<p>One very useful tool or parsing GFF files is called BEDtools. To install:<\/p>\n<p>sudo apt install bedtools<\/p>\n<p>\u00a0<\/p>\n<p>There are many different utilities in bedtools. Here we will want to use the \"getfasta\" option, which will allow us to supply the fasta file of the Prochlorococcus genome and the barrnap GFF file to obtain the rRNA sequences. Note that the GFF file has the coordinates of where the rRNA genes are encoded, so between the GFF file and the .FNA file we have all the information we need. <br \/><strong>bedtools getfasta -fi med4_genome.fna -bed med4.rRNA.gff -fo med4.rRNA.fasta<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>16S rRNA genes are extremely useful for classification. If you ever have a genome and you don't know what it is, a good first step is to identify any 16S ribosomal genes in the chromosome and use them for classification.<\/p>"},"is_project":0}],"available_protocols":["11560"]},{"id":"622804","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"5FBE5628EF9F4A64B7CF6B31B1CC2CB3","previous_guid":"515E4A77C84B4F99925C5218C4B3603E","previous_id":"622800","last_modified":"1524094660","components":[{"component_id":"1093414","previous_id":0,"original_id":"0","guid":"28B94358787E4B68B7D32FB358AF0B76","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Take a look at the results","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Take a look at the results"},"is_project":0},{"component_id":"1093413","previous_id":"1093414","original_id":"0","guid":"29C6459FDB8943C79F8995892905759B","previous_guid":"28B94358787E4B68B7D32FB358AF0B76","component_type_id":"1","data_id":null,"data":"<p>It's always good to take a look at the output to get an idea of the format, whether it's what you expect, etc.<\/p>\n<p>Let's start with a simple 'head' command.<\/p>\n<p>\u00a0<\/p>\n<p><strong>head med4.proteins.faa<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>and<\/p>\n<p>\u00a0<\/p>\n<p><strong>head med4.prodigal.gff<\/strong><\/p>\n<p><strong><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v5zjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v5yjtte.png\" data-ofn=\"Screenshot (10).png\" \/><\/strong><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>It's always good to take a look at the output to get an idea of the format, whether it's what you expect, etc.<\/p>\n<p>Let's start with a simple 'head' command.<\/p>\n<p>\u00a0<\/p>\n<p><strong>head med4.proteins.faa<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>and<\/p>\n<p>\u00a0<\/p>\n<p><strong>head med4.prodigal.gff<\/strong><\/p>\n<p><strong><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v5zjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v5yjtte.png\" data-ofn=\"Screenshot (10).png\" \/><\/strong><\/p>"},"is_project":0}]},{"id":"622805","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"6906F6E54E5B4452A168E6ED1CA7B209","previous_guid":"5FBE5628EF9F4A64B7CF6B31B1CC2CB3","previous_id":"622804","last_modified":"1524094801","components":[{"component_id":"1093416","previous_id":0,"original_id":"0","guid":"A265AE30645141F4BFF3F440B49D3F12","previous_guid":null,"component_type_id":"6","data_id":"0","data":"A closer look at the results","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"A closer look at the results"},"is_project":0},{"component_id":"1093415","previous_id":"1093416","original_id":"0","guid":"E438C5BFA4C7473687357B9E04D90E01","previous_guid":"A265AE30645141F4BFF3F440B49D3F12","component_type_id":"1","data_id":null,"data":"<p>If you want more stats about the output FASTA files you can also use a nifty tool called seqtk. To install on Ubuntu type:<\/p>\n<p>sudo apt install seqtk<\/p>\n<p>\u00a0<\/p>\n<p>and then try:<\/p>\n<p><strong>seqtk comp med4.proteins.faa | head<\/strong><\/p>\n<p>\u00a0<img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v55jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v54jtte.png\" data-ofn=\"Screenshot (11).png\" \/><\/p>\n<p>In the last command I piped the output to a head command so we could look at the first 10 entries. Seqtk is nice because it's pretty fast and gives you the length of the sequences (second column) and other information like the sequence composition. However, note that seqtk usually operates on nucleotide sequences, so the composition stats that are given are not valid for protein files (i.e., A in a protein sequence stands for Alanine, but it's being counted as if it's an Adenine here- the result would be some pretty funky composition info if you thought the file contained nucleotide sequences of genes!).<\/p>\n<p>Seqtk could also be used on the predicted genes file, in which case we could trust the composition stats:<\/p>\n<p><strong>seqtk comp med4.genes.fna | head<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>To count the number of proteins that were predicted, we could also try:<\/p>\n<p><strong>seqtk comp med4.proteins.faa | wc -l<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>This would give the number of lines that the seqtk command produced, which should be equivalent to the number of sequences in the file.<\/p>\n<p>\u00a0<\/p>\n<p>We won't go over seqtk's other options here, but there are some other useful utilities in this tool. To check them out just type:<\/p>\n<p><strong>seqtk<\/strong><\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>If you want more stats about the output FASTA files you can also use a nifty tool called seqtk. To install on Ubuntu type:<\/p>\n<p>sudo apt install seqtk<\/p>\n<p>\u00a0<\/p>\n<p>and then try:<\/p>\n<p><strong>seqtk comp med4.proteins.faa | head<\/strong><\/p>\n<p>\u00a0<img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v55jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v54jtte.png\" data-ofn=\"Screenshot (11).png\" \/><\/p>\n<p>In the last command I piped the output to a head command so we could look at the first 10 entries. Seqtk is nice because it's pretty fast and gives you the length of the sequences (second column) and other information like the sequence composition. However, note that seqtk usually operates on nucleotide sequences, so the composition stats that are given are not valid for protein files (i.e., A in a protein sequence stands for Alanine, but it's being counted as if it's an Adenine here- the result would be some pretty funky composition info if you thought the file contained nucleotide sequences of genes!).<\/p>\n<p>Seqtk could also be used on the predicted genes file, in which case we could trust the composition stats:<\/p>\n<p><strong>seqtk comp med4.genes.fna | head<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>To count the number of proteins that were predicted, we could also try:<\/p>\n<p><strong>seqtk comp med4.proteins.faa | wc -l<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>This would give the number of lines that the seqtk command produced, which should be equivalent to the number of sequences in the file.<\/p>\n<p>\u00a0<\/p>\n<p>We won't go over seqtk's other options here, but there are some other useful utilities in this tool. To check them out just type:<\/p>\n<p><strong>seqtk<\/strong><\/p>\n<p>\u00a0<\/p>"},"is_project":0}]},{"id":"622806","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"C19448921E6B4E4192782A267085BC54","previous_guid":"6906F6E54E5B4452A168E6ED1CA7B209","previous_id":"622805","last_modified":"1527084799","components":[{"component_id":"1093418","previous_id":0,"original_id":"0","guid":"30CFF223E4D6413BB07CB5CF9545671A","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Get the longest or shortest protein","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Get the longest or shortest protein"},"is_project":0},{"component_id":"1093417","previous_id":"1093418","original_id":"0","guid":"C75283DD31164749B826879B62EAEC85","previous_guid":"30CFF223E4D6413BB07CB5CF9545671A","component_type_id":"1","data_id":null,"data":"<p>As a side-note, let's say you wanted to find the longest protein predicted in the genome of <em>Prochlorococcus<\/em>. This can be easily retrieved using the following command:<\/p>\n<p><strong>seqtk comp med4.proteins.faa | sort -rn -k 2,2 | head<\/strong><\/p>\n<p>You should find a protein called NC_005042.1_1694 on the top, with a length of 1525 (second column)<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v57jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v56jtte.png\" data-ofn=\"Screenshot (12).png\" \/>\u00a0<\/p>\n<p>Now, what's happening in that last command is that the results of seqtk are being piped into the unix sort command. For sort, the flags -rn indicate that we want a reverse (-r) numeric (-n) sort. The second column of the seqtk output gives the lengths, and to specify that we want to sort by this we can give the -k 2,2 command (2,2 specifies that the sorting stars and ends on the second column, as opposed to using multiple columns to sort). Lastly, we pipe this into another head, so we should see the top 10 longest proteins now.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>If you wanted the shortest proteins you could either replace 'head' with 'tail' or remove the -r flag, so the sorting is in ascending order.<\/p>\n<p>\u00a0<\/p>\n<p>The unix sort command is super handy, and for more info you can always type:<\/p>\n<p><strong>man sort<\/strong><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>As a side-note, let's say you wanted to find the longest protein predicted in the genome of <em>Prochlorococcus<\/em>. This can be easily retrieved using the following command:<\/p>\n<p><strong>seqtk comp med4.proteins.faa | sort -rn -k 2,2 | head<\/strong><\/p>\n<p>You should find a protein called NC_005042.1_1694 on the top, with a length of 1525 (second column)<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v57jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v56jtte.png\" data-ofn=\"Screenshot (12).png\" \/>\u00a0<\/p>\n<p>Now, what's happening in that last command is that the results of seqtk are being piped into the unix sort command. For sort, the flags -rn indicate that we want a reverse (-r) numeric (-n) sort. The second column of the seqtk output gives the lengths, and to specify that we want to sort by this we can give the -k 2,2 command (2,2 specifies that the sorting stars and ends on the second column, as opposed to using multiple columns to sort). Lastly, we pipe this into another head, so we should see the top 10 longest proteins now.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>If you wanted the shortest proteins you could either replace 'head' with 'tail' or remove the -r flag, so the sorting is in ascending order.<\/p>\n<p>\u00a0<\/p>\n<p>The unix sort command is super handy, and for more info you can always type:<\/p>\n<p><strong>man sort<\/strong><\/p>"},"is_project":0}]}]}