{"uri":"genotype-imputation-workflow-v3-0-nmndc5e","version_id":"0","protocol_name":"Genotype imputation workflow v3.0","protocol_name_html":"Genotype imputation workflow v3.0","is_prepublished":"0","can_edit":"0","parent_id":null,"api_version":"1","is_new_mode":"0","last_modified":"1527769453","type_id":"1","link":null,"fork_id":"","public_fork_note":"","number_of_steps":"14","has_versions":"0","first_published_date":"1525952265","publish_date":"2018-05-10 11:52:06","documents":null,"have_protocol_in_step":"0","is_protocol_in_step":"0","vendor_name":"Contributed by users","vendor_link":"https:\/\/www.protocols.io","vendor_logo":"\/img\/vendors\/1.png","mod_mins":"-9","mod_secs":"41","description":null,"is_bookmarked":"0","can_reassign":"1","before_start":null,"has_guidelines":"0","materials":[],"warning":null,"version_class":"10638","public":"1","is_owner":"1","is_original_owner":"1","created_on":"1520256675","protocol_affiliation":"FIMM, University of Helsinki,equal contribution; FIMM, University of Helsinki","affiliation":"FIMM, University of Helsinki","doi":"dx.doi.org\/10.17504\/protocols.io.nmndc5e","doi_status":"2","changed_fork_steps":null,"profile_url":"Priit-y2z2b403y2","protocol_img":"https:\/\/www.protocols.io\/img\/default_protocol.png","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/tsri986.jpg","full_name":"Priit Palta","created_by":"Priit Palta","private_link":"6D823D7C8F9DBDAD2A159522331F9EE8","original_img":"1","username":"priit-palta","is_retracted":"0","retraction_reason":null,"plos_id":null,"manuscript_citation":null,"journal_name":null,"is_donations_disabled":"0","is_donations_disabled_by_user":"9","item_record_id":291911,"fork_info":[],"compare_forks":[],"protocols":[],"groups":[{"group_id":"617","group_uri":"seqinfo","group_name":"FIMM HumGen Sequencing Informatics","group_logo":"https:\/\/s3.amazonaws.com\/pr-journal\/vs7i986.png","requested_uid":null,"request_flag":null,"my_request":"1"}],"number_of_shared_runs":[],"ownership_history":[],"keywords":"genotype imputation, imputation, Beagle, haplotype phasing, pre-phasing, Eagle","transfer_to_user":[],"sub_transfer":false,"is_transfer_pending":false,"number_of_bookmarks":"2","collections":[],"tags":[],"archived":0,"sub_authors":[],"sub_protocols_number":0,"can_edit_shared":0,"shared_runs":[{"username":"priit-palta","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/tsri986.jpg","full_name":"Priit Palta","group_name":"FIMM HumGen Sequencing Informatics","group_logo":"https:\/\/s3.amazonaws.com\/pr-journal\/vs7i986.png","group_uri":"seqinfo"}],"is_shared_run":1,"is_shared":1,"banner":null,"contact_badges":[{"badge_id":"2","badge_image":"\/img\/badges\/bronze.svg","badge_description":"Author!"},{"badge_id":"6","badge_image":"\/img\/badges\/socialbutterfly.svg","badge_description":"Social butterfly"}],"number_of_comments":0,"is_locked":0,"is_locked_by":false,"authors":"Kalle P\u00e4rn,Marita A. Isokallio,Javier Nunez Fontarnau,Aarno Palotie,Samuli Ripatti,Priit Palta","authors_list":[{"name":"Kalle P\u00e4rn","affiliation":"FIMM, University of Helsinki","username":"kalle-prn","profile_image":"\/img\/avatars\/014.png"},{"name":"Marita A. Isokallio","affiliation":"FIMM, University of Helsinki","username":"marita-a-isokallio","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/swii3gw.jpg"},{"name":"Javier Nunez Fontarnau","affiliation":"FIMM, University of Helsinki","username":"javier-nunez-fontarnau","profile_image":"\/img\/avatars\/006.png"},{"name":"Aarno Palotie","affiliation":"equal contribution; FIMM, University of Helsinki","username":null,"profile_image":null},{"name":"Samuli Ripatti","affiliation":"equal contribution; FIMM, University of Helsinki","username":null,"profile_image":null},{"name":"Priit Palta","affiliation":"equal contribution; FIMM, University of Helsinki","username":"priit-palta","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/tsri986.jpg"}],"user":{"profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/tsri986.jpg","username":"priit-palta","full_name":"Priit Palta","created_by":"Priit Palta"},"access":{"can_view":"1","can_remove":"0","can_add":"0","can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":"1","can_move":"1","can_transfer":"1","can_download":"1","is_locked":"0"},"is_contact_suspended":0,"guidelines":null,"status_id":"1","is_research":"1","status_info":"We use this protocol in our group and it is working","steps":[{"id":"613263","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"62340646E06A4CEFA8F630EF4528BBC6","previous_guid":null,"previous_id":"0","last_modified":"1527769453","components":[{"component_id":"1068938","previous_id":0,"original_id":"0","guid":"3D53B5B17E20419D9E9F2FBFAA333EA6","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Requirements and preparatory steps","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Requirements and preparatory steps"},"is_project":0},{"component_id":"1068937","previous_id":"1068938","original_id":"0","guid":"AC8B93168FA146639C370195A2D40005","previous_guid":"3D53B5B17E20419D9E9F2FBFAA333EA6","component_type_id":"1","data_id":null,"data":"<p><strong>The actual imputation protocol begins at step 2. <\/strong><\/p>\n<p><strong>All consecutive steps (commands given in 'cmd COMMAND' sections) must be run to ensure high-quality results. <\/strong><\/p>\n<p>For a 'quick and dirty' genotype imputation 'run', you can jump straight to <strong>Steps 10-11<\/strong> and only run these (assuming you already have all the required files in the correct format).<\/p>\n<p>Throughout the protocol we assume Bash shell.<strong><br \/><\/strong><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>This <strong>Step 1<\/strong> defines the requirements for the protocol (e.g. required software packages and reference genome files) and suggests example commands on how to process the files into suitable formats.<\/p>\n<p>\u00a0<\/p>\n<p>In the protocol, we assume human reference genome build version <strong>GRCh38\/hg38<\/strong>. To lift-over and update the build of your chip data, you can use our lift-over protocol: <a href=\"https:\/\/www.protocols.io\/view\/genotyping-chip-data-reference-genome-build-lift-o-nqtddwn\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/www.protocols.io\/view\/genotyping-chip-data-reference-genome-build-lift-o-nqtddwn<\/a><\/p>\n<p>\u00a0<\/p>\n<p>Please note that build 38 compatible VCF files should and auxiliary files might have<strong> \u2018<\/strong>chr<strong>\u2019<\/strong> prefixes in chromosome names. Therefore, some minor corresponding changes might be required in the related commands to parse\/work with these files correctly.<\/p>\n<p>\u00a0<\/p>\n<p>If you prefer GRCh37\/hg19 or other genome build versions, please download the corresponding reference genome, map and panel files and modify the suggested commands accordingly.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.1 Software packages<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>1.1.1 Download and install the software packages <\/strong><\/p>\n<p>Required software packages are listed below with the versions used in this protocol. However, using the latest versions is recommended.<\/p>\n<ul>\n<li>BCFtools v1.7 <a href=\"http:\/\/www.htslib.org\/download\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/www.htslib.org\/download\/<\/a><\/li>\n<li>R v3.4.1 <a href=\"https:\/\/www.r-project.org\/\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/www.r-project.org\/<\/a><\/li>\n<li>R package data.table <a href=\"https:\/\/github.com\/Rdatatable\/data.table\/wiki\/Installation\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/github.com\/Rdatatable\/data.table\/wiki\/Installation<\/a><\/li>\n<li>R package sm <a href=\"https:\/\/cran.r-project.org\/web\/packages\/sm\/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/cran.r-project.org\/package=sm<\/a><\/li>\n<li>Eagle v2.4 <a href=\"https:\/\/data.broadinstitute.org\/alkesgroup\/Eagle\/\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/data.broadinstitute.org\/alkesgroup\/Eagle\/<\/a><\/li>\n<li>Beagle v4.1 beagle.27Jan18.7e1.jar <a href=\"https:\/\/faculty.washington.edu\/browning\/beagle\/beagle.html\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/faculty.washington.edu\/browning\/beagle\/beagle.html<\/a><\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p><strong>1.1.2 Export the paths<\/strong><\/p>\n<p>Once installed, export the correct paths to environment variable PATH:<\/p>\n<pre class=\"language-markup\"><code>echo PATH=\/path\/to\/installed\/bcftools\/executable\/dir\/:\/path\/to\/installed\/Rscript\/executable\/dir\/:\/path\/to\/installed\/eagle\/executable\/dir\/:\/path\/to\/installed\/beagle\/executable\/dir\/:$PATH &gt;&gt; $HOME\/.bashrc\nsource $HOME\/.bashrc<\/code><\/pre>\n<p>\u00a0<\/p>\n<p>BCFtools plugin usage requires environment variable BCFTOOLS_PLUGINS exported, e.g:<\/p>\n<pre class=\"language-markup\"><code>echo export BCFTOOLS_PLUGINS=\/path\/to\/bcftools\/plugins &gt;&gt; $HOME\/.bashrc\nsource $HOME\/.bashrc<\/code><\/pre>\n<p>\u00a0<\/p>\n<p><strong>1.1.3 Install the R packages<\/strong><\/p>\n<p>Once R is installed, for instance the 'data.table' package can be installed in<strong> R<\/strong>, e.g.:<\/p>\n<pre class=\"language-markup\"><code>install.packages('data.table', type = 'source', repos = 'http:\/\/Rdatatable.github.io\/data.table')<\/code><\/pre>\n<pre>Alternatively, if you already downloaded the package:<\/pre>\n<pre class=\"language-markup\"><code>install.packages('\/path\/to\/the\/downloaded\/data.table_1.10.4.tar.gz', repos = NULL, type = 'source')<\/code><\/pre>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.2. Reference genome and genetic map files<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>1.2.1 Fasta files<\/strong><\/p>\n<p>Homo Sapiens assembly hg38 version 0 is used and the required files are<\/p>\n<ul>\n<li>hg38_v0_Homo_sapiens_assembly38.fasta<\/li>\n<li>hg38_v0_Homo_sapiens_assembly38.fasta.fai<\/li>\n<\/ul>\n<p>The files are available for downloading at Broad Insitute storage in Google cloud at <a href=\"https:\/\/console.cloud.google.com\/storage\/browser\/broad-references\/hg38\/v0\/?pli=1\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/console.cloud.google.com\/storage\/browser\/broad-references\/hg38\/v0\/?pli=1<\/a><\/p>\n<p>\u00a0<\/p>\n<p>If you prefer GRCh37\/hg19, the reference genome files are available for downloading at Ensembl site at<\/p>\n<p><a href=\"https:\/\/grch37.ensembl.org\/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/grch37.ensembl.org\/index.html<\/a>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.2.2. Genetic map files for phasing with Eagle<\/strong><\/p>\n<p>Genetic map file (all chromosomes in a single file) with recombination frequencies is downloaded together with Eagle for <strong>GRCh38\/hg38<\/strong>.<\/p>\n<ul>\n<li>genetic_map_hg38_withX.txt.gz<\/li>\n<\/ul>\n<p>We have processed the file according to the command below in order to split it per chromosome.<\/p>\n<p>The resulting files are saved as:<\/p>\n<ul>\n<li>eagle_chr#_b38.txt (where # is the chromosome number)<\/li>\n<\/ul>\n<pre class=\"language-markup\"><code># Take the lines for each chromosome separately,\n# add a header row and store into a .txt file\nfor chr in {1..23}; do\n    zcat genetic_map_hg38_withX.txt.gz | \\\n    grep ^$chr | sed '1ichr position COMBINED_rate(cM\/Mb) Genetic_Map(cM)' \\\n    &gt; eagle_chr${chr}_b38.map\ndone<\/code><\/pre>\n<p><strong><em>Note: Currently the chromosome notation in the Eagle genetic map files is only the chromosome number without 'chr' and chrX is '23'.<\/em><\/strong><\/p>\n<p><strong><em>Note: Starting from Eagle v2.4, also chromosome notation with 'chr' tag is supported.<\/em><\/strong><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>If you prefer GRCh37\/hg19, the genetic map file is available for downloading at Eagle download page at <a href=\"https:\/\/data.broadinstitute.org\/alkesgroup\/Eagle\/downloads\/tables\/\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/data.broadinstitute.org\/alkesgroup\/Eagle\/downloads\/tables\/<\/a><\/p>\n<ul>\n<li>genetic_map_hg19_withX.txt.gz<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.2.3 Genetic map files for imputation with Beagle<\/strong><\/p>\n<p>We have processed the\u00a0<strong>GRCh38\/hg38<\/strong> Eagle genetic map files (provided by Eagle without 'chr' tag and chrX as '23') to be suitable for Beagle according to the commands below.<\/p>\n<p>First, confirm the format of the downloaded Eagle genetic map files and make required changes such that the chromosome notation is with 'chr' tag and chromosome 23 is 'chrX'.<\/p>\n<p>\u00a0<\/p>\n<p>The resulting files are saved as:<\/p>\n<ul>\n<li>beagle_chr#_b38.map (where # is the chromosome number)<\/li>\n<\/ul>\n<pre class=\"language-markup\"><code># For each Eagle genetic map file, re-order the columns, remove headers, add 'chr' and replace chr23 with chrX\nfor chr in {1..23}; do\n\tfilename=eagle_chr${chr}_b38.map\n\tpaste &lt;(cut -d' ' -f1-2 $filename | sed '1d' | sed 's\/^\/chr\/;s\/chr23\/chrX\/') \\\n\t&lt;(cut -d' ' -f4 $filename | sed '1d') \\\n\t&lt;(cut -d' ' -f2 $filename | sed '1d') | \\\n\tawk -v OFS='\\t' '$2='.' {print}' &gt; beagle_chr${chr}_b38.map\ndone<\/code><\/pre>\n<p><strong><em>Note: Chromosome notation in the Beagle genetic map files is 'chr#' and chromosome 23 is 'chrX'.<\/em><\/strong><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>If you prefer GRCh37\/hg19, the genetic map file is available for downloading at Beagle site:<\/p>\n<p><a href=\"http:\/\/bochet.gcc.biostat.washington.edu\/beagle\/genetic_maps\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/bochet.gcc.biostat.washington.edu\/beagle\/genetic_maps\/<\/a><\/p>\n<ul>\n<li>plink.GRCh37.map.zip<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p><strong>1.3. Imputation reference panel files<br \/><\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>1.3.1 Obtain the reference panel files<\/strong><\/p>\n<p>For increased imputation accuracy we recommend using a population-specific imputation reference panel, if available.<\/p>\n<p>\u00a0<\/p>\n<p>If population-specific reference data is not available, for instance 1000 Genomes Project (<a href=\"https:\/\/www.nature.com\/articles\/nature15393\" target=\"_blank\" rel=\"noopener noreferrer\">www.nature.com\/articles\/nature15393<\/a>) data can be used instead.<\/p>\n<p>\u00a0<\/p>\n<p>GRCh38\/hg38 files are available at EBI 1000 genomes ftp site at <a href=\"ftp:\/\/ftp.1000genomes.ebi.ac.uk\/vol1\/ftp\/release\/20130502\/supporting\/GRCh38_positions\/\" target=\"_blank\" rel=\"noopener noreferrer\">ftp:\/\/ftp.1000genomes.ebi.ac.uk\/vol1\/ftp\/release\/20130502\/supporting\/GRCh38_positions\/<\/a><\/p>\n<p>GRCh37\/hg19 files are available at Beagle site already processed to be compatible with Beagle:<\/p>\n<p><a href=\"http:\/\/bochet.gcc.biostat.washington.edu\/beagle\/1000_Genomes_phase3_v5a\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/bochet.gcc.biostat.washington.edu\/beagle\/1000_Genomes_phase3_v5a\/<\/a><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>The 1000 Genomes Project files can be downloaded for instance with command:<\/p>\n<pre class=\"language-markup\"><code>wget -np ftp:\/\/ftp.1000genomes.ebi.ac.uk\/vol1\/ftp\/release\/20130502\/supporting\/GRCh38_positions\/*<\/code><\/pre>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>Save the phased reference panel VCF files per chromosome as follows (for consistency with the commands in the protocol):<\/p>\n<ul>\n<li>panel_phased_chr#.vcf.gz (where # is chromosome number)<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p><strong>NOTE: The reference panel files should contain non-missing, phased genotypes, chrX as diploid genotypes and all variants as biallelic records!<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>If your reference panel files are not in correct format, see some suggested commands below.<\/p>\n<p>Also Eagle provides guidelines for processing the GRCh38\/hg38 1000 Genomes Project files at:<br \/><a href=\"https:\/\/data.broadinstitute.org\/alkesgroup\/Eagle\/#x1-320005.3.2\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/data.broadinstitute.org\/alkesgroup\/Eagle\/#x1-320005.3.2<\/a><\/p>\n<p>\u00a0<\/p>\n<p><strong>1.3.2 Check for multiallelic sites<\/strong><\/p>\n<p>Our v3.0 imputation workflow can also impute multiallelic sites, i.e. multiple alternative alleles at the same site, but these multiallelic variants MUST be <strong>decomposed<\/strong> (be split and represented as a set of biallelic variants) in the reference panel files.<\/p>\n<p>\u00a0<\/p>\n<p>Confirm that in your reference panel files, multiallelic sites (if present) are decomposed. If they are not, use the example command below to split the multiallelic sites into biallelic records:<\/p>\n<pre class=\"language-markup\"><code>for chr in {1..23}; do\n    bcftools norm -m -any panel_phased_chr${chr}.vcf.gz -Oz -o panel_phased_split_multiallelic_chr${chr}.vcf.gz\ndone<\/code><\/pre>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.3.3 Check the chromosome notation in GRCh38\/hg38 reference panel files<br \/><\/strong><\/p>\n<p>Confirm that the chromosome notation in your reference panel files follows the GRCh38\/hg38 notations as 'chr#' for autosomal, 'chrX' for chromosome 23 and 'chrM' for mitochondrial sites. If not, adapt the example command below according to your files and rename the chromosomes:<\/p>\n<pre class=\"language-markup\"><code># Create a list of all chromosome names in space-delimited format &lt;old_name&gt; &lt;new_name&gt;\n# Example of chr_names.txt file:\n1 chr1\n2 chr2\n...\n23 chrX\nX chrX\nMT chrM\n\nbcftools annotate --rename-chrs chr_names.txt input.vcf.gz -Oz -o output.vcf.gz\n\n<\/code><\/pre>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.3.4 Generate a list of the reference panel sample IDs<\/strong><\/p>\n<p>List of sample IDs present in the reference panel, one line per sample ID, save with filename<\/p>\n<ul>\n<li>panel_sample_IDs.txt<\/li>\n<\/ul>\n<p>The list of sample IDs can be generated from any of the VCF files (here chr22) as in the example below (assuming that all chromosomes contain the same set of samples):<\/p>\n<pre class=\"language-markup\"><code>bcftools query -l panel_phased_chr22.vcf.gz &gt; panel_sample_IDs.txt<\/code><\/pre>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.3.5 Reference panel allele frequencies<\/strong><\/p>\n<p>Generate a tab-delimited file of the reference panel allele frequencies, one variant per line, with columns CHR, SNP (in generated file header replaced with CHR_POS_REF_ALT), REF, ALT, AF (including the header line); note last for loop in following Bash script.<\/p>\n<p>\u00a0<\/p>\n<p>Use the phased reference panel VCF files as input with the example command below and save the file as<\/p>\n<ul>\n<li>panel.frq<\/li>\n<\/ul>\n<pre class=\"language-markup\"><code># Check your reference panel VCF and if it does NOT contain AF in the INFO field, calculate it with +fill-tags plugin \n# Note: it requires environmental variable BCFTOOLS_PLUGINS exported (Step 1.2)\nfor chr in {1..23}; do\n    bcftools +fill-tags panel_phased_chr${chr}.vcf.gz -Oz -o panel_phased_chr${chr}_AF.vcf.gz -- -t AF\ndone\n\n# Generate a tab-delimited header for the allele frequency file\necho -e 'CHR\\tSNP\\tREF\\tALT\\tAF' &gt; panel.frq\n\n# Query the required fields from the VCF file and append to the allele frequency file\nfor chr in {1..23}; do\n    bcftools query -f '%CHROM\\t%CHROM\\_%POS\\_%REF\\_%ALT\\t%REF\\t%ALT\\t%INFO\/AF\\n' panel_phased_chr${chr}.vcf.gz &gt;&gt; panel.frq\ndone<\/code><\/pre>\n<p><strong><em>Note: Chromosome notation in the panel.frq file should follow the GRCh38\/hg38 notations ('chr#' for autosomal chromosomes and 'chrX' for chromosome 23).<\/em><\/strong><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.3.6 Create binary reference panel files<\/strong><\/p>\n<p>The phased reference panel files per chromosome are required in bref format (bref = binary reference. For more information see Beagle documentation at Beagle site:<\/p>\n<p><a href=\"https:\/\/faculty.washington.edu\/browning\/beagle\/bref.16Dec15.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/faculty.washington.edu\/browning\/beagle\/bref.16Dec15.pdf<\/a>.<\/p>\n<p>\u00a0<\/p>\n<p>The required <strong>bref.*.jar<\/strong> is downloaded together with Beagle.<\/p>\n<p>\u00a0<\/p>\n<p>Use the phased reference panel VCFs as inputs for the example command below which saves the output files as:<\/p>\n<ul>\n<li>panel_phased_chr#.bref (where # is chromosome number)<\/li>\n<\/ul>\n<pre class=\"language-markup\"><code># Convert each VCF to bref format\nfor chr in {1..23}; do\n    java -jar bref.08Jun17.d8b.jar panel_phased_chr${chr}.vcf.gz\ndone<\/code><\/pre>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.4. You are ready to start! <\/strong><\/p>\n<p><strong>As the last prepatory step, let's go over the required input data file(s) and also expected final output files!<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>1.4.1 Input file:<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Post-QC chip genotype data in VCFv4.2 format:<\/p>\n<ul>\n<li>&lt;dataset&gt;.vcf.gz<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p><strong><em>Note: Chromosome notation should follow the GRCh38\/hg38 notations (e.g. 'chr#' for autosomal chromosomes, 'chrX', 'chrY' and 'chrM').<\/em><\/strong><\/p>\n<p><strong><em>Note: If the input data was lifted over from an older genome build to version 38, cautious inspection of the data is highly recommended before proceeding with the protocol.<\/em><\/strong><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.4.2 Final output files:<\/strong><\/p>\n<ul>\n<li>&lt;dataset&gt;_imputed_info_chr#.vcf.gz (where # is chromosome number)<\/li>\n<li>&lt;dataset&gt;_postimputation_summary_plots.pdf<\/li>\n<\/ul>\n<p><em>Note: Several intermediate files are created during the protocol. Those files can be used for troubleshooting and deleted once the successful imputation is confirmed.<\/em><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p><strong>The actual imputation protocol begins at step 2. <\/strong><\/p>\n<p><strong>All consecutive steps (commands given in 'cmd COMMAND' sections) must be run to ensure high-quality results. <\/strong><\/p>\n<p>For a 'quick and dirty' genotype imputation 'run', you can jump straight to <strong>Steps 10-11<\/strong> and only run these (assuming you already have all the required files in the correct format).<\/p>\n<p>Throughout the protocol we assume Bash shell.<strong><br \/><\/strong><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>This <strong>Step 1<\/strong> defines the requirements for the protocol (e.g. required software packages and reference genome files) and suggests example commands on how to process the files into suitable formats.<\/p>\n<p>\u00a0<\/p>\n<p>In the protocol, we assume human reference genome build version <strong>GRCh38\/hg38<\/strong>. To lift-over and update the build of your chip data, you can use our lift-over protocol: <a href=\"https:\/\/www.protocols.io\/view\/genotyping-chip-data-reference-genome-build-lift-o-nqtddwn\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/www.protocols.io\/view\/genotyping-chip-data-reference-genome-build-lift-o-nqtddwn<\/a><\/p>\n<p>\u00a0<\/p>\n<p>Please note that build 38 compatible VCF files should and auxiliary files might have<strong> \u2018<\/strong>chr<strong>\u2019<\/strong> prefixes in chromosome names. Therefore, some minor corresponding changes might be required in the related commands to parse\/work with these files correctly.<\/p>\n<p>\u00a0<\/p>\n<p>If you prefer GRCh37\/hg19 or other genome build versions, please download the corresponding reference genome, map and panel files and modify the suggested commands accordingly.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.1 Software packages<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>1.1.1 Download and install the software packages <\/strong><\/p>\n<p>Required software packages are listed below with the versions used in this protocol. However, using the latest versions is recommended.<\/p>\n<ul>\n<li>BCFtools v1.7 <a href=\"http:\/\/www.htslib.org\/download\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/www.htslib.org\/download\/<\/a><\/li>\n<li>R v3.4.1 <a href=\"https:\/\/www.r-project.org\/\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/www.r-project.org\/<\/a><\/li>\n<li>R package data.table <a href=\"https:\/\/github.com\/Rdatatable\/data.table\/wiki\/Installation\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/github.com\/Rdatatable\/data.table\/wiki\/Installation<\/a><\/li>\n<li>R package sm <a href=\"https:\/\/cran.r-project.org\/web\/packages\/sm\/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/cran.r-project.org\/package=sm<\/a><\/li>\n<li>Eagle v2.4 <a href=\"https:\/\/data.broadinstitute.org\/alkesgroup\/Eagle\/\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/data.broadinstitute.org\/alkesgroup\/Eagle\/<\/a><\/li>\n<li>Beagle v4.1 beagle.27Jan18.7e1.jar <a href=\"https:\/\/faculty.washington.edu\/browning\/beagle\/beagle.html\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/faculty.washington.edu\/browning\/beagle\/beagle.html<\/a><\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p><strong>1.1.2 Export the paths<\/strong><\/p>\n<p>Once installed, export the correct paths to environment variable PATH:<\/p>\n<pre class=\"language-markup\"><code>echo PATH=\/path\/to\/installed\/bcftools\/executable\/dir\/:\/path\/to\/installed\/Rscript\/executable\/dir\/:\/path\/to\/installed\/eagle\/executable\/dir\/:\/path\/to\/installed\/beagle\/executable\/dir\/:$PATH &gt;&gt; $HOME\/.bashrc\nsource $HOME\/.bashrc<\/code><\/pre>\n<p>\u00a0<\/p>\n<p>BCFtools plugin usage requires environment variable BCFTOOLS_PLUGINS exported, e.g:<\/p>\n<pre class=\"language-markup\"><code>echo export BCFTOOLS_PLUGINS=\/path\/to\/bcftools\/plugins &gt;&gt; $HOME\/.bashrc\nsource $HOME\/.bashrc<\/code><\/pre>\n<p>\u00a0<\/p>\n<p><strong>1.1.3 Install the R packages<\/strong><\/p>\n<p>Once R is installed, for instance the 'data.table' package can be installed in<strong> R<\/strong>, e.g.:<\/p>\n<pre class=\"language-markup\"><code>install.packages('data.table', type = 'source', repos = 'http:\/\/Rdatatable.github.io\/data.table')<\/code><\/pre>\n<pre>Alternatively, if you already downloaded the package:<\/pre>\n<pre class=\"language-markup\"><code>install.packages('\/path\/to\/the\/downloaded\/data.table_1.10.4.tar.gz', repos = NULL, type = 'source')<\/code><\/pre>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.2. Reference genome and genetic map files<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>1.2.1 Fasta files<\/strong><\/p>\n<p>Homo Sapiens assembly hg38 version 0 is used and the required files are<\/p>\n<ul>\n<li>hg38_v0_Homo_sapiens_assembly38.fasta<\/li>\n<li>hg38_v0_Homo_sapiens_assembly38.fasta.fai<\/li>\n<\/ul>\n<p>The files are available for downloading at Broad Insitute storage in Google cloud at <a href=\"https:\/\/console.cloud.google.com\/storage\/browser\/broad-references\/hg38\/v0\/?pli=1\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/console.cloud.google.com\/storage\/browser\/broad-references\/hg38\/v0\/?pli=1<\/a><\/p>\n<p>\u00a0<\/p>\n<p>If you prefer GRCh37\/hg19, the reference genome files are available for downloading at Ensembl site at<\/p>\n<p><a href=\"https:\/\/grch37.ensembl.org\/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/grch37.ensembl.org\/index.html<\/a>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.2.2. Genetic map files for phasing with Eagle<\/strong><\/p>\n<p>Genetic map file (all chromosomes in a single file) with recombination frequencies is downloaded together with Eagle for <strong>GRCh38\/hg38<\/strong>.<\/p>\n<ul>\n<li>genetic_map_hg38_withX.txt.gz<\/li>\n<\/ul>\n<p>We have processed the file according to the command below in order to split it per chromosome.<\/p>\n<p>The resulting files are saved as:<\/p>\n<ul>\n<li>eagle_chr#_b38.txt (where # is the chromosome number)<\/li>\n<\/ul>\n<pre class=\"language-markup\"><code># Take the lines for each chromosome separately,\n# add a header row and store into a .txt file\nfor chr in {1..23}; do\n    zcat genetic_map_hg38_withX.txt.gz | \\\n    grep ^$chr | sed '1ichr position COMBINED_rate(cM\/Mb) Genetic_Map(cM)' \\\n    &gt; eagle_chr${chr}_b38.map\ndone<\/code><\/pre>\n<p><strong><em>Note: Currently the chromosome notation in the Eagle genetic map files is only the chromosome number without 'chr' and chrX is '23'.<\/em><\/strong><\/p>\n<p><strong><em>Note: Starting from Eagle v2.4, also chromosome notation with 'chr' tag is supported.<\/em><\/strong><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>If you prefer GRCh37\/hg19, the genetic map file is available for downloading at Eagle download page at <a href=\"https:\/\/data.broadinstitute.org\/alkesgroup\/Eagle\/downloads\/tables\/\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/data.broadinstitute.org\/alkesgroup\/Eagle\/downloads\/tables\/<\/a><\/p>\n<ul>\n<li>genetic_map_hg19_withX.txt.gz<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.2.3 Genetic map files for imputation with Beagle<\/strong><\/p>\n<p>We have processed the\u00a0<strong>GRCh38\/hg38<\/strong> Eagle genetic map files (provided by Eagle without 'chr' tag and chrX as '23') to be suitable for Beagle according to the commands below.<\/p>\n<p>First, confirm the format of the downloaded Eagle genetic map files and make required changes such that the chromosome notation is with 'chr' tag and chromosome 23 is 'chrX'.<\/p>\n<p>\u00a0<\/p>\n<p>The resulting files are saved as:<\/p>\n<ul>\n<li>beagle_chr#_b38.map (where # is the chromosome number)<\/li>\n<\/ul>\n<pre class=\"language-markup\"><code># For each Eagle genetic map file, re-order the columns, remove headers, add 'chr' and replace chr23 with chrX\nfor chr in {1..23}; do\n\tfilename=eagle_chr${chr}_b38.map\n\tpaste &lt;(cut -d' ' -f1-2 $filename | sed '1d' | sed 's\/^\/chr\/;s\/chr23\/chrX\/') \\\n\t&lt;(cut -d' ' -f4 $filename | sed '1d') \\\n\t&lt;(cut -d' ' -f2 $filename | sed '1d') | \\\n\tawk -v OFS='\\t' '$2='.' {print}' &gt; beagle_chr${chr}_b38.map\ndone<\/code><\/pre>\n<p><strong><em>Note: Chromosome notation in the Beagle genetic map files is 'chr#' and chromosome 23 is 'chrX'.<\/em><\/strong><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>If you prefer GRCh37\/hg19, the genetic map file is available for downloading at Beagle site:<\/p>\n<p><a href=\"http:\/\/bochet.gcc.biostat.washington.edu\/beagle\/genetic_maps\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/bochet.gcc.biostat.washington.edu\/beagle\/genetic_maps\/<\/a><\/p>\n<ul>\n<li>plink.GRCh37.map.zip<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p><strong>1.3. Imputation reference panel files<br \/><\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>1.3.1 Obtain the reference panel files<\/strong><\/p>\n<p>For increased imputation accuracy we recommend using a population-specific imputation reference panel, if available.<\/p>\n<p>\u00a0<\/p>\n<p>If population-specific reference data is not available, for instance 1000 Genomes Project (<a href=\"https:\/\/www.nature.com\/articles\/nature15393\" target=\"_blank\" rel=\"noopener noreferrer\">www.nature.com\/articles\/nature15393<\/a>) data can be used instead.<\/p>\n<p>\u00a0<\/p>\n<p>GRCh38\/hg38 files are available at EBI 1000 genomes ftp site at <a href=\"ftp:\/\/ftp.1000genomes.ebi.ac.uk\/vol1\/ftp\/release\/20130502\/supporting\/GRCh38_positions\/\" target=\"_blank\" rel=\"noopener noreferrer\">ftp:\/\/ftp.1000genomes.ebi.ac.uk\/vol1\/ftp\/release\/20130502\/supporting\/GRCh38_positions\/<\/a><\/p>\n<p>GRCh37\/hg19 files are available at Beagle site already processed to be compatible with Beagle:<\/p>\n<p><a href=\"http:\/\/bochet.gcc.biostat.washington.edu\/beagle\/1000_Genomes_phase3_v5a\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/bochet.gcc.biostat.washington.edu\/beagle\/1000_Genomes_phase3_v5a\/<\/a><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>The 1000 Genomes Project files can be downloaded for instance with command:<\/p>\n<pre class=\"language-markup\"><code>wget -np ftp:\/\/ftp.1000genomes.ebi.ac.uk\/vol1\/ftp\/release\/20130502\/supporting\/GRCh38_positions\/*<\/code><\/pre>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>Save the phased reference panel VCF files per chromosome as follows (for consistency with the commands in the protocol):<\/p>\n<ul>\n<li>panel_phased_chr#.vcf.gz (where # is chromosome number)<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p><strong>NOTE: The reference panel files should contain non-missing, phased genotypes, chrX as diploid genotypes and all variants as biallelic records!<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>If your reference panel files are not in correct format, see some suggested commands below.<\/p>\n<p>Also Eagle provides guidelines for processing the GRCh38\/hg38 1000 Genomes Project files at:<br \/><a href=\"https:\/\/data.broadinstitute.org\/alkesgroup\/Eagle\/#x1-320005.3.2\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/data.broadinstitute.org\/alkesgroup\/Eagle\/#x1-320005.3.2<\/a><\/p>\n<p>\u00a0<\/p>\n<p><strong>1.3.2 Check for multiallelic sites<\/strong><\/p>\n<p>Our v3.0 imputation workflow can also impute multiallelic sites, i.e. multiple alternative alleles at the same site, but these multiallelic variants MUST be <strong>decomposed<\/strong> (be split and represented as a set of biallelic variants) in the reference panel files.<\/p>\n<p>\u00a0<\/p>\n<p>Confirm that in your reference panel files, multiallelic sites (if present) are decomposed. If they are not, use the example command below to split the multiallelic sites into biallelic records:<\/p>\n<pre class=\"language-markup\"><code>for chr in {1..23}; do\n    bcftools norm -m -any panel_phased_chr${chr}.vcf.gz -Oz -o panel_phased_split_multiallelic_chr${chr}.vcf.gz\ndone<\/code><\/pre>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.3.3 Check the chromosome notation in GRCh38\/hg38 reference panel files<br \/><\/strong><\/p>\n<p>Confirm that the chromosome notation in your reference panel files follows the GRCh38\/hg38 notations as 'chr#' for autosomal, 'chrX' for chromosome 23 and 'chrM' for mitochondrial sites. If not, adapt the example command below according to your files and rename the chromosomes:<\/p>\n<pre class=\"language-markup\"><code># Create a list of all chromosome names in space-delimited format &lt;old_name&gt; &lt;new_name&gt;\n# Example of chr_names.txt file:\n1 chr1\n2 chr2\n...\n23 chrX\nX chrX\nMT chrM\n\nbcftools annotate --rename-chrs chr_names.txt input.vcf.gz -Oz -o output.vcf.gz\n\n<\/code><\/pre>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.3.4 Generate a list of the reference panel sample IDs<\/strong><\/p>\n<p>List of sample IDs present in the reference panel, one line per sample ID, save with filename<\/p>\n<ul>\n<li>panel_sample_IDs.txt<\/li>\n<\/ul>\n<p>The list of sample IDs can be generated from any of the VCF files (here chr22) as in the example below (assuming that all chromosomes contain the same set of samples):<\/p>\n<pre class=\"language-markup\"><code>bcftools query -l panel_phased_chr22.vcf.gz &gt; panel_sample_IDs.txt<\/code><\/pre>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.3.5 Reference panel allele frequencies<\/strong><\/p>\n<p>Generate a tab-delimited file of the reference panel allele frequencies, one variant per line, with columns CHR, SNP (in generated file header replaced with CHR_POS_REF_ALT), REF, ALT, AF (including the header line); note last for loop in following Bash script.<\/p>\n<p>\u00a0<\/p>\n<p>Use the phased reference panel VCF files as input with the example command below and save the file as<\/p>\n<ul>\n<li>panel.frq<\/li>\n<\/ul>\n<pre class=\"language-markup\"><code># Check your reference panel VCF and if it does NOT contain AF in the INFO field, calculate it with +fill-tags plugin \n# Note: it requires environmental variable BCFTOOLS_PLUGINS exported (Step 1.2)\nfor chr in {1..23}; do\n    bcftools +fill-tags panel_phased_chr${chr}.vcf.gz -Oz -o panel_phased_chr${chr}_AF.vcf.gz -- -t AF\ndone\n\n# Generate a tab-delimited header for the allele frequency file\necho -e 'CHR\\tSNP\\tREF\\tALT\\tAF' &gt; panel.frq\n\n# Query the required fields from the VCF file and append to the allele frequency file\nfor chr in {1..23}; do\n    bcftools query -f '%CHROM\\t%CHROM\\_%POS\\_%REF\\_%ALT\\t%REF\\t%ALT\\t%INFO\/AF\\n' panel_phased_chr${chr}.vcf.gz &gt;&gt; panel.frq\ndone<\/code><\/pre>\n<p><strong><em>Note: Chromosome notation in the panel.frq file should follow the GRCh38\/hg38 notations ('chr#' for autosomal chromosomes and 'chrX' for chromosome 23).<\/em><\/strong><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.3.6 Create binary reference panel files<\/strong><\/p>\n<p>The phased reference panel files per chromosome are required in bref format (bref = binary reference. For more information see Beagle documentation at Beagle site:<\/p>\n<p><a href=\"https:\/\/faculty.washington.edu\/browning\/beagle\/bref.16Dec15.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/faculty.washington.edu\/browning\/beagle\/bref.16Dec15.pdf<\/a>.<\/p>\n<p>\u00a0<\/p>\n<p>The required <strong>bref.*.jar<\/strong> is downloaded together with Beagle.<\/p>\n<p>\u00a0<\/p>\n<p>Use the phased reference panel VCFs as inputs for the example command below which saves the output files as:<\/p>\n<ul>\n<li>panel_phased_chr#.bref (where # is chromosome number)<\/li>\n<\/ul>\n<pre class=\"language-markup\"><code># Convert each VCF to bref format\nfor chr in {1..23}; do\n    java -jar bref.08Jun17.d8b.jar panel_phased_chr${chr}.vcf.gz\ndone<\/code><\/pre>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.4. You are ready to start! <\/strong><\/p>\n<p><strong>As the last prepatory step, let's go over the required input data file(s) and also expected final output files!<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>1.4.1 Input file:<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Post-QC chip genotype data in VCFv4.2 format:<\/p>\n<ul>\n<li>&lt;dataset&gt;.vcf.gz<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p><strong><em>Note: Chromosome notation should follow the GRCh38\/hg38 notations (e.g. 'chr#' for autosomal chromosomes, 'chrX', 'chrY' and 'chrM').<\/em><\/strong><\/p>\n<p><strong><em>Note: If the input data was lifted over from an older genome build to version 38, cautious inspection of the data is highly recommended before proceeding with the protocol.<\/em><\/strong><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.4.2 Final output files:<\/strong><\/p>\n<ul>\n<li>&lt;dataset&gt;_imputed_info_chr#.vcf.gz (where # is chromosome number)<\/li>\n<li>&lt;dataset&gt;_postimputation_summary_plots.pdf<\/li>\n<\/ul>\n<p><em>Note: Several intermediate files are created during the protocol. Those files can be used for troubleshooting and deleted once the successful imputation is confirmed.<\/em><\/p>"},"is_project":0},{"component_id":"1106733","previous_id":"1068937","original_id":"0","guid":"BCFF1D060A0C4560AE3A19CA10996732","previous_guid":"AC8B93168FA146639C370195A2D40005","component_type_id":"13","data_id":"18715","data":"","order_id":"2","name":"Comment","data_by_id":"1","type_id":"13","source_data":{"annotation_id":"18715","thread_id":"18715","id":"18715","thread_title":"Comment on step 1 of Genotype imputation workflow v3.0","uri":"comment-on-step-1-of-genotype-imputation-workflow-v301","thread_uri":"comment-on-step-1-of-genotype-imputation-workflow-v301","step_id":"613263","protocol_uri":"genotype-imputation-workflow-v3-0-nmndc5e","protocol_name":"Genotype imputation workflow v3.0","protocol_name_html":"Genotype imputation workflow v3.0","annotation":"<p>Beagle authors have lately added genetic map files for GRCh38\/hg38 as well. <br \/>The file `plink.GRCh38.map.zip` is available for downloading at Beagle site: <br \/><a href=\"http:\/\/bochet.gcc.biostat.washington.edu\/beagle\/genetic_maps\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/bochet.gcc.biostat.washington.edu\/beagle\/genetic_maps\/<\/a><br \/><br \/><\/p>","thread_text":"<p>Beagle authors have lately added genetic map files for GRCh38\/hg38 as well. <br \/>The file `plink.GRCh38.map.zip` is available for downloading at Beagle site: <br \/><a href=\"http:\/\/bochet.gcc.biostat.washington.edu\/beagle\/genetic_maps\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/bochet.gcc.biostat.washington.edu\/beagle\/genetic_maps\/<\/a><br \/><br \/><\/p>","body":"<p>Beagle authors have lately added genetic map files for GRCh38\/hg38 as well. <br \/>The file `plink.GRCh38.map.zip` is available for downloading at Beagle site: <br \/><a href=\"http:\/\/bochet.gcc.biostat.washington.edu\/beagle\/genetic_maps\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/bochet.gcc.biostat.washington.edu\/beagle\/genetic_maps\/<\/a><br \/><br \/><\/p>","is_private":"0","public_protocol":"1","can_edit":0,"can_delete":"0","show_name":"1","created_date":"1526019353","created_on":"1526019353","modified_on":"1526019368","last_updated":"1526019368","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/swii3gw.jpg","full_name":"Marita A. Isokallio","affiliation":"FIMM, University of Helsinki","username":"marita-a-isokallio","email":"priit.palta@gmail.com","pa_useranme":"priit-palta","comments":[]},"is_project":0},{"component_id":"1119608","previous_id":"1106733","original_id":"0","guid":"511D4655C14B43DBB0A3B64149CD84EC","previous_guid":"BCFF1D060A0C4560AE3A19CA10996732","component_type_id":"13","data_id":"18999","data":"","order_id":"3","name":"Comment","data_by_id":"1","type_id":"13","source_data":{"annotation_id":"18999","thread_id":"18999","id":"18999","thread_title":"Comment on step 1 of Genotype imputation workflow v3.0","uri":"comment-on-step-1-of-genotype-imputation-workflow-v302","thread_uri":"comment-on-step-1-of-genotype-imputation-workflow-v302","step_id":"613263","protocol_uri":"genotype-imputation-workflow-v3-0-nmndc5e","protocol_name":"Genotype imputation workflow v3.0","protocol_name_html":"Genotype imputation workflow v3.0","annotation":"<p><strong>CORRECTION <br \/><br \/>Step 1.2.3:<br \/><\/strong>Within the for loop awk command, single quotes should be replaced with double quotes as follows: <br \/>awk -v OFS='\\t' '$2=<strong>\"<\/strong>.<strong>\"<\/strong> {print}' &gt; beagle_chr${chr}_b38.map<br \/><br \/><strong>Alternative to Step 1.2.3<\/strong>: <br \/>Download the genetic map files (plink.GRCh38.map.zip) provided at Beagle site: <br \/><a href=\"http:\/\/bochet.gcc.biostat.washington.edu\/beagle\/genetic_maps\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/bochet.gcc.biostat.washington.edu\/beagle\/genetic_maps\/<\/a><\/p>","thread_text":"<p><strong>CORRECTION <br \/><br \/>Step 1.2.3:<br \/><\/strong>Within the for loop awk command, single quotes should be replaced with double quotes as follows: <br \/>awk -v OFS='\\t' '$2=<strong>\"<\/strong>.<strong>\"<\/strong> {print}' &gt; beagle_chr${chr}_b38.map<br \/><br \/><strong>Alternative to Step 1.2.3<\/strong>: <br \/>Download the genetic map files (plink.GRCh38.map.zip) provided at Beagle site: <br \/><a href=\"http:\/\/bochet.gcc.biostat.washington.edu\/beagle\/genetic_maps\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/bochet.gcc.biostat.washington.edu\/beagle\/genetic_maps\/<\/a><\/p>","body":"<p><strong>CORRECTION <br \/><br \/>Step 1.2.3:<br \/><\/strong>Within the for loop awk command, single quotes should be replaced with double quotes as follows: <br \/>awk -v OFS='\\t' '$2=<strong>\"<\/strong>.<strong>\"<\/strong> {print}' &gt; beagle_chr${chr}_b38.map<br \/><br \/><strong>Alternative to Step 1.2.3<\/strong>: <br \/>Download the genetic map files (plink.GRCh38.map.zip) provided at Beagle site: <br \/><a href=\"http:\/\/bochet.gcc.biostat.washington.edu\/beagle\/genetic_maps\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/bochet.gcc.biostat.washington.edu\/beagle\/genetic_maps\/<\/a><\/p>","is_private":"0","public_protocol":"1","can_edit":0,"can_delete":"0","show_name":"1","created_date":"1527769452","created_on":"1527769452","modified_on":null,"last_updated":null,"profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/swii3gw.jpg","full_name":"Marita A. Isokallio","affiliation":"FIMM, University of Helsinki","username":"marita-a-isokallio","email":"priit.palta@gmail.com","pa_useranme":"priit-palta","comments":[]},"is_project":0}]},{"id":"613268","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"2E8236BF43384230A3AAE1E48C53F4E9","previous_guid":"CDF12464575748DCB9FF92F0DD4357D1","previous_id":"613269","last_modified":"1523965313","components":[{"component_id":"1068948","previous_id":0,"original_id":"0","guid":"3EC9E220F9C047399F241F20BDCBC410","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Chip data validation and VCF formatting","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Chip data validation and VCF formatting"},"is_project":0},{"component_id":"1068947","previous_id":"1068948","original_id":"0","guid":"BBF865CAC18746B5B50D7AE85D99824C","previous_guid":"3EC9E220F9C047399F241F20BDCBC410","component_type_id":"1","data_id":null,"data":"<p><strong>\u00a0<\/strong><\/p>\n<p>Align the variant alleles to human reference genome to correct for any dataset-specific REF\/ALT flips.<br \/><br \/>Ensure that only biallelic sites are kept in the chip data, as 'bcftools norm' may introduce false multiallelic sites.<br \/><br \/>Finally, replace the ID column with a 'SNP ID' in format CHROM_POS_REF_ALT ie. chromosome_position_&lt;reference allele&gt;_&lt;alternative allele&gt;.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_chrfiltered.vcf.gz<\/p>\n<p>\u2022 hg38_v0_Homo_sapiens_assembly38.fasta<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_SNPID.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><em>Note: Confirm the results for example by comparing the input and output file sizes and line counts.<\/em><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p><strong>\u00a0<\/strong><\/p>\n<p>Align the variant alleles to human reference genome to correct for any dataset-specific REF\/ALT flips.<br \/><br \/>Ensure that only biallelic sites are kept in the chip data, as 'bcftools norm' may introduce false multiallelic sites.<br \/><br \/>Finally, replace the ID column with a 'SNP ID' in format CHROM_POS_REF_ALT ie. chromosome_position_&lt;reference allele&gt;_&lt;alternative allele&gt;.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_chrfiltered.vcf.gz<\/p>\n<p>\u2022 hg38_v0_Homo_sapiens_assembly38.fasta<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_SNPID.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><em>Note: Confirm the results for example by comparing the input and output file sizes and line counts.<\/em><\/p>"},"is_project":0},{"component_id":"1068973","previous_id":"1068947","original_id":"0","guid":"D1889331D0854E6FBA664C8EC36F6F0D","previous_guid":"BBF865CAC18746B5B50D7AE85D99824C","component_type_id":"15","data_id":"3599","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Align the alleles to the reference genome\nbcftools norm -f hg38_v0_Homo_sapiens_assembly38.fasta -c ws <dataset>_chrfiltered.vcf.gz -Ou | \\\n# Keep only biallelic records\nbcftools view -m 2 -M 2 -Oz -o <dataset>_refcorrected.vcf.gz\n\n# Replace the ID column with a CHR_POS_REF_ALT 'SNP ID'\nbcftools annotate --set-id '%CHROM\\_%POS\\_%REF\\_%ALT' <dataset>_refcorrected.vcf.gz -Oz -o <dataset>_SNPID.vcf.gz","description":"bcftools norm parameters:\n-f reference genome\n-c what to do when incorrect\/missing REF allele is encountered:\nws warn (w) and set\/fix (s) bad sites\nbcftools view\n-m minimum number of alleles listed in REF and ALT columns\n-M maximum number of alleles listed in REF and ALT columns\n-Ou uncompressed output\n-Oz compressed output\n--threads number of threads to use for output compression\n\nbcftools annotate parameter:\n--set-id set ID column, % indicates a VCF field","os_name":"","os_version":"","can_edit":"0"},"is_project":0}]},{"id":"613269","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"CDF12464575748DCB9FF92F0DD4357D1","previous_guid":"62340646E06A4CEFA8F630EF4528BBC6","previous_id":"613263","last_modified":"1523442383","components":[{"component_id":"1068950","previous_id":0,"original_id":"0","guid":"7954EF488DB7459CAC0AA651718885D0","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Chip data validation and VCF formatting","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Chip data validation and VCF formatting"},"is_project":0},{"component_id":"1068949","previous_id":"1068950","original_id":"0","guid":"9D08651C5516422BAE11859653FC8503","previous_guid":"7954EF488DB7459CAC0AA651718885D0","component_type_id":"1","data_id":null,"data":"<p>Only autosomal and X chromosomes are kept for the imputation.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_chrfiltered.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><em>Note: Confirm the results for example by comparing the input and output file sizes and line counts.<\/em><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Only autosomal and X chromosomes are kept for the imputation.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_chrfiltered.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><em>Note: Confirm the results for example by comparing the input and output file sizes and line counts.<\/em><\/p>"},"is_project":0},{"component_id":"1068974","previous_id":"1068949","original_id":"0","guid":"82828459DC824045A86595D2F3B1300D","previous_guid":"9D08651C5516422BAE11859653FC8503","component_type_id":"15","data_id":"3600","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Generate a comma-separated string of chromosome names to keep\nchrs=$(paste -d ' ' <(echo chr{1..22}) <(echo chrX) | tr ' ' ',')\n\n# Keep only those wanted chromosomes\nbcftools view -t $chrs <dataset>.vcf.gz -Oz -o <dataset>_chrfiltered.vcf.gz","description":"paste parameter:\n-d delimiter\nbcftools view parameters:\n-t targets\n^ exclusion prefix\n-Oz compressed output","os_name":"","os_version":"","can_edit":"0"},"is_project":0}]},{"id":"613270","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"3AFCC744267C4EF4AAE6B5720D305857","previous_guid":"2E8236BF43384230A3AAE1E48C53F4E9","previous_id":"613268","last_modified":"1523965348","components":[{"component_id":"1068952","previous_id":0,"original_id":"0","guid":"65DA7456230F4F978A13BF12B388B72D","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Chip data validation and VCF formatting","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Chip data validation and VCF formatting"},"is_project":0},{"component_id":"1068951","previous_id":"1068952","original_id":"0","guid":"2ED08EF2FB864F77A7A4E79E0F1010FA","previous_guid":"65DA7456230F4F978A13BF12B388B72D","component_type_id":"1","data_id":null,"data":"<p>Ensure that duplicate individuals do not exist in the chip data or between the chip and reference panel as this would compromise the imputation.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_SNPID.vcf.gz<\/p>\n<p>\u2022 panel_sample_IDs.txt<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_noduplicate_samples.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><em>Note: Confirm the results for example by comparing the input and output file sizes and line counts.<\/em><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Ensure that duplicate individuals do not exist in the chip data or between the chip and reference panel as this would compromise the imputation.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_SNPID.vcf.gz<\/p>\n<p>\u2022 panel_sample_IDs.txt<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_noduplicate_samples.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><em>Note: Confirm the results for example by comparing the input and output file sizes and line counts.<\/em><\/p>"},"is_project":0},{"component_id":"1068975","previous_id":"1068951","original_id":"0","guid":"C38332174EC44ABFB460E174D44740A4","previous_guid":"2ED08EF2FB864F77A7A4E79E0F1010FA","component_type_id":"15","data_id":"3601","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Copy the panel sample ID file with a different name to the working directory\ncp \/path\/to\/panel_sample_IDs.txt duplicate_sample_IDs.txt\n\n# Generate a list of sample IDs from the chip data, keep only duplicates and append to the list of reference panel sample IDs\nbcftools query -l <dataset>_SNPID.vcf.gz | uniq -d >> duplicate_sample_IDs.txt\n\n# Remove the listed sample IDs from the chip data VCF\nbcftools view -S ^duplicate_sample_IDs.txt --force-samples <dataset>_SNPID.vcf.gz -Oz -o <dataset>_noduplicate_samples.vcf.gz","description":"bcftools query parameters:\n-l list of sample IDs\nuniq\n-d only print duplicate lines\n\nbcftools view parameters:\n-S file of sample IDs to include\n^ exclusion prefix\n--force-samples only warn about unknown subset of samples\n-Oz compressed output","os_name":"","os_version":"","can_edit":"0"},"is_project":0}]},{"id":"613271","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"2EDFFCCFE2524ECD85EA6E60698AC522","previous_guid":"3AFCC744267C4EF4AAE6B5720D305857","previous_id":"613270","last_modified":"1523965438","components":[{"component_id":"1068954","previous_id":0,"original_id":"0","guid":"9387E01775A64E34910BF6E374A3C12E","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Chip data validation and VCF formatting","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Chip data validation and VCF formatting"},"is_project":0},{"component_id":"1068953","previous_id":"1068954","original_id":"0","guid":"B755871701E54DBEB6937B8851FE2BA6","previous_guid":"9387E01775A64E34910BF6E374A3C12E","component_type_id":"1","data_id":null,"data":"<p>Ensure that there are no duplicate variants (these might appear in some chip genotype datasets).<\/p>\n<p>If duplicate variants are present, they need to be removed before imputation.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_noduplicate_samples.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_duplicate_variants.txt<\/p>\n<p>\u2022 &lt;dataset&gt;_noduplicate_variants.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><em>Note: Confirm the results for example by comparing the input and output file sizes and line counts.<\/em><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Ensure that there are no duplicate variants (these might appear in some chip genotype datasets).<\/p>\n<p>If duplicate variants are present, they need to be removed before imputation.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_noduplicate_samples.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_duplicate_variants.txt<\/p>\n<p>\u2022 &lt;dataset&gt;_noduplicate_variants.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><em>Note: Confirm the results for example by comparing the input and output file sizes and line counts.<\/em><\/p>"},"is_project":0},{"component_id":"1069006","previous_id":"1068953","original_id":"0","guid":"71E2B0F8CA0C4363AD65FB21C1673380","previous_guid":"B755871701E54DBEB6937B8851FE2BA6","component_type_id":"15","data_id":"3602","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Store a list of duplicate positions\nbcftools query -f '%ID\\n' <dataset>_noduplicate_samples.vcf.gz | uniq -d > <dataset>_duplicate_variants.txt\n\n# Check whether the file contains any variants\nif [ -s <dataset>_duplicate_variants.txt ]; then\n   # Then remove the duplicate variants\n   bcftools view -e ID=@<dataset>_duplicate_variants.txt <dataset>_noduplicate_samples.vcf.gz -Oz -o <dataset>_noduplicate_variants.vcf.gz\nelse\n  # If the file is empty i.e. no duplicate variants are present, only rename the file to be compatible with the next step\n  mv <dataset>_noduplicate_samples.vcf.gz <dataset>_noduplicate_variants.vcf.gz\nfi\n","description":"bcftools query parameters:\n-f query fields\n% identicate the field\n\nuniq parameter:\n-d only print duplicate lines\n\nbcftools view parameters:\n-e exclusion with expression\nexpression:\nID=@file IDs included in the file\n-Oz compressed output","os_name":"","os_version":"","can_edit":"0"},"is_project":0}]},{"id":"613272","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"B183B000D2DC44CFB469E0084DBC354C","previous_guid":"2EDFFCCFE2524ECD85EA6E60698AC522","previous_id":"613271","last_modified":"1523949332","components":[{"component_id":"1068956","previous_id":0,"original_id":"0","guid":"89580D8F676044A29660F704875F2868","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Chip data validation and VCF formatting","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Chip data validation and VCF formatting"},"is_project":0},{"component_id":"1068955","previous_id":"1068956","original_id":"0","guid":"6820F80CA16A473B8CC1C069BE1B1838","previous_guid":"89580D8F676044A29660F704875F2868","component_type_id":"1","data_id":null,"data":"<p>Exclude rare variants (redundant step if they are already removed in quality control steps taken before this protocol), and re-calculate the allele frequency to correctly represent the current samples in the dataset.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_noduplicate_variants.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_AF.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><em>Note: Confirm the results for example by comparing the input and output file sizes and line counts.<\/em><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Exclude rare variants (redundant step if they are already removed in quality control steps taken before this protocol), and re-calculate the allele frequency to correctly represent the current samples in the dataset.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_noduplicate_variants.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_AF.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><em>Note: Confirm the results for example by comparing the input and output file sizes and line counts.<\/em><\/p>"},"is_project":0},{"component_id":"1069007","previous_id":"1068955","original_id":"0","guid":"0B9BC2A862B9412CA0E84421051863D2","previous_guid":"6820F80CA16A473B8CC1C069BE1B1838","component_type_id":"15","data_id":"3603","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Remove low allele count variants if they are not already removed\nbcftools view -e 'INFO\/AC<3 | (INFO\/AN-INFO\/AC)<3' <dataset>_noduplicate_variants.vcf.gz -Ou |\\\n# Re-calculate allele frequency\nbcftools +fill-tags  -Oz -o <dataset>_AF.vcf.gz -- -t AF","description":"bcftools view parameters:\n-e exclude based on expression\n-Ou uncompressed output\n\nbcftools plugin syntax and parameters:\n+fill-tags re-calculates\/adds INFO field tags\n-Oz compressed output\n-- separator for plugin-specific parameters\n-t define the tags to be re-calculated\/added\n\nAlternatively, if all INFO field tags are wanted (see BCFtools documentation for complete list), remove the tag parameter:\nbcftools +fill-tags <dataset>_noduplicate_variants.vcf.gz -Oz -o <dataset>_AF.vcf.gz","os_name":"","os_version":"","can_edit":"0"},"is_project":0}]},{"id":"613273","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"3CF77B49D51148168CA9DEE6F9CA880E","previous_guid":"B183B000D2DC44CFB469E0084DBC354C","previous_id":"613272","last_modified":"1523519387","components":[{"component_id":"1068958","previous_id":0,"original_id":"0","guid":"25CAE54911BF4B1681115689EB0868BC","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Chip data validation and VCF formatting","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Chip data validation and VCF formatting"},"is_project":0},{"component_id":"1068957","previous_id":"1068958","original_id":"0","guid":"24EF12D17E1C473EAC1B8448047E9CCB","previous_guid":"25CAE54911BF4B1681115689EB0868BC","component_type_id":"1","data_id":null,"data":"<p>Generate a frequency file for chip data and reference panel allele frequency comparison.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_AF.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_chip.frq<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Generate a frequency file for chip data and reference panel allele frequency comparison.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_AF.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_chip.frq<\/p>"},"is_project":0},{"component_id":"1069008","previous_id":"1068957","original_id":"0","guid":"E70B2C58A16E4B8BBEB1347B74F5D40D","previous_guid":"24EF12D17E1C473EAC1B8448047E9CCB","component_type_id":"15","data_id":"3604","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# First generate a tab-delimited header for the allele frequency file\necho -e 'CHR\\tSNP\\tREF\\tALT\\tAF' > <dataset>_chip.frq\n\n# Query the required fields from the VCF file and append to the allele frequency file\nbcftools query -f '%CHROM\\t%ID\\t%REF\\t%ALT\\t%INFO\/AF\\n' <dataset>_AF.vcf.gz >> <dataset>_chip.frq","description":"echo parameter:\n-e enable interpretation of backslash escapes\n\nbcftools query parameter and syntax:\n-f format, where\n%field refers to a column in VCF file\n\nexpression '%CHROM\\t%ID\\t%REF\\t%ALT\\t%INFO\/AF\\n' generates for each variant line tab-delimited format of:\nCHR, CHR_POS_REF_ALT, REF, ALT, AF ","os_name":"","os_version":"","can_edit":"0"},"is_project":0}]},{"id":"613274","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"133D80AD8F6D467F87052CD55783DAE0","previous_guid":"3CF77B49D51148168CA9DEE6F9CA880E","previous_id":"613273","last_modified":"1525948789","components":[{"component_id":"1068960","previous_id":0,"original_id":"0","guid":"987B2D37F75549A891FE2B084284F142","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Chip data validation and VCF formatting","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Chip data validation and VCF formatting"},"is_project":0},{"component_id":"1068959","previous_id":"1068960","original_id":"0","guid":"89B0DB0433E148BDA523529A705E1ADD","previous_guid":"987B2D37F75549A891FE2B084284F142","component_type_id":"1","data_id":null,"data":"<p>Compare the chip data and reference panel allele frequencies and generate an exclusion list of those variants where AF values differ more than 10 pp.<\/p>\n<p>\u00a0<\/p>\n<p>Download the R script given in 'FILE' link at the end of this step and save it as 'plot_AF.R'.<\/p>\n<p>Set the script as executable for instance with 'chmod +x plot_AF.R' before running it for the first time.<\/p>\n<p>\u00a0<\/p>\n<p>Run the script as indicated in the example command by giving the two frequency files as input arguments.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_chip.frq<\/p>\n<p>\u2022 panel.frq<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt files:<br \/><\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_AFs.jpg<\/p>\n<p>\u2022 &lt;dataset&gt;_AF_hist.jpg<\/p>\n<p>\u2022 &lt;dataset&gt;_exclude.txt<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>!! Inspect the generated plots before proceeding to the next step:<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>See in the expected results section at the end of this step, for examples of plots from a high-quality dataset.<\/p>\n<p>\u00a0<\/p>\n<p><em>\u2022 <\/em>&lt;dataset&gt;_AFs.jpg<\/p>\n<p>Comparison of the chip AF values to the panel AF values. Ideally, it should show a quite tight, uniform diagonal line of increasing slope (from bottom left to top right).<\/p>\n<p>Variants with AF values differing more than 10 pp are marked with red color and included to the exclusion list.<\/p>\n<p>\u00a0<\/p>\n<p><em>\u2022 <\/em>&lt;dataset&gt;_AF_hist.jpg<\/p>\n<p>Distribution of the AF values. Ideally the histogram should be smooth and skewed toward the smallest AFs.<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Compare the chip data and reference panel allele frequencies and generate an exclusion list of those variants where AF values differ more than 10 pp.<\/p>\n<p>\u00a0<\/p>\n<p>Download the R script given in 'FILE' link at the end of this step and save it as 'plot_AF.R'.<\/p>\n<p>Set the script as executable for instance with 'chmod +x plot_AF.R' before running it for the first time.<\/p>\n<p>\u00a0<\/p>\n<p>Run the script as indicated in the example command by giving the two frequency files as input arguments.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_chip.frq<\/p>\n<p>\u2022 panel.frq<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt files:<br \/><\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_AFs.jpg<\/p>\n<p>\u2022 &lt;dataset&gt;_AF_hist.jpg<\/p>\n<p>\u2022 &lt;dataset&gt;_exclude.txt<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>!! Inspect the generated plots before proceeding to the next step:<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>See in the expected results section at the end of this step, for examples of plots from a high-quality dataset.<\/p>\n<p>\u00a0<\/p>\n<p><em>\u2022 <\/em>&lt;dataset&gt;_AFs.jpg<\/p>\n<p>Comparison of the chip AF values to the panel AF values. Ideally, it should show a quite tight, uniform diagonal line of increasing slope (from bottom left to top right).<\/p>\n<p>Variants with AF values differing more than 10 pp are marked with red color and included to the exclusion list.<\/p>\n<p>\u00a0<\/p>\n<p><em>\u2022 <\/em>&lt;dataset&gt;_AF_hist.jpg<\/p>\n<p>Distribution of the AF values. Ideally the histogram should be smooth and skewed toward the smallest AFs.<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"1069009","previous_id":"1068959","original_id":"0","guid":"A20AEB7554834E8C894200813ED4D146","previous_guid":"89B0DB0433E148BDA523529A705E1ADD","component_type_id":"15","data_id":"3605","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Copy and save the given 'plot_AF.R' file and run it with:\nRscript --no-save \/path\/to\/plot_AF.R <dataset>_chip.frq \/path\/to\/panel.frq","description":"","os_name":"","os_version":"","can_edit":"0"},"is_project":0},{"component_id":"1069010","previous_id":"1069009","original_id":"0","guid":"AB18422663B548569AE00302DAFB68C2","previous_guid":"A20AEB7554834E8C894200813ED4D146","component_type_id":"15","data_id":"3606","data":"","order_id":"3","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"#!\/bin\/env Rscript --no-save\n\n# Genotype imputation protocol v3 - pre-imputation allele frequency plots\n# Written by Kalle P\u00e4rn, Marita A. Isokallio, Paavo H\u00e4pp\u00f6l\u00e4, Javier Nunez Fontarnau and Priit Palta\n\n# Required packages\nlibrary(data.table) # For fast fread()\n\n# Input variables\nargs <- commandArgs(TRUE)\nindata <- args[1]\npaneldata <- args[2] \n\n# Read in the frequency files\nchip <- fread(indata, header = T)\npanel <- fread(paneldata, header = T)\n\n# Generate a dataset tag\nindataset <- sub(\"_chip.frq\", \"\", indata)\n\n# Take an intersection of the panel and chip data based on SNP column (in format CHR_POS_REF_ALT)\nisec <- merge(panel, chip, by = \"SNP\")\n\n# Check that AFs is within range of 10 pp in both datasets\naf_ok <- abs(isec$AF.x - isec$AF.y) < 0.1\n\n# Exclude those not within the AF range\nexclude <- !af_ok\n\n# Save the plot as jpg\njpeg(paste(indataset, \"_AFs.jpg\", sep=\"\"))\n# Plot first all and then excludable variants\nplot(isec$AF.x, isec$AF.y, col=1, pch=20, main=\"Chip data AF vs. reference panel AF\", xlab=\"Panel AF\", ylab=\"Chip AF\")\npoints(isec[exclude]$AF.x, isec[exclude]$AF.y, col=2, pch=20)\n# Draw a legend\nlegend(\"topleft\", legend=c(\"Concordant AF\", \"High AF difference\"), col=c(1,2), pch=20, cex=0.9)\ndev.off()\n\n# Save the plot as jpg\njpeg(paste(indataset, \"_AF_hist.jpg\", sep = \"\"))\n# Chip AF histogram for concordant AF variants\nhist(isec[!exclude]$AF.y, breaks=100, main=\"Chip AF for concordant variants\", xlab=\"Chip AF\")\ndev.off()\n\n# Write out the exclusion list\nwrite.table(isec[exclude]$SNP, paste(indataset, \"_exclude.txt\", sep=\"\"), quote=F, row.names=F, col.names=F)","description":"","os_name":"plot_AF.R","os_version":"","can_edit":"0"},"is_project":0},{"component_id":"1072293","previous_id":"1069010","original_id":"0","guid":"702AAAE58C394E9D82DF6A5C13B961CC","previous_guid":"AB18422663B548569AE00302DAFB68C2","component_type_id":"17","data_id":"1482","data":"<p>Examples of &lt;dataset&gt;_AFs.jpg and &lt;dataset&gt;_AF_hist.jpg plots.<\/p>\n<p>\u00a0 <\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/urmi3gw.jpg\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/urki3gw.jpg\" data-ofn=\"example_plots_step8.jpg\" \/><\/p>","order_id":"4","name":"Expected result","data_by_id":"1","type_id":"17","source_data":{"result":"<p>Examples of &lt;dataset&gt;_AFs.jpg and &lt;dataset&gt;_AF_hist.jpg plots.<\/p>\n<p>\u00a0 <\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/urmi3gw.jpg\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/urki3gw.jpg\" data-ofn=\"example_plots_step8.jpg\" \/><\/p>"},"is_project":0},{"component_id":"1105464","previous_id":"1072293","original_id":"0","guid":"A58E43B21D004F97BE55C2FEC8E41A27","previous_guid":"702AAAE58C394E9D82DF6A5C13B961CC","component_type_id":"23","data_id":"21751","data":"","order_id":"5","name":"File","data_by_id":"1","type_id":"23","source_data":{"media_url":"https:\/\/s3.amazonaws.com\/pr-journal\/xhzi3gw.r","original_name":"plot_af.r","file_id":"21751","thumb_id":null,"thumb_url":"https:\/\/s3.amazonaws.com\/pr-journal\/xhzi3gw.r","icon":"https:\/\/www.protocols.io\/img\/extensions\/r.png"},"is_project":0}]},{"id":"613275","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"450D1743A74A42308ED19633B8166861","previous_guid":"133D80AD8F6D467F87052CD55783DAE0","previous_id":"613274","last_modified":"1524464703","components":[{"component_id":"1068962","previous_id":0,"original_id":"0","guid":"C264AB12A15140C4B0CE46ED5D85CE7A","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Chip data validation and VCF formatting","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Chip data validation and VCF formatting"},"is_project":0},{"component_id":"1068961","previous_id":"1068962","original_id":"0","guid":"ADB2A3AB941F4826A71EEDFDAFFC9E1C","previous_guid":"C264AB12A15140C4B0CE46ED5D85CE7A","component_type_id":"1","data_id":null,"data":"<p>Exclude the variants with highly discordant allele frequencies as listed in the previous step.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_exclude.txt\u00a0 (output from step8)<\/p>\n<p>\u2022 &lt;dataset&gt;_AF.vcf.gz \u00a0 \u00a0\u00a0 (output from step 6)<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt files:<br \/><\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_exclude_sorted.txt<\/p>\n<p>\u2022 &lt;dataset&gt;_for_phasing.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><em>Note: Confirm the results for example by comparing the input and output file sizes and line counts.<\/em><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Exclude the variants with highly discordant allele frequencies as listed in the previous step.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_exclude.txt\u00a0 (output from step8)<\/p>\n<p>\u2022 &lt;dataset&gt;_AF.vcf.gz \u00a0 \u00a0\u00a0 (output from step 6)<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt files:<br \/><\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_exclude_sorted.txt<\/p>\n<p>\u2022 &lt;dataset&gt;_for_phasing.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><em>Note: Confirm the results for example by comparing the input and output file sizes and line counts.<\/em><\/p>"},"is_project":0},{"component_id":"1069011","previous_id":"1068961","original_id":"0","guid":"8B0EEA12572F42C88B238F626C2AFE96","previous_guid":"ADB2A3AB941F4826A71EEDFDAFFC9E1C","component_type_id":"15","data_id":"3607","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Sort the exclusion list\nsort -V <dataset>_exclude.txt > <dataset>_exclude_sorted.txt\n\n# Exclude the variants\nbcftools view -e ID=@<dataset>_exclude_sorted.txt <dataset>_AF.vcf.gz -Oz -o <dataset>_for_phasing.vcf.gz","description":"bcftools view parameters:\n-e exclusion \nexpression: \nID=@file IDs in indicated file\n-Oz compressed output","os_name":"","os_version":"","can_edit":"0"},"is_project":0}]},{"id":"613278","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"C0AD9DBA389B48359B1A219E15759104","previous_guid":"450D1743A74A42308ED19633B8166861","previous_id":"613275","last_modified":"1523610614","components":[{"component_id":"1068968","previous_id":0,"original_id":"0","guid":"DDA3D7E8E8E84FBE98B0BFE446D0DEB7","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Chip data pre-phasing","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Chip data pre-phasing"},"is_project":0},{"component_id":"1068967","previous_id":"1068968","original_id":"0","guid":"29F2A391B297466AAC7DEDD150B686AA","previous_guid":"DDA3D7E8E8E84FBE98B0BFE446D0DEB7","component_type_id":"1","data_id":null,"data":"<p>Chip data pre-phasing will speed up the genotype imputation step.<\/p>\n<p>Phase haplotypes for each chromosome separately before imputation.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_for_phasing.vcf.gz<\/p>\n<p>\u2022 eagle_chr#_b38.map (where # is chromosome number)<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt file:<br \/><\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_for_imputation_chr#.vcf.gz (where # is chromosome number)<\/p>\n<p>\u00a0<\/p>\n<p><em>Note: Confirm the results for example by comparing the input and output file sizes and line counts.<\/em><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Chip data pre-phasing will speed up the genotype imputation step.<\/p>\n<p>Phase haplotypes for each chromosome separately before imputation.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_for_phasing.vcf.gz<\/p>\n<p>\u2022 eagle_chr#_b38.map (where # is chromosome number)<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt file:<br \/><\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_for_imputation_chr#.vcf.gz (where # is chromosome number)<\/p>\n<p>\u00a0<\/p>\n<p><em>Note: Confirm the results for example by comparing the input and output file sizes and line counts.<\/em><\/p>"},"is_project":0},{"component_id":"1069014","previous_id":"1068967","original_id":"0","guid":"0AB3BF073ECD4F5581B2AF4FDA34BC08","previous_guid":"29F2A391B297466AAC7DEDD150B686AA","component_type_id":"15","data_id":"3609","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Run phasing for each chromosome\nfor chr in {1..23}; do \n\n    # Chromosome 23 is coded as 'chrX' in Eagle, whereas autosomal chromosomes are chromosome numbers alone\n    if [ \"$chr\" == \"23\" ]; then\n          chrname=chrX\n    else\n          chrname=$chr\n    fi\n\n    # Run phasing for each chromosome separately\n    eagle \\\n           --vcf <dataset>_for_phasing.vcf.gz \\\n           --chrom ${chrname} \\\n           --geneticMapFile eagle_chr${chr}_b38.map \\\n           --numThreads=8 \\\n           --Kpbwt=20000 \\\n           --outPrefix <dataset>_for_imputation_chr${chr} \ndone ","description":"The command here is split on multiple lines for better readability. However, if the command is copied from here, spaces\/tabs may not be correct and cause an error. In case of errors, first try to reformat the command to a single line.\n\neagle parameters:\n--vcf VCF format input containing the genotypes\n--chrom chromosome to analyze\n--geneticMapFile HapMap genetic map provided with eagle download (here, uncompressed and separated per chromosome)\n--numThreads number of threads\n--Kpbwt number of conditioning haplotypes\n--outPrefix prefix for output files","os_name":"","os_version":"","can_edit":"0"},"is_project":0}]},{"id":"613279","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"A323EF3429A5402EAADB881473092FC1","previous_guid":"C0AD9DBA389B48359B1A219E15759104","previous_id":"613278","last_modified":"1523610444","components":[{"component_id":"1068970","previous_id":0,"original_id":"0","guid":"3D7BCF40305B44D585E24B0D9E014360","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Genotype imputation","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Genotype imputation"},"is_project":0},{"component_id":"1068969","previous_id":"1068970","original_id":"0","guid":"4ECB9351C7FC456C894044FCD4F60A65","previous_guid":"3D7BCF40305B44D585E24B0D9E014360","component_type_id":"1","data_id":null,"data":"<p>Run genotype imputation for each chromosome separately.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_for_imputation_chr#.vcf.gz<\/p>\n<p>\u2022 panel_phased_chr#.bref (where # is chromosome number)<\/p>\n<p>\u2022 beagle_chr#_b38.map (where # is chromosome number)<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt file:<br \/><\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_imputed_chr#.vcf.gz (where # is chromosome number)<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Run genotype imputation for each chromosome separately.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_for_imputation_chr#.vcf.gz<\/p>\n<p>\u2022 panel_phased_chr#.bref (where # is chromosome number)<\/p>\n<p>\u2022 beagle_chr#_b38.map (where # is chromosome number)<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt file:<br \/><\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_imputed_chr#.vcf.gz (where # is chromosome number)<\/p>"},"is_project":0},{"component_id":"1069023","previous_id":"1068969","original_id":"0","guid":"132E9DE4762A4B889A5771D030BEAB76","previous_guid":"4ECB9351C7FC456C894044FCD4F60A65","component_type_id":"15","data_id":"3610","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Run imputation for each chromosome\nfor chr in {1..23}; do \n\n    java -Xss5m -Xmx16g -jar beagle.jar \\\n        gt=<dataset>_for_imputation_chr${chr}.vcf.gz \\\n        ref=panel_phased_chr${chr}.bref \\\n        map=beagle_chr${chr}_b38.map \\\n        out=<dataset>_imputed_chr${chr} \\\n        nthreads=16 \\\n        niterations=10 \\\n        ne=20000 \\\n        impute=true \\\n        gprobs=true \\\n        seed=-99999 \ndone","description":"The command here is split on multiple lines for better readability. However, if the command is copied from here, spaces\/tabs may not be correct and cause an error. In case of errors, first try to reformat the command to a single line.\n\nbeagle parameters:\ngt - a VCF file containing the genotypes\nref - a VCF file containing the phased reference genotypes\nmap - PLINK format genetic map on the cM scale\nout -  output file prefix\nnthreads - number of threads\nniterations - number of phasing iterations\nne - effective population size when imputing ungenotyped markers\nimpute - whether markers that are present in the reference panel but absent in your data will be imputed\ngprobs - whether a GP format field (genotype probability) will be included in the output VCF file when imputing ungenotyped markers\nseed - seed for the random number generator","os_name":"","os_version":"","can_edit":"0"},"is_project":0}]},{"id":"613280","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"B4A13FBFDE75499E88469F3247262B8A","previous_guid":"A323EF3429A5402EAADB881473092FC1","previous_id":"613279","last_modified":"1525943428","components":[{"component_id":"1068972","previous_id":0,"original_id":"0","guid":"FA98AB49B8DA4EEF98FE5B10FC3E43AB","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Post-imputation processing and quality assurance","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Post-imputation processing and quality assurance"},"is_project":0},{"component_id":"1068971","previous_id":"1068972","original_id":"0","guid":"D0D2FC06CD6643A9B6C713E6D6873664","previous_guid":"FA98AB49B8DA4EEF98FE5B10FC3E43AB","component_type_id":"1","data_id":null,"data":"<p><strong>Post-imputation processing<br \/><\/strong><\/p>\n<p>Re-calculate\/add INFO field values and compute Impute2-like INFO scores for each variant.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_imputed_chr#.vcf.gz (where # is chromosome number)<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt files:<br \/><\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_imputed_chr#.vcf.gz.tbi (where # is chromosome number)<\/p>\n<p>\u2022 &lt;dataset&gt;_imputed_info_chr#.vcf.gz (where # is chromosome number)<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p><strong>Post-imputation processing<br \/><\/strong><\/p>\n<p>Re-calculate\/add INFO field values and compute Impute2-like INFO scores for each variant.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_imputed_chr#.vcf.gz (where # is chromosome number)<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt files:<br \/><\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_imputed_chr#.vcf.gz.tbi (where # is chromosome number)<\/p>\n<p>\u2022 &lt;dataset&gt;_imputed_info_chr#.vcf.gz (where # is chromosome number)<\/p>"},"is_project":0},{"component_id":"1069027","previous_id":"1068971","original_id":"0","guid":"97EF8723587242739624AF765E8A89E2","previous_guid":"D0D2FC06CD6643A9B6C713E6D6873664","component_type_id":"15","data_id":"3611","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Re-calculate and add INFO field values for each chromosome\nfor chr in {1..23}; do\n\n\t# Create index file\n\tbcftools index -t <dataset>_imputed_chr${chr}.vcf.gz\n\t\n        # Re-calculate allele frequency and compute Impute2-like INFO score\n\tbcftools +fill-tags <dataset>_imputed_chr${chr}.vcf.gz -Ou -- -t AF | \\\n        bcftools +impute-info -Oz -o <dataset>_imputed_info_chr${chr}.vcf.gz\n\ndone","description":"bcftools plugins syntax and parameters: \n+fill-tags re-calculates\/adds INFO field tags (see BCFtools documentation for complete list)\n-- separator for plugin-specific parameters \n-t define the tags to be re-calculated\/added \n\n+impute-info computes Impute2-like INFO score\n\n-Ou uncompressed output\n-Oz compressed output \n\nAlternatively, if all INFO field tags are wanted, remove the plugin-specific parameter: \nbcftools +fill-tags <dataset>_imputed_chr${chr}.vcf.gz -Ou \n","os_name":"","os_version":"","can_edit":"0"},"is_project":0}]},{"id":"613289","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"7325DA4E98924657905DA91DBDFD55FF","previous_guid":"B4A13FBFDE75499E88469F3247262B8A","previous_id":"613280","last_modified":"1525943450","components":[{"component_id":"1069029","previous_id":0,"original_id":"0","guid":"F722A71244834EB6A6B287DA53EE4FA7","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Post-imputation processing and quality assurance","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Post-imputation processing and quality assurance"},"is_project":0},{"component_id":"1069028","previous_id":"1069029","original_id":"0","guid":"AF4D9F2E27224631A77640002DA7E4E2","previous_guid":"F722A71244834EB6A6B287DA53EE4FA7","component_type_id":"1","data_id":null,"data":"<p><strong>Imputation QA<\/strong><\/p>\n<p>Extract allele frequencies (AF) and INFO scores from the imputed VCF file.<\/p>\n<p>\u00a0<\/p>\n<p>Group the variants by their AF into either of the following categories,<\/p>\n<p>1: AF &gt;= 5% or AF &lt;= 95% (common variants)<\/p>\n<p>2: 0.5%\u00a0 &lt;= AF &lt; 5% or 95% &lt; AF &lt;= 99.5% (low-frequency variants)<\/p>\n<p>3: AF &lt; 0.5% or AF &gt; 99.5% (rare variants)<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_imputed_info_chr#.vcf.gz (where # is chromosome number)<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt file:<br \/><\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_chr#_varID_AF_INFO_GROUP.txt (where # is chromosome number)<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p><strong>Imputation QA<\/strong><\/p>\n<p>Extract allele frequencies (AF) and INFO scores from the imputed VCF file.<\/p>\n<p>\u00a0<\/p>\n<p>Group the variants by their AF into either of the following categories,<\/p>\n<p>1: AF &gt;= 5% or AF &lt;= 95% (common variants)<\/p>\n<p>2: 0.5%\u00a0 &lt;= AF &lt; 5% or 95% &lt; AF &lt;= 99.5% (low-frequency variants)<\/p>\n<p>3: AF &lt; 0.5% or AF &gt; 99.5% (rare variants)<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_imputed_info_chr#.vcf.gz (where # is chromosome number)<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt file:<br \/><\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_chr#_varID_AF_INFO_GROUP.txt (where # is chromosome number)<\/p>"},"is_project":0},{"component_id":"1069030","previous_id":"1069028","original_id":"0","guid":"61E83B31552E49068B7C3433D4AE1F10","previous_guid":"AF4D9F2E27224631A77640002DA7E4E2","component_type_id":"15","data_id":"3612","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Generate an allele frequency file for plotting for each chromosome\nfor chr in {1..23}; do\n\n\t# Generate a header for the output file\n\techo -e 'CHR\\tSNP\\tREF\\tALT\\tAF\\tINFO\\tAF_GROUP' > <dataset>_chr${chr}_varID_AF_INFO_GROUP.txt\n\n\t# Query only the required fields and add allele frequency group (1, 2 or 3) as the ast column\n\tbcftools query -f '%CHROM\\t%CHROM\\_%POS\\_%REF\\_%ALT\\t%REF\\t%ALT\\t%INFO\/AF\\t%INFO\/INFO\\t-\\n' <dataset>_imputed_info_chr${chr}.vcf.gz |\\\n\t# $5 refers to AF values, $7 refers to AF group\n\tawk -v OFS=\"\\t\" \\\n\t\t'{if ($5>=0.05 && $5<=0.95) $7=1; \\\n\t\t   else if(($5>=0.005 && $5<0.05) || ($5<=0.995 && $5>0.95)) $7=2; \\\n\t\t   else $7=3} \\\n\t\t{ print $1, $2, $3, $4, $5, $6, $7 }' \\\n\t>> <dataset>_chr${chr}_varID_AF_INFO_GROUP.txt\n\ndone","description":"The command here is split on multiple lines for better readability. However, if the command is copied from here, spaces\/tabs may not be correct and cause an error. In case of errors, first try to reformat the command to a single line.\n\necho parameter:\n-e enable interpretation of backslash escapes \n\nbcftools query parameters:\n-f format, where %field refers to a column in VCF file \nexpression '%CHROM\\t%CHROM\\_%POS\\_%REF\\_%ALT\\_%INFO\/AF\\t%INFO\/INFO\\t-\\n' generates for each variant line tab-delimited format of: \nCHR, CHR_POS_REF_ALT, AF, INFO, -\n\nawk parameter and syntax:\n-v OFS output field separator\nsee if the AF ($5) is within a range and set the group number accordingly to the last column ($7)\nprint all the columns and append to the output file","os_name":"","os_version":"","can_edit":"0"},"is_project":0}]},{"id":"613290","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"82690F9A038E4376ACFFC52CF3C21FE5","previous_guid":"7325DA4E98924657905DA91DBDFD55FF","previous_id":"613289","last_modified":"1525948840","components":[{"component_id":"1069032","previous_id":0,"original_id":"0","guid":"8D7DB0B601B34D88A1F1CFF282C0FE1F","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Post-imputation processing and quality assurance","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Post-imputation processing and quality assurance"},"is_project":0},{"component_id":"1069031","previous_id":"1069032","original_id":"0","guid":"5FCF787E2AAE4814B22864D5EA4D2565","previous_guid":"8D7DB0B601B34D88A1F1CFF282C0FE1F","component_type_id":"1","data_id":null,"data":"<p><strong>Imputation QA<\/strong><\/p>\n<p>Produce multiple plots to illustrate the distribution of Impute2-like INFO scores and allele frequencies of the imputed data, as well as the comparison of allele frequencies between the imputed data and the reference panel.<\/p>\n<p>\u00a0<\/p>\n<p>Download the R script given in 'FILE' link at the end of this step and save it as 'plot_INFO_and_AF_for_imputed_chrs.R'.<\/p>\n<p>Set the script as executable for instance with 'chmod +x plot_INFO_and_AF_for_imputed_chrs.R' before running it for the first time.<\/p>\n<p>\u00a0<\/p>\n<p>Run the script as indicated in the example command by giving the dataset name and panel frequency files as input arguments.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 panel.frq<\/p>\n<p>\u2022 &lt;dataset&gt;_chr#_varID_AF_INFO_GROUP.txt (where # is chromosome number)<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt files:<br \/><\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_chr#_postimputation_summary_plots.png (where # is chromosome number)<\/p>\n<p>\u2022 &lt;dataset&gt;_postimputation_summary_plots.pdf<\/p>\n<p>\u00a0<\/p>\n<p><strong>!! NOTE: If the number of variants in your dataset is very small, modify the 'plot_INFO_and_AF_for_imputed_chrs.R' script on line 30-31 to contain all variants.<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>!! Inspect the plots:<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>See example of the produced plots in expected results section a the end of this step.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Top left:<\/strong><\/p>\n<p>Impute2-like INFO score density for each AF group.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Bottom left:<\/strong><\/p>\n<p>AF distribution of the imputed chip data.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Top right:<\/strong><\/p>\n<p>AF comparison between the panel and imputed chip data.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Bottom right:<\/strong><\/p>\n<p>Absolute AF difference along the chromosome positions between the panel and imputed chip data.<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p><strong>Imputation QA<\/strong><\/p>\n<p>Produce multiple plots to illustrate the distribution of Impute2-like INFO scores and allele frequencies of the imputed data, as well as the comparison of allele frequencies between the imputed data and the reference panel.<\/p>\n<p>\u00a0<\/p>\n<p>Download the R script given in 'FILE' link at the end of this step and save it as 'plot_INFO_and_AF_for_imputed_chrs.R'.<\/p>\n<p>Set the script as executable for instance with 'chmod +x plot_INFO_and_AF_for_imputed_chrs.R' before running it for the first time.<\/p>\n<p>\u00a0<\/p>\n<p>Run the script as indicated in the example command by giving the dataset name and panel frequency files as input arguments.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 panel.frq<\/p>\n<p>\u2022 &lt;dataset&gt;_chr#_varID_AF_INFO_GROUP.txt (where # is chromosome number)<\/p>\n<p>\u00a0<\/p>\n<p><strong>Outpt files:<br \/><\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_chr#_postimputation_summary_plots.png (where # is chromosome number)<\/p>\n<p>\u2022 &lt;dataset&gt;_postimputation_summary_plots.pdf<\/p>\n<p>\u00a0<\/p>\n<p><strong>!! NOTE: If the number of variants in your dataset is very small, modify the 'plot_INFO_and_AF_for_imputed_chrs.R' script on line 30-31 to contain all variants.<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>!! Inspect the plots:<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>See example of the produced plots in expected results section a the end of this step.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Top left:<\/strong><\/p>\n<p>Impute2-like INFO score density for each AF group.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Bottom left:<\/strong><\/p>\n<p>AF distribution of the imputed chip data.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Top right:<\/strong><\/p>\n<p>AF comparison between the panel and imputed chip data.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Bottom right:<\/strong><\/p>\n<p>Absolute AF difference along the chromosome positions between the panel and imputed chip data.<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"1069033","previous_id":"1069031","original_id":"0","guid":"F71EA5360457411A91EB0AB03BBC3611","previous_guid":"5FCF787E2AAE4814B22864D5EA4D2565","component_type_id":"15","data_id":"3613","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Copy and save the given 'plot_INFO_and_AF_for_imputed_chrs.R' file and run it with:\nRscript --no-save \/path\/to\/plot_INFO_and_AF_for_imputed_chrs.R <dataset> \/path\/to\/panel.frq\n\n# Combine the plots per chromosome into a single pdf file\nconvert $(ls <dataset>*postimputation_summary_plots.png | sort -V) <dataset>_postimputation_summary_plots.pdf","description":"","os_name":"","os_version":"","can_edit":"0"},"is_project":0},{"component_id":"1069662","previous_id":"1069033","original_id":"0","guid":"C0FE51078CBA4E10AB3326A138B01ABF","previous_guid":"F71EA5360457411A91EB0AB03BBC3611","component_type_id":"15","data_id":"3618","data":"","order_id":"3","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"#!\/bin\/env Rscript --no-save\n\n# Genotype imputation protocol v3 - post-imputation QA plots\n# Written by Kalle P\u00e4rn, Marita A. Isokallio, Paavo H\u00e4pp\u00f6l\u00e4, Javier Nunez Fontarnau and Priit Palta\n\n# Required packages\nlibrary(data.table) # for fast fread()\nlibrary(sm)  # for density plotting\n\n# Input variables\nargs <- commandArgs(TRUE)\nindataset <- args[1]\npaneldata <- args[2]\n\n# Reference panel frequency file\npanel <- fread(paneldata, header = T)\n\n# Generate plots and save as a png file per chromosome\nfor (chr in 1:23) {\n         print(paste(\"Working on chr \", chr, \" now...\"))\n\n         # Creates the filename as <dataset>_chr#_postimputation_summary_plots.png\n         png(filename = paste(indataset, \"_chr\", chr, \"_postimputation_summary_plots.png\", sep = \"\"), width = 1200, height = 1200, unit = \"px\")\n\n         # Set the plots as two rows and columns\n         par(mfrow = c(2,2))\n         par(cex.axis = 1.6, cex.lab = 1.5, cex.main = 1.6)\n\n         # Read in data for a file <dataset>_chr#_varID_AF_INFO_GROUP.txt\n         imp_vars <- fread(paste(indataset, \"_chr\", chr, \"_varID_AF_INFO_GROUP.txt\", sep = \"\"), header = TRUE)\n\n         # Create random sample for INFO score plot instead of plotting all values\n         rand1 <- sample(1:dim(imp_vars)[1], 100000, replace = FALSE)\n         temp1 <- imp_vars[rand1,]\n\n         # Merge by common variants, SNP column in format CHR_POS_REF_ALT \n         isec <- merge(panel, imp_vars, by=\"SNP\")\n\n         # Plot INFO score distributions\n         sm.density.compare(temp1$INFO, temp1$AF_GROUP, xlab = \"Impute2-like INFO score\", ylab = \"Density\", col = col, lty = rep(1,3), lwd = 3, xlim = c(0,1), cex = 1.4, h = 0.05)\n         title(paste(\"Imputation of chr\", chr, \" variants\", sep = \"\"))\n         legend(\"topleft\", legend = c(\"MAF > 5%\", \"MAF 0.5-5%\", \"MAF < 0.5%\"), lty = c(1, 1, 1), lwd = c(2.5, 2.5, 2.5), col = c(\"red\", \"green3\", \"blue\"))\n\n         # Plot AF of panel vs. imputed variants\n         plot(isec$AF.x, isec$AF.y, col = 1, pch = 20, main = \"Imputed AF vs. reference panel AF\", xlab = \"Reference panel AF\", ylab = \"Imputed AF\", xlim = c(0,1), ylim = c(0,1))\n\n         # Imputed data AF histogram for intersecting variants\n         hist(isec$AF.y, breaks = 200, main = \"AF distribution of imputed variants\", xlab = \"Imputed AF\")\n\n         # Plot absolute AF difference as imputed AF - panel AF\n         isec$POS <- as.numeric(as.character(data.frame(do.call('rbind', strsplit(as.character(isec$SNP),'_',fixed=TRUE)))[,2]))\n         # Order the variants by position\n         sisec <- isec[order(isec$POS),]\n         plot(sisec$POS, sisec$AF.y - sisec$AF.x, main = \"Absolute AF differences along the chromosome\", col = rgb(0,100,0,50, maxColorValue=255), ylim = c(-0.1, 0.1), pch = 16, xlab = \"Chromosome position\", ylab = \"AF difference (imputed - panel)\")\n\n         # Close the png\n         dev.off()\n}","description":"","os_name":"plot_INFO_and_AF_for_imputed_chrs.R","os_version":"","can_edit":"0"},"is_project":0},{"component_id":"1073331","previous_id":"1069662","original_id":"0","guid":"5983B0E9C5A04312AB78E30A9310E07F","previous_guid":"C0FE51078CBA4E10AB3326A138B01ABF","component_type_id":"17","data_id":"1485","data":"<p>Example of chromosome 2 post-imputation summary plots.<\/p>\n<p>\u00a0<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ut3i3gw.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ut3i3gw.png\" data-ofn=\"example_chr2_postimputation_summary_plots.png\" \/><\/p>","order_id":"4","name":"Expected result","data_by_id":"1","type_id":"17","source_data":{"result":"<p>Example of chromosome 2 post-imputation summary plots.<\/p>\n<p>\u00a0<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ut3i3gw.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ut3i3gw.png\" data-ofn=\"example_chr2_postimputation_summary_plots.png\" \/><\/p>"},"is_project":0},{"component_id":"1105465","previous_id":"1073331","original_id":"0","guid":"73BAD20FAC794C3180F77020153C88A3","previous_guid":"5983B0E9C5A04312AB78E30A9310E07F","component_type_id":"23","data_id":"21752","data":"","order_id":"5","name":"File","data_by_id":"1","type_id":"23","source_data":{"media_url":"https:\/\/s3.amazonaws.com\/pr-journal\/xh2i3gw.r","original_name":"plot_info_and_af_for_imputed_chrs.r","file_id":"21752","thumb_id":null,"thumb_url":"https:\/\/s3.amazonaws.com\/pr-journal\/xh2i3gw.r","icon":"https:\/\/www.protocols.io\/img\/extensions\/r.png"},"is_project":0}]}]}