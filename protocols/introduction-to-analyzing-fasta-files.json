{"uri":"introduction-to-analyzing-fasta-files-qbtdsnn","version_id":"0","protocol_name":"Introduction to analyzing FASTA files","protocol_name_html":"Introduction to analyzing FASTA files","is_prepublished":"0","can_edit":"0","parent_id":null,"api_version":"1","is_new_mode":"0","last_modified":"1527370107","type_id":"1","link":null,"fork_id":"","public_fork_note":"","number_of_steps":"9","has_versions":"1","first_published_date":"1527370107","publish_date":"2018-05-26 21:28:27","documents":null,"have_protocol_in_step":"0","is_protocol_in_step":"0","vendor_name":"Contributed by users","vendor_link":"https:\/\/www.protocols.io","vendor_logo":"\/img\/vendors\/1.png","mod_mins":"-27","mod_secs":"25","description":"<p><strong>This is a short tutorial on how to get started analyzing FASTA files via the command line.<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Code is intended for use on an Ubuntu 16.04 LTS OS, but it may work on other Unix or Unix-like systems.<\/p>\n<p>\u00a0<\/p>\n<p>Here we will mainly use standard Unix commands as well as the seqtk tool.\u00a0<\/p>\n<p>Information on seqtk, including information on installation, can be found here:\u00a0https:\/\/github.com\/lh3\/seqtk<\/p>","is_bookmarked":"0","can_reassign":"1","before_start":null,"has_guidelines":"0","materials":[],"warning":null,"version_class":"12371","public":"1","is_owner":"1","is_original_owner":"1","created_on":"1527084726","protocol_affiliation":"Virginia Tech","affiliation":"Virginia Tech","doi":"dx.doi.org\/10.17504\/protocols.io.qbtdsnn","doi_status":"2","changed_fork_steps":null,"profile_url":"FrankAylward-y22344v2x2","protocol_img":"https:\/\/www.protocols.io\/img\/default_protocol.png","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","full_name":"Frank Aylward","created_by":"Frank Aylward","private_link":"F36EF5197D4F2FE0B03EC538EDD7CDAF","original_img":"1","username":"frank-aylward","is_retracted":"0","retraction_reason":null,"plos_id":null,"manuscript_citation":null,"journal_name":null,"is_donations_disabled":"0","is_donations_disabled_by_user":"9","item_record_id":316451,"fork_info":[],"compare_forks":[],"protocols":[],"groups":[],"number_of_shared_runs":[],"ownership_history":[],"keywords":"","transfer_to_user":[],"sub_transfer":false,"is_transfer_pending":false,"number_of_bookmarks":"0","collections":[],"tags":[],"archived":0,"sub_authors":[],"sub_protocols_number":0,"can_edit_shared":0,"shared_runs":[],"is_shared_run":0,"is_shared":1,"banner":null,"contact_badges":[{"badge_id":"4","badge_image":"\/img\/badges\/gold.svg","badge_description":"Gold power author!"}],"number_of_comments":0,"is_locked":0,"is_locked_by":false,"authors":"Frank Aylward","authors_list":[{"name":"Frank Aylward","affiliation":"Virginia Tech","username":"frank-aylward","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png"}],"user":{"profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","username":"frank-aylward","full_name":"Frank Aylward","created_by":"Frank Aylward"},"access":{"can_view":"1","can_remove":"0","can_add":"0","can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":"0","can_move":"1","can_transfer":"1","can_download":"1","is_locked":"0"},"is_contact_suspended":0,"guidelines":null,"status_id":"1","is_research":"0","status_info":"We use this protocol in our group and it is working","steps":[{"id":"631909","is_changed":1,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"7482118314F5489B84F8D7DF998EC3C2","previous_guid":null,"previous_id":"0","last_modified":"1527364448","components":[{"component_id":"1116713","previous_id":0,"original_id":"0","guid":"A692B47A51254E2398E3ACB6361D4C59","previous_guid":null,"component_type_id":"6","data_id":"0","data":"","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":""},"is_project":0},{"component_id":"1116712","previous_id":"1116713","original_id":"0","guid":"5DD774A15BD947AA8333EAC403AB0A05","previous_guid":"A692B47A51254E2398E3ACB6361D4C59","component_type_id":"1","data_id":null,"data":"<p>The first thing we need to do is get some data. For purposes here we'll work with some FASTA files from the genome sequencing project of Yersinia pestis, the causative agent of the plague.\u00a0<\/p>\n<p>A good place to go for genome data is the National Center for Biotechnology Information, or NCBI. Among other things, they post FTP sites with genomic data for many different organisms. Here is the FTP site for the Yersinia pestis straing CO92:\u00a0<\/p>\n<p>ftp:\/\/ftp.ncbi.nlm.nih.gov\/genomes\/all\/GCF\/000\/009\/065\/GCF_000009065.1_ASM906v1<\/p>\n<p>\u00a0<\/p>\n<p>You can also see some more general information at this URL:<\/p>\n<p>https:\/\/www.ncbi.nlm.nih.gov\/genome\/?term=yersinia+pestis<\/p>\n<p>\u00a0<\/p>\n<p>If you copy and paste the first URL into your browser you should see various files with different extensions like .faa.gz or .fna.gz. The .gz here is the gzip extension, which indicates that these files have been compressed using gzip. The other extensions generally give some information about the kind of sequences that are inside. For example, FNA generally stands for 'FASTA nucleic acid' while FAA generally stands for 'FASTA amino acid'.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>The first thing we need to do is get some data. For purposes here we'll work with some FASTA files from the genome sequencing project of Yersinia pestis, the causative agent of the plague.\u00a0<\/p>\n<p>A good place to go for genome data is the National Center for Biotechnology Information, or NCBI. Among other things, they post FTP sites with genomic data for many different organisms. Here is the FTP site for the Yersinia pestis straing CO92:\u00a0<\/p>\n<p>ftp:\/\/ftp.ncbi.nlm.nih.gov\/genomes\/all\/GCF\/000\/009\/065\/GCF_000009065.1_ASM906v1<\/p>\n<p>\u00a0<\/p>\n<p>You can also see some more general information at this URL:<\/p>\n<p>https:\/\/www.ncbi.nlm.nih.gov\/genome\/?term=yersinia+pestis<\/p>\n<p>\u00a0<\/p>\n<p>If you copy and paste the first URL into your browser you should see various files with different extensions like .faa.gz or .fna.gz. The .gz here is the gzip extension, which indicates that these files have been compressed using gzip. The other extensions generally give some information about the kind of sequences that are inside. For example, FNA generally stands for 'FASTA nucleic acid' while FAA generally stands for 'FASTA amino acid'.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>"},"is_project":0}],"available_protocols":["12542"]},{"id":"631910","is_changed":1,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"AAA2FEC858DB49618B578BA15591673D","previous_guid":"7482118314F5489B84F8D7DF998EC3C2","previous_id":"631909","last_modified":"1527364795","components":[{"component_id":"1116715","previous_id":0,"original_id":"0","guid":"35B2AF24C09C4F61988378DB35712204","previous_guid":null,"component_type_id":"6","data_id":"0","data":"","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":""},"is_project":0},{"component_id":"1116714","previous_id":"1116715","original_id":"0","guid":"70659FCA5E73401984504FF62F75A614","previous_guid":"35B2AF24C09C4F61988378DB35712204","component_type_id":"1","data_id":null,"data":"<p>\u00a0<\/p>\n<p>Now before the download anything I usually like to set up a new folder that I can work in. This is because I want to be able to easily see what new files have been created or downloaded through this process, and if I'm working on my Desktop or Downloads folder it is easy to get confused with all of the other files that are there. So let's create a simple directory first and then navigate into it. The commands for this are:<\/p>\n<p>\u00a0<\/p>\n<p><strong>\u00a0mkdir fasta_parsing<\/strong><\/p>\n<p><strong>cd fasta_parsing<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>The first command \"mkdir\" will make the directory, and the second command \"cd\" will allow us to navigate into that directory. If you ever want to see what files are present in the directory, you can use the \"ls\" command. There shouldn't be anything in the directory now, so your commands should lead to something like this:<\/p>\n<p>\u00a0<img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yfyjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yfyjtte.png\" data-ofn=\"Screenshot (9).png\" \/><\/p>\n<p>Not particularly exciting, but at least there are no error messages :)<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>\u00a0<\/p>\n<p>Now before the download anything I usually like to set up a new folder that I can work in. This is because I want to be able to easily see what new files have been created or downloaded through this process, and if I'm working on my Desktop or Downloads folder it is easy to get confused with all of the other files that are there. So let's create a simple directory first and then navigate into it. The commands for this are:<\/p>\n<p>\u00a0<\/p>\n<p><strong>\u00a0mkdir fasta_parsing<\/strong><\/p>\n<p><strong>cd fasta_parsing<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>The first command \"mkdir\" will make the directory, and the second command \"cd\" will allow us to navigate into that directory. If you ever want to see what files are present in the directory, you can use the \"ls\" command. There shouldn't be anything in the directory now, so your commands should lead to something like this:<\/p>\n<p>\u00a0<img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yfyjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yfyjtte.png\" data-ofn=\"Screenshot (9).png\" \/><\/p>\n<p>Not particularly exciting, but at least there are no error messages :)<\/p>"},"is_project":0}],"available_protocols":["12542"]},{"id":"631911","is_changed":1,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"18F4DAD1549E4E1692492D95C34E4F62","previous_guid":"AAA2FEC858DB49618B578BA15591673D","previous_id":"631910","last_modified":"1527365281","components":[{"component_id":"1116717","previous_id":0,"original_id":"0","guid":"4C61DCD8A91B408FB56409191082EB1E","previous_guid":null,"component_type_id":"6","data_id":"0","data":"","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":""},"is_project":0},{"component_id":"1116716","previous_id":"1116717","original_id":"0","guid":"2977B79DB82B4B668BFA2D07F281C50F","previous_guid":"4C61DCD8A91B408FB56409191082EB1E","component_type_id":"1","data_id":null,"data":"<p>Now we can get started with some data that we saw from in first step. For starters let's download the raw nucleic acid genome sequence, which is in the\u00a0GCF_000009065.1_ASM906v1_genomic.fna.gz file. To download this directly from the command line we can use the 'wget' command, which is part of the basic Ubuntu command line and should already be installed. The command below should download the file:<\/p>\n<p>\u00a0<\/p>\n<p><strong>wget -O y_pestis_genome.fna.gz\u00a0ftp:\/\/ftp.ncbi.nlm.nih.gov\/genomes\/all\/GCF\/000\/009\/065\/GCF_000009065.1_ASM906v1\/GCF_000009065.1_ASM906v1_genomic.fna.gz<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>In the command above, the -O flag lets us specify what name we want the downloaded file the have. After that we just have to provide the full URL for the file (this can usually be achieved by right-clicking on the file in the FTP site and then clicking 'copy link address'). The wget command will give us a progress report and log while the download is happening.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>Since this file is compressed, we will want to uncompress it with the 'gunzip' command:<\/p>\n<p><strong>gunzip y_pestis_genome.fna.gz<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>And then we can check what we have in the directory with the 'ls' command. You should see something like this:<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yf4jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yf3jtte.png\" data-ofn=\"Screenshot (11).png\" \/><\/p>\n<p>\u00a0<\/p>\n<p>If you see something like this, then success! We have our very own FASTA file that we can now begin to analyze.\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Now we can get started with some data that we saw from in first step. For starters let's download the raw nucleic acid genome sequence, which is in the\u00a0GCF_000009065.1_ASM906v1_genomic.fna.gz file. To download this directly from the command line we can use the 'wget' command, which is part of the basic Ubuntu command line and should already be installed. The command below should download the file:<\/p>\n<p>\u00a0<\/p>\n<p><strong>wget -O y_pestis_genome.fna.gz\u00a0ftp:\/\/ftp.ncbi.nlm.nih.gov\/genomes\/all\/GCF\/000\/009\/065\/GCF_000009065.1_ASM906v1\/GCF_000009065.1_ASM906v1_genomic.fna.gz<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>In the command above, the -O flag lets us specify what name we want the downloaded file the have. After that we just have to provide the full URL for the file (this can usually be achieved by right-clicking on the file in the FTP site and then clicking 'copy link address'). The wget command will give us a progress report and log while the download is happening.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>Since this file is compressed, we will want to uncompress it with the 'gunzip' command:<\/p>\n<p><strong>gunzip y_pestis_genome.fna.gz<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>And then we can check what we have in the directory with the 'ls' command. You should see something like this:<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yf4jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yf3jtte.png\" data-ofn=\"Screenshot (11).png\" \/><\/p>\n<p>\u00a0<\/p>\n<p>If you see something like this, then success! We have our very own FASTA file that we can now begin to analyze.\u00a0<\/p>"},"is_project":0}],"available_protocols":["12542"]},{"id":"631912","is_changed":1,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"3B9491103EBF4228917B713DE56C00E3","previous_guid":"18F4DAD1549E4E1692492D95C34E4F62","previous_id":"631911","last_modified":"1527366710","components":[{"component_id":"1116719","previous_id":0,"original_id":"0","guid":"165ECBFB6E05409F868E23876BDC7285","previous_guid":null,"component_type_id":"6","data_id":"0","data":"","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":""},"is_project":0},{"component_id":"1116718","previous_id":"1116719","original_id":"0","guid":"2A9D0E3806524EA1851D340CD1C799B0","previous_guid":"165ECBFB6E05409F868E23876BDC7285","component_type_id":"1","data_id":null,"data":"<p>Typically whenever you have a new file that you want to look at, the first few command you want to use are 'head', and 'tail' commands to look at the format of the beginning and end of the file. 'head' and 'tail' return the first and last 10 lines of a file, though we can specify the number of lines we want to see with the '-n' flag. Try something like this:<\/p>\n<p>\u00a0<\/p>\n<p><strong>head -n 20 y_pestis_genome.fna<\/strong><\/p>\n<p>and\u00a0<\/p>\n<p><strong>tail -n 20 y_pestis_genome.fna<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>and you should see something like this:<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yf6jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yf5jtte.png\" data-ofn=\"Screenshot (12).png\" \/><\/p>\n<p>\u00a0<\/p>\n<p>So you essentially see that the file is full of ATGC letters, and that the very beginning has a header line with some descrptive information that starts wtih a '&gt;'. This is the basic format of FASTA files. Generally what comes right after the '&gt;' in the header line should be a non-redundant identifier for the sequence that follows it. Also, there can be multiple sequences in a single file, all of which have a header line that precedes the sequence.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>Now, you may ask, why bother looking at a file in the command line if we can just open it up in our favorite text edtior, like gedit or notepad++? Well, opening up the file in a text editor is perfectly fine, and if your just starting you may wish to do this just to browse, but using the command line has two main advantages: 1) You can quickly check the format and contents of a file, so you don't have to toggle between different programs, which is especially handy if you're working with many different files, and 2) FASTA files can get huge (giga- or terabyte size), and tring to open those files in your text editor will either take a very long time or crash your system.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>If you want to have more open-ended browsing capabilities of a file, you can also try the \"less\" command, which allows you to browse through a file.\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Typically whenever you have a new file that you want to look at, the first few command you want to use are 'head', and 'tail' commands to look at the format of the beginning and end of the file. 'head' and 'tail' return the first and last 10 lines of a file, though we can specify the number of lines we want to see with the '-n' flag. Try something like this:<\/p>\n<p>\u00a0<\/p>\n<p><strong>head -n 20 y_pestis_genome.fna<\/strong><\/p>\n<p>and\u00a0<\/p>\n<p><strong>tail -n 20 y_pestis_genome.fna<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>and you should see something like this:<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yf6jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yf5jtte.png\" data-ofn=\"Screenshot (12).png\" \/><\/p>\n<p>\u00a0<\/p>\n<p>So you essentially see that the file is full of ATGC letters, and that the very beginning has a header line with some descrptive information that starts wtih a '&gt;'. This is the basic format of FASTA files. Generally what comes right after the '&gt;' in the header line should be a non-redundant identifier for the sequence that follows it. Also, there can be multiple sequences in a single file, all of which have a header line that precedes the sequence.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>Now, you may ask, why bother looking at a file in the command line if we can just open it up in our favorite text edtior, like gedit or notepad++? Well, opening up the file in a text editor is perfectly fine, and if your just starting you may wish to do this just to browse, but using the command line has two main advantages: 1) You can quickly check the format and contents of a file, so you don't have to toggle between different programs, which is especially handy if you're working with many different files, and 2) FASTA files can get huge (giga- or terabyte size), and tring to open those files in your text editor will either take a very long time or crash your system.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>If you want to have more open-ended browsing capabilities of a file, you can also try the \"less\" command, which allows you to browse through a file.\u00a0<\/p>"},"is_project":0}],"available_protocols":["12542"]},{"id":"631913","is_changed":1,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"282BD79224744D5B80C77ED9346BA565","previous_guid":"3B9491103EBF4228917B713DE56C00E3","previous_id":"631912","last_modified":"1527367293","components":[{"component_id":"1116721","previous_id":0,"original_id":"0","guid":"EF24BDD5E090484FAF03BFE60D728D76","previous_guid":null,"component_type_id":"6","data_id":"0","data":"","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":""},"is_project":0},{"component_id":"1116720","previous_id":"1116721","original_id":"0","guid":"0C1F8C1A00604FBA99C99160C2881C5F","previous_guid":"EF24BDD5E090484FAF03BFE60D728D76","component_type_id":"1","data_id":null,"data":"<p>Now that we have a general idea of what the FASTA file looks like, we can get some basic statistics about how many distinct sequences are inside.\u00a0<\/p>\n<p>Remember that above I indicated that a single FASTA file can have multiple distinct sequences inside (i.e., multiple chromosomes, plasmids, or whole genomes could be present in a single file, with each unique nucleic acid sequence preceded by its own '&gt;' header line).\u00a0<\/p>\n<p>So how many distinct sequences are in our Y. pestis genome? We can use the 'grep' command for this:<\/p>\n<p>\u00a0<\/p>\n<p><strong>grep '^&gt;' y_pestis_genome.fna<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>and\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>grep -c '^&gt;' y_pestis_genome.fna<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Grep searches through a file and returns all of the lines that have a particular character or pattern. Here we searched for '^&gt;', which tells grep that we want every line that starts with a '&gt;' character (the '^' is code for 'begins with'). Since each FASTA header starts with a '&gt;' character, this should return all of the headers for each unique sequence in the file.\u00a0<\/p>\n<p>In the second command we did the same thing, but with the '-c' flag, which tells grep we don't actually want to see each line that has the query character in it, we just want to know how many total lines that fit our search.\u00a0<\/p>\n<p>The results should look like this:<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yf8jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yf7jtte.png\" data-ofn=\"Screenshot (13).png\" \/><\/p>\n<p>\u00a0<\/p>\n<p>The descriptions in the headers tell us quite a bit about the sequences that are in our file. Each header starts with a unique identifier (NC_#######), followed by description. The first sequence therefore encodes the Yersinia pestis chromosome, and the next three sequences encode for plasmids.\u00a0<\/p>\n<p>Using the '-c' command, we can quickly see that there are 4 total sequences present.\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Now that we have a general idea of what the FASTA file looks like, we can get some basic statistics about how many distinct sequences are inside.\u00a0<\/p>\n<p>Remember that above I indicated that a single FASTA file can have multiple distinct sequences inside (i.e., multiple chromosomes, plasmids, or whole genomes could be present in a single file, with each unique nucleic acid sequence preceded by its own '&gt;' header line).\u00a0<\/p>\n<p>So how many distinct sequences are in our Y. pestis genome? We can use the 'grep' command for this:<\/p>\n<p>\u00a0<\/p>\n<p><strong>grep '^&gt;' y_pestis_genome.fna<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>and\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>grep -c '^&gt;' y_pestis_genome.fna<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Grep searches through a file and returns all of the lines that have a particular character or pattern. Here we searched for '^&gt;', which tells grep that we want every line that starts with a '&gt;' character (the '^' is code for 'begins with'). Since each FASTA header starts with a '&gt;' character, this should return all of the headers for each unique sequence in the file.\u00a0<\/p>\n<p>In the second command we did the same thing, but with the '-c' flag, which tells grep we don't actually want to see each line that has the query character in it, we just want to know how many total lines that fit our search.\u00a0<\/p>\n<p>The results should look like this:<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yf8jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yf7jtte.png\" data-ofn=\"Screenshot (13).png\" \/><\/p>\n<p>\u00a0<\/p>\n<p>The descriptions in the headers tell us quite a bit about the sequences that are in our file. Each header starts with a unique identifier (NC_#######), followed by description. The first sequence therefore encodes the Yersinia pestis chromosome, and the next three sequences encode for plasmids.\u00a0<\/p>\n<p>Using the '-c' command, we can quickly see that there are 4 total sequences present.\u00a0<\/p>"},"is_project":0}],"available_protocols":["12542"]},{"id":"631914","is_changed":1,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"EFA56F0ADC74493D9225FEC5717A74B0","previous_guid":"282BD79224744D5B80C77ED9346BA565","previous_id":"631913","last_modified":"1527367940","components":[{"component_id":"1116722","previous_id":0,"original_id":"0","guid":"0D601789B87E4575BC5C2B8C7FF6EFC4","previous_guid":null,"component_type_id":"1","data_id":null,"data":"<p>This is all good and well for looking at a raw genome file, but what about the other files we saw in step?\u00a0<\/p>\n<p>Let's continue with analyzing the genes encoced in the Y. pestis genome. These will be found in the 'GCF_000009065.1_ASM906v1_cds_from_genomic.fna.gz' file.\u00a0<\/p>\n<p>Note that the file name includes the abbreviation \"CDS\", which means \"coding sequence\" and implies that these are protein-coding genes. So other genes, such as rRNAs or tRNAs, are not going to be found here.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>Let's download and uncompress the data the same as with the genome.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>wget -O y_pestis_genes.fna.gz ftp:\/\/ftp.ncbi.nlm.nih.gov\/genomes\/all\/GCF\/000\/009\/065\/GCF_000009065.1_ASM906v1\/GCF_000009065.1_ASM906v1_cds_from_genomic.fna.gz<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>gunzip y_pestis_genes.fna<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>ls<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>And you should see both the genome and gene files:<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygajtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yf9jtte.png\" data-ofn=\"Screenshot (14).png\" \/><\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>This is all good and well for looking at a raw genome file, but what about the other files we saw in step?\u00a0<\/p>\n<p>Let's continue with analyzing the genes encoced in the Y. pestis genome. These will be found in the 'GCF_000009065.1_ASM906v1_cds_from_genomic.fna.gz' file.\u00a0<\/p>\n<p>Note that the file name includes the abbreviation \"CDS\", which means \"coding sequence\" and implies that these are protein-coding genes. So other genes, such as rRNAs or tRNAs, are not going to be found here.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>Let's download and uncompress the data the same as with the genome.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>wget -O y_pestis_genes.fna.gz ftp:\/\/ftp.ncbi.nlm.nih.gov\/genomes\/all\/GCF\/000\/009\/065\/GCF_000009065.1_ASM906v1\/GCF_000009065.1_ASM906v1_cds_from_genomic.fna.gz<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>gunzip y_pestis_genes.fna<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>ls<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>And you should see both the genome and gene files:<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygajtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yf9jtte.png\" data-ofn=\"Screenshot (14).png\" \/><\/p>"},"is_project":0},{"component_id":"1116723","previous_id":"1116722","original_id":"0","guid":"7A5444741B0640AFA3E00E1A6DEC99C6","previous_guid":"0D601789B87E4575BC5C2B8C7FF6EFC4","component_type_id":"6","data_id":"0","data":"","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":""},"is_project":0}],"available_protocols":["12542"]},{"id":"631915","is_changed":1,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"88FCECCF6CF14E2DB2D52C7EFDF1D6AA","previous_guid":"EFA56F0ADC74493D9225FEC5717A74B0","previous_id":"631914","last_modified":"1527367816","components":[{"component_id":"1116725","previous_id":0,"original_id":"0","guid":"7933D96909B3452D8AC3060A8A01C3F1","previous_guid":null,"component_type_id":"6","data_id":"0","data":"","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":""},"is_project":0},{"component_id":"1116724","previous_id":"1116725","original_id":"0","guid":"CE35A6E5265641A598397818E9FB0276","previous_guid":"7933D96909B3452D8AC3060A8A01C3F1","component_type_id":"1","data_id":null,"data":"<p>Now we can use the same grep commands with the 'genes' file as we used with the 'genome' file, to get an idea of the format and the number of genes encoded in the genome.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>head y_pestis_genes.fna<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygcjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygbjtte.png\" data-ofn=\"Screenshot (15).png\" \/><\/p>\n<p>\u00a0<\/p>\n<p>Note that in the first 10 lines we can already see multiple header lines, since of course genes are much shorter than whole genomes.\u00a0<\/p>\n<p>Also note that the headers for genes have a lot more information. In addition to unique identifiers, they also have information about the function of the gene, the coordinates of the gene in the chromosome\/plasmid, a unique identifier for the protein that is encoded, and other information that NCBI keeps in its databases.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>We can continue to take a look at the file with grep:<\/p>\n<p>\u00a0<\/p>\n<p><strong>grep '^&gt;' y_pestis_genes.fna | head<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>grep -c '^&gt;' y_pestis_genes.fna<\/strong><\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygejtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygdjtte.png\" data-ofn=\"Screenshot (16).png\" \/><\/p>\n<p>\u00a0<\/p>\n<p>Note that above I used a 'pipe' with the first grep command. A pipe takes the output of the first command and feeds it into the command that comes after the '|'. This is handy here since there are many genes in the Y. pestis genome, and all of the text in the command line can be overwhelming. This way we can see the first 10 to get a general idea of the format (still a bit difficult to browse, since the headers are so long, but they give us a general idea).\u00a0<\/p>\n<p>Lastly, with the \"-c\" flag with grep we can see that there are a total of 3,979 protein-coding genes in this genome, including those encoded in the chromosome and plasmids.\u00a0\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Now we can use the same grep commands with the 'genes' file as we used with the 'genome' file, to get an idea of the format and the number of genes encoded in the genome.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>head y_pestis_genes.fna<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygcjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygbjtte.png\" data-ofn=\"Screenshot (15).png\" \/><\/p>\n<p>\u00a0<\/p>\n<p>Note that in the first 10 lines we can already see multiple header lines, since of course genes are much shorter than whole genomes.\u00a0<\/p>\n<p>Also note that the headers for genes have a lot more information. In addition to unique identifiers, they also have information about the function of the gene, the coordinates of the gene in the chromosome\/plasmid, a unique identifier for the protein that is encoded, and other information that NCBI keeps in its databases.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>We can continue to take a look at the file with grep:<\/p>\n<p>\u00a0<\/p>\n<p><strong>grep '^&gt;' y_pestis_genes.fna | head<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>grep -c '^&gt;' y_pestis_genes.fna<\/strong><\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygejtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygdjtte.png\" data-ofn=\"Screenshot (16).png\" \/><\/p>\n<p>\u00a0<\/p>\n<p>Note that above I used a 'pipe' with the first grep command. A pipe takes the output of the first command and feeds it into the command that comes after the '|'. This is handy here since there are many genes in the Y. pestis genome, and all of the text in the command line can be overwhelming. This way we can see the first 10 to get a general idea of the format (still a bit difficult to browse, since the headers are so long, but they give us a general idea).\u00a0<\/p>\n<p>Lastly, with the \"-c\" flag with grep we can see that there are a total of 3,979 protein-coding genes in this genome, including those encoded in the chromosome and plasmids.\u00a0\u00a0<\/p>"},"is_project":0}],"available_protocols":["12542"]},{"id":"631916","is_changed":1,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"68A61590403B42458FCDF736138EE3B7","previous_guid":"88FCECCF6CF14E2DB2D52C7EFDF1D6AA","previous_id":"631915","last_modified":"1527369052","components":[{"component_id":"1116727","previous_id":0,"original_id":"0","guid":"607BF09F05F34436A4919BB34B2B0370","previous_guid":null,"component_type_id":"6","data_id":"0","data":"","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":""},"is_project":0},{"component_id":"1116726","previous_id":"1116727","original_id":"0","guid":"BDF16F947E14418FAFDE532B146D5819","previous_guid":"607BF09F05F34436A4919BB34B2B0370","component_type_id":"1","data_id":null,"data":"<p>Sometimes we want a bit more information than just the format of a FASTA file and the total number of sequences that are inside. For more information we can use the \"seqtk\" tool.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>To install, type:<\/p>\n<p><strong>sudo apt install seqtk<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>You should be prompted to enter in your password, and then you will see some information about how the installation proceeds. For more information about this tool you can look at the github page:\u00a0https:\/\/github.com\/lh3\/seqtk<\/p>\n<p>\u00a0<\/p>\n<p>To see what utilities are availalble in the seqtk tool, just type:<\/p>\n<p><strong>seqtk<\/strong><\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygfjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygfjtte.png\" data-ofn=\"Screenshot (17).png\" \/><\/p>\n<p>\u00a0<\/p>\n<p>You can see that there are many things we can use seqtk for. Here we will only be using the \"comp\" utility, which gives us some general statistics of sequences in a FASTA file.\u00a0\u00a0<\/p>\n<p>To see what this does, try the following command:<\/p>\n<p><strong>seqtk comp y_pestis_genome.fna<\/strong><\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yghjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yggjtte.png\" data-ofn=\"Screenshot (18).png\" \/><\/p>\n<p>Each row here is a unique sequence in the FASTA file, which for the Y. pestis genome would correspond to the chromosome and three plasmids. The columns provide the\u00a0 name<code>, length, #A, #C, #G, #T, #2, #3, #4, #CpG, #tv, #ts, #CpG-ts.\u00a0<\/code><\/p>\n<p><code><\/code><\/p>\n<p><code>There is a lot of information here about the composition of the sequences, but I'm usually only interested in the sequence length, ACGT composition, and possibly the #4 column, which specifies how many N characters were present in the sequence (if a nucleotide is ambiguous, meaning it could not be determined for some reason, it will sometimes be given a letter other than ATGC: see the one-letter codes here: https:\/\/www.bioinformatics.org\/sms\/iupac.html).<\/code><\/p>\n<p><code><\/code><\/p>\n<p><code>So from the above we can see the that the first sequence, which is the chromosome, is much longer than the following three sequences, which are all plasmids (&gt;4 million base-pairs compared to ~70K, ~96K, and 10K). Plasmids are typically much shorter than chromosomes, so this is not surprising.\u00a0\u00a0<\/code><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Sometimes we want a bit more information than just the format of a FASTA file and the total number of sequences that are inside. For more information we can use the \"seqtk\" tool.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>To install, type:<\/p>\n<p><strong>sudo apt install seqtk<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>You should be prompted to enter in your password, and then you will see some information about how the installation proceeds. For more information about this tool you can look at the github page:\u00a0https:\/\/github.com\/lh3\/seqtk<\/p>\n<p>\u00a0<\/p>\n<p>To see what utilities are availalble in the seqtk tool, just type:<\/p>\n<p><strong>seqtk<\/strong><\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygfjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygfjtte.png\" data-ofn=\"Screenshot (17).png\" \/><\/p>\n<p>\u00a0<\/p>\n<p>You can see that there are many things we can use seqtk for. Here we will only be using the \"comp\" utility, which gives us some general statistics of sequences in a FASTA file.\u00a0\u00a0<\/p>\n<p>To see what this does, try the following command:<\/p>\n<p><strong>seqtk comp y_pestis_genome.fna<\/strong><\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yghjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yggjtte.png\" data-ofn=\"Screenshot (18).png\" \/><\/p>\n<p>Each row here is a unique sequence in the FASTA file, which for the Y. pestis genome would correspond to the chromosome and three plasmids. The columns provide the\u00a0 name<code>, length, #A, #C, #G, #T, #2, #3, #4, #CpG, #tv, #ts, #CpG-ts.\u00a0<\/code><\/p>\n<p><code><\/code><\/p>\n<p><code>There is a lot of information here about the composition of the sequences, but I'm usually only interested in the sequence length, ACGT composition, and possibly the #4 column, which specifies how many N characters were present in the sequence (if a nucleotide is ambiguous, meaning it could not be determined for some reason, it will sometimes be given a letter other than ATGC: see the one-letter codes here: https:\/\/www.bioinformatics.org\/sms\/iupac.html).<\/code><\/p>\n<p><code><\/code><\/p>\n<p><code>So from the above we can see the that the first sequence, which is the chromosome, is much longer than the following three sequences, which are all plasmids (&gt;4 million base-pairs compared to ~70K, ~96K, and 10K). Plasmids are typically much shorter than chromosomes, so this is not surprising.\u00a0\u00a0<\/code><\/p>"},"is_project":0}],"available_protocols":["12542"]},{"id":"631917","is_changed":1,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"4E5E3974D08246559EBB5BB679AC5394","previous_guid":"68A61590403B42458FCDF736138EE3B7","previous_id":"631916","last_modified":"1527369929","components":[{"component_id":"1116729","previous_id":0,"original_id":"0","guid":"ECE159B356EA4ED1A9B030A28924C760","previous_guid":null,"component_type_id":"6","data_id":"0","data":"","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":""},"is_project":0},{"component_id":"1116728","previous_id":"1116729","original_id":"0","guid":"A6570B63956248D8A193F04351C6D095","previous_guid":"ECE159B356EA4ED1A9B030A28924C760","component_type_id":"1","data_id":null,"data":"<p>Now let's use 'seqtk comp' on the genes file, once again using a pipe so we don't flood our command line with text:<\/p>\n<p>\u00a0<\/p>\n<p><strong>seqtk comp y_pestis_genes.fna | head<\/strong><\/p>\n<p><strong><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygjjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygijtte.png\" data-ofn=\"Screenshot (19).png\" \/><\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Now let's say we don't want to know what the longest gene in the genome is. For this we can pipe the output of 'seqtk comp' into the 'sort' command:<\/p>\n<p>\u00a0<\/p>\n<p><strong>seqtk comp y_pestis_genes.fna | sort -k 2,2 -rn | head<\/strong><\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygmjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygkjtte.png\" data-ofn=\"Screenshot (20).png\" \/><\/p>\n<p>Just to unpack the syntax of 'sort' a bit, the '-r' flag indicates we wish to perform a reverse sort (descending order), th e '-n' flag indicates we wish to perform a numeric sort (as opposed to alphabetical, which wouldn't make sense here), and the '-k' flag indicates the columns to use for sorting, which in this case is only the 2nd column. The default column delimiter for 'sort' is a tab, which is already the column delimiter used by 'seqtk comp' in its output, so we don't need to change anything there. If columns were separated with something else, we would want to use the '-d' flag (as with all Unix commands, check all of the features of sort by typing 'man sort').\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>So in the output above we have found that\u00a0lcl|NC_003143.1_cds_YP_002346049.1_921 is the longest gene, with a length of 11,118, or a little more than 11 kilobases. Pretty large!\u00a0<\/p>\n<p>Now what if we want to find what this gene encodes for? Since we know that the FASTA header in the genes file has this information, we can use grep to retrieve this information:<\/p>\n<p>\u00a0<\/p>\n<p><strong>grep 'lcl|NC_003143.1_cds_YP_002346049.1_921' y_pestis_genes.fna<\/strong><\/p>\n<p><strong><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygpjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygnjtte.png\" data-ofn=\"Screenshot (21).png\" \/><\/strong><\/p>\n<p>So it appears this very long gene is <em>yapH<\/em>, which encodes for an autotransporter protein. Not super descriptive, but sometimes the functions of genes and their encoded proteins is unclear.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>Now try doing the same, but with the shortest gene in the Y. pestis genome. What is that gene, and what is its predicted function?<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Now let's use 'seqtk comp' on the genes file, once again using a pipe so we don't flood our command line with text:<\/p>\n<p>\u00a0<\/p>\n<p><strong>seqtk comp y_pestis_genes.fna | head<\/strong><\/p>\n<p><strong><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygjjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygijtte.png\" data-ofn=\"Screenshot (19).png\" \/><\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Now let's say we don't want to know what the longest gene in the genome is. For this we can pipe the output of 'seqtk comp' into the 'sort' command:<\/p>\n<p>\u00a0<\/p>\n<p><strong>seqtk comp y_pestis_genes.fna | sort -k 2,2 -rn | head<\/strong><\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygmjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygkjtte.png\" data-ofn=\"Screenshot (20).png\" \/><\/p>\n<p>Just to unpack the syntax of 'sort' a bit, the '-r' flag indicates we wish to perform a reverse sort (descending order), th e '-n' flag indicates we wish to perform a numeric sort (as opposed to alphabetical, which wouldn't make sense here), and the '-k' flag indicates the columns to use for sorting, which in this case is only the 2nd column. The default column delimiter for 'sort' is a tab, which is already the column delimiter used by 'seqtk comp' in its output, so we don't need to change anything there. If columns were separated with something else, we would want to use the '-d' flag (as with all Unix commands, check all of the features of sort by typing 'man sort').\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>So in the output above we have found that\u00a0lcl|NC_003143.1_cds_YP_002346049.1_921 is the longest gene, with a length of 11,118, or a little more than 11 kilobases. Pretty large!\u00a0<\/p>\n<p>Now what if we want to find what this gene encodes for? Since we know that the FASTA header in the genes file has this information, we can use grep to retrieve this information:<\/p>\n<p>\u00a0<\/p>\n<p><strong>grep 'lcl|NC_003143.1_cds_YP_002346049.1_921' y_pestis_genes.fna<\/strong><\/p>\n<p><strong><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygpjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/ygnjtte.png\" data-ofn=\"Screenshot (21).png\" \/><\/strong><\/p>\n<p>So it appears this very long gene is <em>yapH<\/em>, which encodes for an autotransporter protein. Not super descriptive, but sometimes the functions of genes and their encoded proteins is unclear.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>Now try doing the same, but with the shortest gene in the Y. pestis genome. What is that gene, and what is its predicted function?<\/p>"},"is_project":0}],"available_protocols":["12542"]}]}