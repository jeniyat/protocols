{"id":15164,"title":"Select, load, annotate, normalize, and process toxicogenomic raw data from GEO and ArrayExpress","title_html":"Select, load, annotate, normalize, and process toxicogenomic raw data from GEO and ArrayExpress","image":{"source":"https:\/\/www.protocols.io\/img\/default_protocol.png","placeholder":"https:\/\/www.protocols.io\/img\/default_protocol.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.s24eggw","doi_status":2,"uri":"select-load-annotate-normalize-and-process-toxicog-s24eggw","type_id":1,"published_on":1543574818,"version_id":0,"created_on":1535459304,"categories":null,"creator":{"name":"Andreas Sch\u00fcttler","affiliation":null,"username":"andreas-schttler","link":null,"image":{"source":"\/img\/avatars\/014.png","placeholder":"\/img\/avatars\/014.png"},"badges":[{"id":2,"image":{"source":"\/img\/badges\/bronze.svg","placeholder":"\/img\/badges\/bronze.svg"},"name":"Author"}],"research_interests":null},"journal":null,"journal_name":null,"journal_link":null,"public":1,"has_versions":0,"link":null,"number_of_steps":9,"authors":[{"name":"Andreas Sch\u00fcttler","affiliation":"Helmholtz Centre for Environmental Research - UFZ","username":"andreas-schttler","link":null,"image":{"source":"\/img\/avatars\/014.png","placeholder":"\/img\/avatars\/014.png"},"badges":[],"research_interests":null}],"versions":[],"groups":[],"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"forks_count":{"private":0,"public":0},"steps":[{"id":658806,"guid":"E1E59EDA433E410980EFA1C16425F55A","previous_id":null,"previous_guid":null,"modified_on":1535460380,"protocol_id":0,"components":[{"id":1054723,"guid":"A57A73C22BC6413DB9BCE1C5DE934866","order_id":1,"type_id":6,"title":"Section","source":{"title":"Select data from Gene expression databases"}},{"id":1054723,"guid":"E351FFC0285B4FE7AB9D9D8261DD1EE4","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">1. GEO: The first step is to retrieve metadata from Gene Expression Omnibus. This is achieved with the help of the R-package 'GEOmetadb'.<\/div><div class = \"text-block\">From the metadata and from manually curated information, datasets are selected and list for downloading data are created.<\/div><\/div>"}},{"id":1054723,"guid":"DBDD3E7F094342F499B203F6538DC484","order_id":2,"type_id":15,"title":"command","source":{"name":"rm(list = ls())\n\n# load libraries ------------------------------------------------------------------------\nlibrary(\"Biobase\")\nlibrary(\"GEOquery\")\nlibrary(\"GEOmetadb\")\nlibrary(\"RSQLite\")\nlibrary(\"DBI\")\n\n\n# 1. Select data from GEO database -------------------------------------------------------------------\n\n## load GEO metadata as SQLite database --------------------------------------------------\n\nif (!file.exists('.\/data\/GEOmetadb.sqlite')) {\n    GEOmetadb::getSQLiteFile(destdir = \".\/data\/\")\n}\n\n## connect to database\ncon <-\n    RSQLite::dbConnect(RSQLite::SQLite(), \".\/data\/GEOmetadb.sqlite\")\n\n## query Danio rerio datasets\ndrerio_datasets <- DBI::dbGetQuery(\n    con,\n    \"SELECT *\n    FROM gse JOIN gsm JOIN gpl\n    ON gse.gse=gsm.series_id\n    AND gpl.gpl=gsm.gpl\n    WHERE gsm.organism_ch1 like '%Danio%rerio%'\n    AND gse.type='Expression profiling by array'\"\n)\n\nnames_gse <- dbListFields(con, 'gse')\nnames_gsm <- dbListFields(con, 'gsm')\nnames_gpl <- dbListFields(con, 'gpl')\n\ncolnames(drerio_datasets) <-\n    c(paste0(\"gse.\", names_gse),\n      paste0(\"gsm.\", names_gsm),\n      paste0(\"gpl.\", names_gpl))\n\n# extract age information from title, description, source name or characteristics ----------------------------\ndrerio_datasets$agegroup <- NA\n\ndrerio_datasets$agegroup[grepl(pattern = \"embryo|larva|hpf|egg\",\n                               x = drerio_datasets$gse.title,\n                               ignore.case = T)] <- \"embryo\"\n\ndrerio_datasets$agegroup[grepl(pattern = \"embryo|larva|hpf|egg\",\n                               x = drerio_datasets$gsm.title,\n                               ignore.case = T)] <- \"embryo\"\n\ndrerio_datasets$agegroup[grepl(pattern = \"embryo|larva|hpf|egg\",\n                               x = drerio_datasets$gsm.description,\n                               ignore.case = T)] <- \"embryo\"\n\ndrerio_datasets$agegroup[grepl(pattern = \"embryo|larva|hpf|egg\",\n                               x = drerio_datasets$gsm.source_name_ch1,\n                               ignore.case = T)] <- \"embryo\"\n\ndrerio_datasets$agegroup[grepl(pattern = \"embryo|larva|hpf|egg\",\n                               x = drerio_datasets$gsm.characteristics_ch1,\n                               ignore.case = T)] <- \"embryo\"\n\ndrerio_datasets$agegroup[grepl(pattern = \"adult|male\",\n                               x = drerio_datasets$gse.title,\n                               ignore.case = T)] <- \"adult\"\n\ndrerio_datasets$agegroup[grepl(pattern = \"adult|male\",\n                               x = drerio_datasets$gsm.title,\n                               ignore.case = T)] <- \"adult\"\n\ndrerio_datasets$agegroup[grepl(pattern = \"adult|male\",\n                               x = drerio_datasets$gsm.description,\n                               ignore.case = T)] <- \"adult\"\n\ndrerio_datasets$agegroup[grepl(pattern = \"adult|male\",\n                               x = drerio_datasets$gsm.source_name_ch1,\n                               ignore.case = T)] <- \"adult\"\n\ndrerio_datasets$agegroup[grepl(pattern = \"adult|male\",\n                               x = drerio_datasets$gsm.characteristics_ch1,\n                               ignore.case = T)] <- \"adult\"\n\n# manually annotate some missing studies ---------------------------------------------\ndrerio_datasets$agegroup[drerio_datasets$gse.gse %in% c(\n    \"GSE11893\",\n    \"GSE22634\",\n    \"GSE27067\",\n    \"GSE42084\",\n    \"GSE61155\",\n    \"GSE50718\",\n    \"GSE69444\",\n    \"GSE75245\",\n    \"GSE84906\",\n    \"GSE77148\"\n)] <- \"embryo\"\n\ndrerio_datasets$agegroup[drerio_datasets$gse.gse %in% c(\n    \"GSE3048\",\n    \"GSE12140\",\n    \"GSE18861\",\n    \"GSE19908\",\n    \"GSE27707\",\n    \"GSE34716\",\n    \"GSE43675\",\n    \"GSE47039\",\n    \"GSE48427\",\n    \"GSE49915\",\n    \"GSE67600\",\n    \"GSE66362\",\n    \"GSE71270\",\n    \"GSE51434\",\n    \"GSE58205\",\n    \"GSE62541\",\n    \"GSE93367\",\n    \"GSE110340\"\n)] <- \"adult\"\n\n\ndrerio_datasets$agegroup[drerio_datasets$gse.gse == \"GSE53086\"] <-\n    \"cell_line\"\n\n# retreive manual table listing chemical treatments -------------------------------------\nchem_data <-\n    read.table(\n        \".\/data\/MetaData_curated\/gse_chem.csv\",\n        header = T,\n        sep = \"\\t\",\n        quote = \"\"\n    )\n\ndrerio_datasets$chemical_treatment <-\n    chem_data$chemical_treatment[match(drerio_datasets$gse.gse, chem_data$gse)]\n\n# select embryo datasets with chemical treatment ----------------------------------------\nzfe_tox_geo <-\n    unique(drerio_datasets[(drerio_datasets$agegroup == \"embryo\") &\n                               (drerio_datasets$chemical_treatment == TRUE), ], MARGIN = 1)\n\n# remove amputation experiments -----------------------------------------------\nzfe_tox_geo <-\n    zfe_tox_geo[!grepl(\"amputation\", zfe_tox_geo$gse.title), ]\n\n# remove arrays from custom array manufacturer --------------------------------\nzfe_tox_geo <-\n    zfe_tox_geo[zfe_tox_geo$gpl.distribution != \"non-commercial\" &\n                    zfe_tox_geo$gpl.manufacturer != \"MWG\" &\n                    zfe_tox_geo$gpl.manufacturer != \"NimbleGen\", ]\n\n# save dataset ---------------------------------------------------------------\nsave(zfe_tox_geo, file = \".\/data\/zfe_tox_geo.Rd\")\n\n# write ftp_download_list for array data ---------------------------------------------\nftp_download_list_geo <-\n    paste0(\n        \"ftp:\/\/ftp.ncbi.nlm.nih.gov\/geo\/series\/\",\n        gsub('.{3}$', 'nnn', unique(zfe_tox_geo$gse.gse)),\n        \"\/\",\n        unique(zfe_tox_geo$gse.gse),\n        \"\/suppl\/\",\n        unique(zfe_tox_geo$gse.gse),\n        \"_RAW.tar\"\n    )\n\n# write table\nwrite.table(\n    x = ftp_download_list_geo,\n    file = \".\/data\/download_lists\/ftp_download_list_geo.txt\",\n    quote = F,\n    row.names = F,\n    col.names = F\n)\n\n\n# save list of Platform IDs (add GPL7244 which is alternative to GPL2878) ------\n\nplatformfiles_geo <-\n    data.frame(gpl_id = as.character(unique(c(\n        zfe_tox_geo$gsm.gpl, \"GPL7244\"\n    ))))\n\nplatformfiles_geo$annotation_data <-\n    paste0(\".\/data\/PlatformData\/soft\/\",\n           platformfiles_geo$gpl_id,\n           \"_family.soft\")\n\nsave(platformfiles_geo, file = \".\/data\/platformfiles_geo.Rd\")\n\nftp_download_list_platforms_geo <-\n    paste0(\n        \"ftp:\/\/ftp.ncbi.nlm.nih.gov\/geo\/platforms\/\",\n        gsub('.{3}$', 'nnn', platformfiles_geo$gpl_id),\n        \"\/\",\n        platformfiles_geo$gpl_id,\n        \"\/soft\/*\"\n    )\n\nwrite.table(\n    x = ftp_download_list_platforms_geo,\n    file = \".\/data\/download_lists\/ftp_download_list_platforms_geo.txt\",\n    quote = F,\n    row.names = F,\n    col.names = F\n)\n","command":"","os_name":"R","os_version":""}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":658807,"guid":"B304F47F2D5646EE857B13D5B4223ABD","previous_id":658806,"previous_guid":"E1E59EDA433E410980EFA1C16425F55A","modified_on":1535461220,"protocol_id":0,"components":[{"id":1054723,"guid":"BF46130F7CAB4C8CAF65DF4DD3272906","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054723,"guid":"049378FD843442839FAD4DD485E1CC1B","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">2. ArrayExpress: The same as for GEO is done for ArrayExpress.<\/div><\/div>"}},{"id":1054723,"guid":"A3E46D5BBD674E63B98CF5F6D85F156D","order_id":2,"type_id":15,"title":"command","source":{"name":"rm(list = ls())\n\n# load libraries ------------------------------------------------------------------------\nlibrary(\"ArrayExpress\")\nlibrary(\"plyr\")\n\n# Select data from ArrayExpress database --------------------------------------------------------\nsets <- ArrayExpress::queryAE(species = \"danio+rerio\")\nsets <-\n    sets[!grepl(\"GEOD\", sets$ID), ] # remove all sets also present on GEO\nchemIDs <- as.character(sets$ID[grepl(\"COMPOUND\",\n                                      as.character(sets$ExperimentFactors),\n                                      ignore.case = T) &\n                                    !grepl(\n                                        \"morpholino|morphilino|male|month|cell-line\",\n                                        as.character(sets$ExperimentFactors),\n                                        ignore.case = T\n                                    )])\n\n# manually remove studies from set ------------------------------------------------------\ndeselect <- c(\n    \"E-TABM-547\",\n    # adult\n    \"E-MEXP-2948\",\n    # microinjection\n    \"E-MEXP-1301\",\n    # adult\n    \"E-MEXP-818\",\n    # microinjection\/animal caps\n    \"E-TABM-105\",\n    # adult\n    \"E-MEXP-736\",\n    # cell line\n    \"E-MTAB-43\" # no raw-data available, no danio rerio\n)\n\nchemIDs <- chemIDs[!chemIDs %in% deselect]\n\nsets <- sets[sets$ID %in% chemIDs, ]\n\n# retrieve metadata-frames ----------------------------------------------------\n\nmeta_data_all <- list()\nfor (id in chemIDs) {\n    meta_data_all[[id]] <-\n        read.table(\n            file = paste0(\n                \"https:\/\/www.ebi.ac.uk\/arrayexpress\/files\/\",\n                id,\n                \"\/\",\n                id,\n                \".sdrf.txt\"\n            ),\n            header = T,\n            sep = \"\\t\",\n            quote = \"\"\n        )\n}\n\nzfe_tox_ae <- do.call(\"rbind.fill\", meta_data_all)\n\n# remove studies from metadataset ----------------------------------------------\nzfe_tox_ae <-\n    zfe_tox_ae[!grepl(\"male\", zfe_tox_ae$Characteristics.sex., ignore.case = T) &\n                   !grepl(\"adult\",\n                          zfe_tox_ae$Characteristics.developmental.stage.,\n                          ignore.case = T) &\n                   !grepl(\n                       \"heart|liver|extracardiac body tissue\",\n                       zfe_tox_ae$Characteristics..OrganismPart.,\n                       ignore.case = T\n                   ) &\n                   !grepl(\"sequencing\", zfe_tox_ae$Technology.Type, ignore.case = T)\n               ,]\n\n# save metadataset ------------------------------------------------------------\nsave(zfe_tox_ae, file = \".\/data\/zfe_tox_ae.Rd\")\n\n# write ftp download list -----------------------------------------------------\nftp_download_list_ae <-\n    as.character(unique(zfe_tox_ae$Comment..ArrayExpress.FTP.file.))\n\nwrite.table(\n    x = ftp_download_list_ae,\n    file = \".\/data\/download_lists\/ftp_download_list_ae.txt\",\n    quote = F,\n    row.names = F,\n    col.names = F\n)\n\n# save list of Platform IDs\nplatformfiles_ae <-\n    data.frame(gpl_id =  as.character(unique(zfe_tox_ae$Array.Design.REF)))\n\nplatformfiles_ae$annotation_data <-\n    paste0(\".\/data\/PlatformData\/soft\/\",\n           platformfiles_ae$gpl_id,\n           \".adf.txt\")\n\nsave(platformfiles_ae, file = \".\/data\/platformfiles_ae.Rd\")\n\nftp_download_list_platforms_ae <-\n    platformfiles_ae$gpl_id[!grepl(\"AFFY\", platformfiles_ae$gpl_id)]\n\nftp_download_list_platforms_ae <-\n    ftp_download_list_platforms_ae[!ftp_download_list_platforms_ae %in% c(#Affymetrix\n        \"A-GEOD-16933\",\n        # = GPL18967\n        \"A-GEOD-18967\")]\n\nftp_download_list_platforms_ae <-\n    paste0(\n        \"https:\/\/www.ebi.ac.uk\/arrayexpress\/files\/\",\n        as.character(ftp_download_list_platforms_ae),\n        \"\/\",\n        as.character(ftp_download_list_platforms_ae),\n        \".adf.txt\"\n    )\n\nwrite.table(\n    x = ftp_download_list_platforms_ae,\n    file = \".\/data\/download_lists\/ftp_download_list_platforms_ae.txt\",\n    quote = F,\n    row.names = F,\n    col.names = F\n)\n","command":"","os_name":"R","os_version":""}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":658812,"guid":"586D5B7EC09E4E3E9EC2A59770432717","previous_id":658807,"previous_guid":"B304F47F2D5646EE857B13D5B4223ABD","modified_on":1535462153,"protocol_id":0,"components":[{"id":1054723,"guid":"B639724D1D26434CA9C173A66D4E274A","order_id":1,"type_id":6,"title":"Section","source":{"title":"Download Array and Platform data"}},{"id":1054723,"guid":"1C1B983A465C400D8F9DEEFF778776E0","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Next step is to download the array and platform data selected in step 1.<\/div><div class = \"text-block\">We create a \"data\" directory where all data is downloaded to.<\/div><\/div>"}},{"id":1054723,"guid":"3072684A4AA240F78C0F395C301B4601","order_id":2,"type_id":15,"title":"command","source":{"name":"#!\/bin\/bash\n\n\n# download GEO data\ncat .\/data\/download_lists\/ftp_download_list_geo.txt | parallel --gnu \"wget {} -P data\/ArrayData\/\"\n\ncd .\/data\/ArrayData\/\n\nfor f in *.tar; do \n  d=`basename $f .tar`\n  mkdir $d\n  (cd $d && tar xf ..\/$f)\ndone\n# (snippet from https:\/\/lonelycoding.com\/how-can-you-untar-more-than-one-file-at-a-time\/)\n\nfind . -name \"*.gz\" | while read filename; do gzip -d \"`dirname \"$filename\"`\" \"$filename\"; done;\n\ncd ..\/..\/\n\nrm .\/data\/ArrayData\/*.tar\n\n# download ArrayExpress Datasets\n\ncat .\/data\/download_lists\/ftp_download_list_ae.txt | parallel --gnu \"wget {} -P data\/ArrayData\/\"\n\ncd .\/data\/ArrayData\/\n\nfor f in *.zip; do \nunzip \"$f\" -d \"${f%*[[:punct:]]*[[:punct:]]*}\"; \ndone\n\ncd ..\/..\/\n\nrm .\/data\/ArrayData\/*.zip\n\n\n# download GEO Platform-Files\n\ncat .\/data\/download_lists\/ftp_download_list_platforms_geo.txt | parallel --gnu \"wget {} -P data\/PlatformData\/soft\/\"\n\ncd .\/data\/PlatformData\/soft\/\n\ngunzip *.gz\n\n\ncd ..\/..\/..\/\n\n# download ArrayExpress Platform-Files\ncat .\/data\/download_lists\/ftp_download_list_platforms_ae.txt | parallel --gnu \"wget {} -P data\/PlatformData\/soft\/\"\n\n\n# download sequence information for Affy Arrays (need to be logged in)\nwget http:\/\/www.affymetrix.com\/Auth\/analysis\/downloads\/lf\/wt\/ZebGene-1_1-st-v1\/ZebGene-1_1-st-v1.zv9.probe.fa.zip -P data\/PlatformData\/fasta\/\nwget http:\/\/www.affymetrix.com\/Auth\/analysis\/downloads\/data\/Zebrafish.probe_fasta.zip -P data\/PlatformData\/fasta\/\n\n\n\n# get 2bit file of latest Danio rerio genome assembly\nwget \"http:\/\/hgdownload-test.cse.ucsc.edu\/goldenPath\/currentGenomes\/Danio_rerio\/bigZips\/danRer11.2bit\" -P data\/genomedata\/\n\n# get fasta file of cDNA from ensemble\nwget \"ftp:\/\/ftp.ensembl.org\/pub\/release-93\/fasta\/danio_rerio\/cdna\/Danio_rerio.GRCz11.cdna.all.fa.gz\" -P data\/genomedata\/\n\n# get fasta file of ncRNA from ensemble\nwget \"ftp:\/\/ftp.ensembl.org\/pub\/release-93\/fasta\/danio_rerio\/ncrna\/Danio_rerio.GRCz11.ncrna.fa.gz\" -P data\/genomedata\/\n\n","command":"","os_name":"Bash","os_version":""}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":658813,"guid":"1BB96B85CCD74D8799062C5F832968C6","previous_id":658812,"previous_guid":"586D5B7EC09E4E3E9EC2A59770432717","modified_on":1535461712,"protocol_id":0,"components":[{"id":1054723,"guid":"19283E79E783499EB2486F82C0C17FF4","order_id":1,"type_id":6,"title":"Section","source":{"title":"Probe mapping"}},{"id":1054723,"guid":"C03DB74E97F644FC94BD52DFEBC49629","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Since microarrays are designed for different genome version, it is necessary to re-map the probes to the recent genome version (here dRer11).<\/div><div class = \"text-block\">For probe mapping, as a first step, fasta-files have to be created from the downloaded platform-files from GEO and ArrayExpress.<\/div><\/div>"}},{"id":1054723,"guid":"AEE960E33B184A2CB087C301D2876457","order_id":2,"type_id":15,"title":"command","source":{"name":"rm(list = ls())\n\n# load platform information geo--------------------------------------------------------------\nload(\".\/data\/platformfiles_geo.Rd\")\nplatform_info_geo <-\n    read.csv(\n        file = \".\/data\/MetaData_curated\/platform_info_geo.csv\",\n        header = T,\n        fill = T,\n        sep = \"\\t\",\n        as.is = T\n    )\n\nlapply(platformfiles_geo$gpl_id, function(gpl_id) {\n    if (platform_info_geo$platform_type[platform_info_geo$gpl_id == gpl_id] == \"yes\") {\n        \n        \n        # determine start and end of platform table in .soft file\n        start_end_read <-\n            grep(\n                \"!platform_table_begin|!platform_table_end\",\n                readLines(platformfiles_geo$annotation_data[platformfiles_geo$gpl_id ==\n                                                                gpl_id])\n            )\n        \n        # read platform annotation (soft) file downloaded from GEO\n        platform_annotation <-\n            read.table(\n                platformfiles_geo$annotation_data[platformfiles_geo$gpl_id == gpl_id],\n                skip = start_end_read[1],\n                nrow = start_end_read[2] - start_end_read[1],\n                header = T,\n                sep = \"\\t\",\n                fill = T,\n                quote = \"\",\n                comment.char = \"\"\n            )\n        \n        # extract ProbeIDs and Sequences\n        ProbeIDs <-\n            as.character(platform_annotation[, platform_info_geo$ID_Column_Nr[platform_info_geo$gpl_id ==\n                                                                              gpl_id]])\n        Sequence <-\n            as.character(platform_annotation[, platform_info_geo$Sequence_Column_Number[platform_info_geo$gpl_id ==\n                                                                                        gpl_id]])\n        \n        # if ProbeType given, delete Control Probes for mapping\n        if (!is.na(platform_info_geo$Type_Column_Name[platform_info_geo$gpl_id ==\n                                                  gpl_id])) {\n            ProbeType <-\n                as.character(platform_annotation[, platform_info_geo$Type_Column_Number[platform_info_geo$gpl_id ==\n                                                                                        gpl_id]])\n            ProbeIDs <- ProbeIDs[ProbeType == platform_info_geo$Type_Entry_ExperimentalProbes[platform_info_geo$gpl_id ==\n                                                                                                  gpl_id]]\n            Sequence <- Sequence[ProbeType == platform_info_geo$Type_Entry_ExperimentalProbes[platform_info_geo$gpl_id ==\n                                                                                                  gpl_id]]\n        }\n        \n        platform_sequence_data <-\n            data.frame(ProbeIDs = ProbeIDs, Sequence = Sequence)\n        \n        # write table with only ProbeID and Sequence\n        write.table(\n            platform_sequence_data,\n            file = paste0(\".\/data\/PlatformData\/soft\/\", gpl_id, \"_columns.txt\"),\n            quote = F,\n            sep = \"\\t\",\n            row.names = F,\n            col.names = F\n        )\n        \n        # use gawk to write fasta file\n        system(paste(\n            \"gawk '{print \\\">\\\"$1\\\"\\\\n\\\"$2}'\",\n            paste0(\".\/data\/PlatformData\/soft\/\", gpl_id, \"_columns.txt\"),\n            \">\",\n            paste0(\".\/data\/PlatformData\/fasta\/\", gpl_id, \".fa\")\n        ))\n        \n    }\n})\n\n\n# Platform information Array Express\nload(\".\/data\/platformfiles_ae.Rd\")\nplatform_info_ae <-\n    read.csv(\n        file = \".\/data\/MetaData_curated\/platform_info_ae.csv\",\n        header = T,\n        fill = T,\n        sep = \"\\t\"\n    )\n\nlapply(platformfiles_ae$gpl_id, function(gpl_id) {\n    if (platform_info_ae$platform_type[platform_info_ae$gpl_id == gpl_id] == \"yes\") {\n\n\n    platform_annotation <-\n        read.table(\n            platformfiles_ae$annotation_data[platformfiles_ae$gpl_id == gpl_id],\n            skip =  grep(\n                \"[main]\",\n                readLines(platformfiles_ae$annotation_data[platformfiles_ae$gpl_id == gpl_id]), fixed=T),\n            header = T,\n            sep = \"\\t\",\n            fill = T,\n            quote = \"\",\n            comment.char = \"\"\n        )\n\n# extract ProbeIDs and Sequences\nProbeIDs <-\n    as.character(platform_annotation[, platform_info_ae$ID_Column_Nr[platform_info_ae$gpl_id ==\n                                                                      gpl_id]])\nSequence <-\n    as.character(platform_annotation[, platform_info_ae$Sequence_Column_Number[platform_info_ae$gpl_id ==\n                                                                                gpl_id]])\n\n# if ProbeType given, delete Control Probes for mapping\nif (!is.na(platform_info_ae$Type_Column_Name[platform_info_ae$gpl_id ==\n                                          gpl_id])) {\n    ProbeType <-\n        as.character(platform_annotation[, platform_info_ae$Type_Column_Number[platform_info_ae$gpl_id ==\n                                                                                gpl_id]])\n    ProbeIDs <- ProbeIDs[ProbeType == \"\"]\n    Sequence <- Sequence[ProbeType == \"\"]\n}\n\nplatform_sequence_data <-\n    data.frame(ProbeIDs = ProbeIDs, Sequence = Sequence)\n\n# write table with only ProbeID and Sequence\nwrite.table(\n    platform_sequence_data,\n    file = paste0(\".\/data\/PlatformData\/soft\/\", gpl_id, \"_columns.txt\"),\n    quote = F,\n    sep = \"\\t\",\n    row.names = F,\n    col.names = F\n)\n\n# use gawk to write fasta file\nsystem(paste(\n    \"gawk '{print \\\">\\\"$1\\\"\\\\n\\\"$2}'\",\n    paste0(\".\/data\/PlatformData\/soft\/\", gpl_id, \"_columns.txt\"),\n    \">\",\n    paste0(\".\/data\/PlatformData\/fasta\/\", gpl_id, \".fa\")\n))\n    }\n}\n)\n\n\n","command":"","os_name":"R","os_version":""}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":658814,"guid":"E66358602B774155A4DA876BCE1BC113","previous_id":658813,"previous_guid":"1BB96B85CCD74D8799062C5F832968C6","modified_on":1535461921,"protocol_id":0,"components":[{"id":1054723,"guid":"6BB03252FDFA4852B6A87EDB52161C6A","order_id":1,"type_id":6,"title":"Section","source":{"title":"Probe mapping"}},{"id":1054723,"guid":"1B00C5CCBEC644D9A116B315FEC05B10","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Perform Blat<\/div><\/div>"}},{"id":1054723,"guid":"F851C03F345F4ADEBA6321FDE75ECE8D","order_id":2,"type_id":15,"title":"command","source":{"name":"#!\/bin\/bash\n\nskriptdir=$(pwd)\n\ncd .\/data\/PlatformData\/fasta\/\n\nfind $directory -type f -name \"*.fa\"|while read file \ndo\necho $file\n\n# Perform blat on genome\ntwoBitFile=\"danRer11.2bit\"\ninFASTA=\"$file\"  \necho \"perform Blat on genome\"\nblat ${twoBitFile} ${inFASTA} -maxIntron=380000 -minIdentity=95 -tileSize=9 -stepSize=5 -minScore=19 \"${file}_danRer11_blatOut.psl\"\necho \"ok\"\necho \"writin to bed-file..\"\ncat \"${file}_danRer11_blatOut.psl\"  | perl ${skriptdir}\/psl2fullBed.pl -fracIdentCO 0.95 > \"..\/annotation\/${file%%.fa}_hits_danRer11.bed\"\necho \"ok\"\n\n# Perform blat on cDNA\ntwoBitFile=\"Danio_rerio.GRCz11.cdna.all.fa\"  \ninFASTA=\"$file\"  \necho \"perform Blat on cDNA\"\nblat ${twoBitFile} ${inFASTA} -maxIntron=0  -minIdentity=95 -tileSize=9 -stepSize=5 -minScore=19 \"${file}_danRer11_blatOut_cDNA.psl\"\necho \"ok\"\necho \"writin to bed-file..\"\ncat \"${file}_danRer11_blatOut_cDNA.psl\"  | perl ${skriptdir}\/psl2fullBed.pl -fracIdentCO 0.95 > \"..\/annotation\/${file%%.fa}_hits_danRer11_cDNA.bed\"\necho \"ok\"\n\n# Perform blat on ncRNA\ntwoBitFile=\"Danio_rerio.GRCz11.ncrna.fa\"  \ninFASTA=\"$file\"    \necho \"perform Blat on ncRNA\"\nblat ${twoBitFile} ${inFASTA} -maxIntron=0  -minIdentity=95 -tileSize=9 -stepSize=5 -minScore=19 \"${file}_danRer11_blatOut_ncrna.psl\"\necho \"ok\"\necho \"writin to bed-file..\"\ncat \"${file}_danRer11_blatOut_ncrna.psl\"  | perl ${skriptdir}\/psl2fullBed.pl -fracIdentCO 0.95 > \"..\/annotation\/${file%%.fa}_hits_danRer11_ncrna.bed\"\necho \"ok\"\n\ndone \n","command":"","os_name":"","os_version":""}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":658817,"guid":"5AAEEAEC86734799801511B23DDEB857","previous_id":658814,"previous_guid":"E66358602B774155A4DA876BCE1BC113","modified_on":1535462240,"protocol_id":0,"components":[{"id":1054723,"guid":"F852CB943758464EAD1982FCFFB8BB4A","order_id":1,"type_id":6,"title":"Section","source":{"title":"Probe mapping"}},{"id":1054723,"guid":"434968F1DC1B42F9AF3236516B132225","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">map with gene annotation<\/div><\/div>"}},{"id":1054723,"guid":"023919F76A4947CAA857B20B7D8748CB","order_id":2,"type_id":15,"title":"command","source":{"name":"rm(list = ls())\n\n# load libraries --------------------------------------------------------------\nlibrary(\"seqinr\")\nlibrary(\"biomaRt\")\nlibrary(\"GenomicRanges\")\nlibrary(\"AnnotationDbi\")\nlibrary(\"pbapply\")\nlibrary(\"data.table\")\nlibrary(\"toxprofileR\")\n\n# global parameters --------------------------------------------------\nmaxmismatch <- 1\nmartversion <- 93\n\n# load platform information\n\n## Array Express\nplatform_info_ae <-\n    data.table::fread(\n        file = \".\/data\/MetaData_curated\/platform_info_ae.csv\",\n        header = T,\n        fill = T,\n        sep = \"\\t\"\n    )\nload(\".\/data\/platformfiles_ae.Rd\")\nplatform_info_ae <- merge(platform_info_ae, platformfiles_ae, all = T)\nplatform_info_geo <-\n    data.table::fread(\n        file = \".\/data\/MetaData_curated\/platform_info_geo.csv\",\n        header = T,\n        fill = T,\n        sep = \"\\t\"\n    )\n\n## GEO\nload(\".\/data\/platformfiles_geo.Rd\")\nplatform_info_geo <-\n    merge(platform_info_geo, platformfiles_geo, all = T)\n\n## combine AE and GEO\nplatform_info <- rbind(platform_info_geo, platform_info_ae)\nplatform_info$gpl_id <- as.character(platform_info$gpl_id)\nrm(\n    list = c(\n        \"platform_info_ae\",\n        \"platform_info_geo\",\n        \"platformfiles_ae\",\n        \"platformfiles_geo\"\n    )\n)\n\n# load annotation databases ---------------------------------------------\nmart <- biomaRt::useEnsembl(biomart = \"ensembl\",\n                            dataset = \"drerio_gene_ensembl\",\n                            version = martversion)\n\nif (!file.exists(file = paste0(\".\/data\/exbygene_drerio_ensembl_v\", martversion, \".Rd\"))) {\n    library(\"GenomicFeatures\")\n    if (!file.exists(paste0(\n        \".\/data\/drerio_annotationdb_ensembl_\",\n        martversion,\n        \".db\"\n    ))) {\n        annotationdb <-\n            GenomicFeatures::makeTxDbFromBiomart(\n                biomart = mart@biomart,\n                dataset = mart@dataset,\n                host = unlist(strsplit(mart@host, \":80\", fixed = T))[1]\n            )\n        AnnotationDbi::saveDb(\n            annotationdb,\n            file = paste0(\n                \".\/data\/drerio_annotationdb_ensembl_\",\n                martversion,\n                \".db\"\n            )\n        )\n    } else{\n        annotationdb <-\n            AnnotationDbi::loadDb(file = paste0(\n                \".\/data\/drerio_annotationdb_ensembl_\",\n                martversion,\n                \".db\"\n            ))\n    }\n    \n    # extract exons by genes -------------------------------------------\n    exbygene <- GenomicFeatures::exonsBy(annotationdb, by = \"gene\")\n    save(exbygene,\n         file = paste0(\".\/data\/exbygene_drerio_ensembl_v\", martversion, \".Rd\"))\n} else {\n    load(file = paste0(\".\/data\/exbygene_drerio_ensembl_v\", martversion, \".Rd\"))\n}\n\n# apply annotation to all platform files ----------------------------------------------\n\nlapply(platform_info$gpl_id, function(GPL) {\n    \n    message(paste(\"process platform\", GPL))\n    plat_info <- platform_info[gpl_id == GPL]\n    \n    # if annotation is identical to another platform\n    if (grepl(\"GPL\", plat_info$platform_type)) {\n        \n        # check if other file already exists, otherwise process this one first\n        if (file.exists(paste0(\n            \".\/data\/PlatformData\/final_annotation\/\",\n            GPL,\n            \"annotation.Rds\"\n        ))) {\n            message(paste(\n                \"take annotation data from\",\n                plat_info$platform_type\n            ))\n            table_annot <-\n                readRDS(\n                    paste0(\n                        \".\/data\/PlatformData\/final_annotation\/\",\n                        plat_info$platform_type,\n                        \"annotation.Rds\"\n                    )\n                )\n            saveRDS(\n                table_annot,\n                file = paste0(\n                    \".\/data\/PlatformData\/final_annotation\/\",\n                    GPL,\n                    \"annotation.Rds\"\n                )\n            )\n            return(NULL)\n        } else {\n            GPL_old <- GPL\n            GPL <- plat_info$platform_type\n            message(paste(\"process platform\", GPL))\n            plat_info <- platform_info[gpl_id == GPL]\n        }\n    }\n    \n    # Oaklabs array (with confidential fasta file)\n    if (plat_info$platform_type == \"BIOTOX\") {\n        fasta_file <-\n            \"..\/..\/ArrayAnnotation\/data\/069507_D_Fasta_20140902.fa\"\n        \n        cDNA_bed <-\n            \".\/data\/PlatformData\/annotation\/Oaklabs_ArrayXS_Danio_rerio_V1_hits_danRer11_cDNA.bed\"\n        \n        DNA_bed <-\n            \".\/data\/PlatformData\/annotation\/Oaklabs_ArrayXS_Danio_rerio_V1_hits_danRer11.bed\"\n        \n        ncrna_bed <-\n            \".\/data\/PlatformData\/annotation\/Oaklabs_ArrayXS_Danio_rerio_V1_hits_danRer11_ncrna.bed\"\n        \n        arraytype <- \"regular\"\n    }\n    \n    # take old annotation if there was no sequence data available ---------------------\n    if (plat_info$platform_type == \"no\") {\n        message(\"Sequence Data not available for \", GPL)\n        message(\"loading old Annotation\")\n        \n        start_end_read <-\n            grep(\n                \"!platform_table_begin|!platform_table_end\",\n                readLines(plat_info$annotation_data)\n            )\n        \n        # read platform annotation (soft) file downloaded from GEO\n        platform_annotation <-\n            read.table(\n                plat_info$annotation_data,\n                skip = start_end_read[1],\n                nrow = start_end_read[2] - start_end_read[1],\n                header = T,\n                sep = \"\\t\",\n                fill = T,\n                quote = \"\",\n                comment.char = \"\"\n            )\n        \n        ProbeIDs <-\n            as.character(platform_annotation[, plat_info$ID_Column_Nr])\n        GeneIdentifier <-\n            as.character(platform_annotation[, plat_info$GeneIdentifier_ColumnName])\n        \n        table_annot <-\n            data.frame(ProbeIDs = ProbeIDs, GeneIDs = GeneIdentifier)\n        \n        message(\"Biomart query\")\n        \n        BM <-\n            toxprofileR::getBM_annotation(\n                values = as.character(table_annot$GeneIDs),\n                filter = as.character(plat_info$GeneIdentifier_Type),\n                mart = mart\n            )\n        \n        table_annot <-\n            merge.data.frame(\n                table_annot,\n                BM,\n                by.x = \"GeneIDs\",\n                by.y = as.character(plat_info$GeneIdentifier_Type),\n                all.x = T,\n                sort = F\n            )\n        \n        message(\"saving\")\n        saveRDS(\n            table_annot,\n            file = paste0(\n                \".\/data\/PlatformData\/final_annotation\/\",\n                GPL,\n                \"annotation.Rds\"\n            )\n        )\n        return(NULL)\n    }\n    \n    # Affy Arrays\n    if (plat_info$platform_type == \"Affy\") {\n        # check if Affy annotation is already present and copy annotation file from there\n        affy_ids <-\n            as.character(platform_info$gpl_id[platform_info$platform_type == \"Affy\"])\n        if (sum(file.exists(\n            paste0(\n                \".\/data\/PlatformData\/final_annotation\/\",\n                affy_ids,\n                \"annotation.Rds\"\n            )\n        )) > 0) {\n            root_file <-\n                paste0(\".\/data\/PlatformData\/final_annotation\/\",\n                       affy_ids,\n                       \"annotation.Rds\")[file.exists(\n                           paste0(\n                               \".\/data\/PlatformData\/final_annotation\/\",\n                               affy_ids,\n                               \"annotation.Rds\"\n                           )\n                       )][1]\n            table_annot <- readRDS(root_file)\n            saveRDS(\n                table_annot,\n                file = paste0(\n                    \".\/data\/PlatformData\/final_annotation\/\",\n                    GPL,\n                    \"annotation.Rds\"\n                )\n            )\n            return(NULL)\n        } \n        fasta_file <-\n            \".\/data\/PlatformData\/fasta\/Zebrafish.probe_fasta.fa\"\n        cDNA_bed <-\n            \".\/data\/PlatformData\/annotation\/Zebrafish.probe_fasta_hits_danRer11_cDNA.bed\"\n        \n        DNA_bed <-\n            \".\/data\/PlatformData\/annotation\/Zebrafish.probe_fasta_hits_danRer11.bed\"\n        \n        ncrna_bed <-\n            \".\/data\/PlatformData\/annotation\/Zebrafish.probe_fasta_hits_danRer11_ncrna.bed\"\n        \n        arraytype <- \"regular\"\n    }\n    \n    if (plat_info$platform_type == \"Affy_ST\") {\n        # check if Affy annotation is already present and copy annotation file from there\n        affy_ids <-\n            as.character(platform_info$gpl_id[platform_info$platform_type == \"Affy_ST\"])\n        if (sum(file.exists(\n            paste0(\n                \".\/data\/PlatformData\/final_annotation\/\",\n                affy_ids,\n                \"annotation.Rds\"\n            )\n        )) > 0) {\n            root_file <-\n                paste0(\".\/data\/PlatformData\/final_annotation\/\",\n                       affy_ids,\n                       \"annotation.Rds\")[file.exists(\n                           paste0(\n                               \".\/data\/PlatformData\/final_annotation\/\",\n                               affy_ids,\n                               \"annotation.Rds\"\n                           )\n                       )][1]\n            table_annot <- readRDS(root_file)\n            saveRDS(\n                table_annot,\n                file = paste0(\n                    \".\/data\/PlatformData\/final_annotation\/\",\n                    GPL,\n                    \"annotation.Rds\"\n                )\n            )\n            return(NULL)\n        }\n        fasta_file <-\n            \".\/data\/PlatformData\/fasta\/ZebGene-1_1-st-v1.zv9.probe.fa\"\n        cDNA_bed <-\n            \".\/data\/PlatformData\/annotation\/ZebGene-1_1-st-v1.zv9.probe_hits_danRer11_cDNA.bed\"\n        DNA_bed <-\n            \".\/data\/PlatformData\/annotation\/ZebGene-1_1-st-v1.zv9.probe_hits_danRer11.bed\"\n        ncrna_bed <-\n            \".\/data\/PlatformData\/annotation\/ZebGene-1_1-st-v1.zv9.probe_hits_danRer11_ncrna.bed\"\n        arraytype <- \"Affy_ST\"\n    }\n    \n    \n    if (plat_info$platform_type == \"yes\") {\n        fasta_file <- paste0(\".\/data\/PlatformData\/fasta\/\", GPL, \".fa\")\n        \n        cDNA_bed <-\n            paste0(\".\/data\/PlatformData\/annotation\/\",\n                   GPL,\n                   \"_hits_danRer11_cDNA.bed\")\n        \n        DNA_bed <-\n            paste0(\".\/data\/PlatformData\/annotation\/\",\n                   GPL,\n                   \"_hits_danRer11.bed\")\n        \n        ncrna_bed <-\n            paste0(\".\/data\/PlatformData\/annotation\/\",\n                   GPL,\n                   \"_hits_danRer11_ncrna.bed\")\n        \n        arraytype <- \"regular\"\n    }\n    \n    \n    \n    # load FASTA ----------------------------------------------------------------\n    platformfasta <- seqinr::read.fasta(file = fasta_file)\n    if (sum(duplicated(names(platformfasta))) > 0) {\n        message(paste(sum(duplicated(\n            names(platformfasta)\n        )), \"duplicates in fasta file\"))\n    }\n    \n    probelengths <- unlist(lapply(platformfasta, length))\n    #annotInfo$NrProbes <- length(platformfasta)\n    rm(platformfasta)\n    \n    # cDNA\n    aggr_table_cDNA <-\n        toxprofileR::get_hits_exons(\n            exon_bed = cDNA_bed,\n            mart = mart,\n            maxmismatch = maxmismatch,\n            probelengths = probelengths,\n            name = \"cDNA\",\n            arraytype = arraytype\n        )\n    # ncrna\n    aggr_table_ncrna <-\n        toxprofileR::get_hits_exons(\n            exon_bed = ncrna_bed,\n            mart = mart,\n            maxmismatch = maxmismatch,\n            probelengths = probelengths,\n            name = \"ncrna\",\n            arraytype = arraytype\n        )\n    # genome\n    aggr_table_genome <-\n        toxprofileR::get_hits_genome(\n            genome_bed = DNA_bed,\n            mart = mart,\n            maxmismatch = maxmismatch,\n            probelengths = probelengths,\n            arraytype = arraytype\n        )\n    \n    # merge all three alignments --------------------------------------------------\n    mapFinal.all <-\n        as.data.table(merge(\n            merge(\n                aggr_table_genome,\n                aggr_table_cDNA,\n                by = \"ProbeID\",\n                all = T\n            ),\n            aggr_table_ncrna,\n            by = \"ProbeID\",\n            all = T\n        ))\n    \n    mapFinal.all <-\n        mapFinal.all[, ensembl_gene_id_all := mapply(function(genome, cDNA, ncrna) {\n            list(unique(c(\n                unlist(genome), unlist(cDNA), unlist(ncrna)\n            )[!is.na(c(unlist(genome), unlist(cDNA), unlist(ncrna)))]))\n        },\n        genome = ensembl_gene_id_genome_all,\n        cDNA = ensembl_gene_id_cDNA_all,\n        ncrna = ensembl_gene_id_ncrna_all)]\n    \n    mapFinal.all <-\n        mapFinal.all[, n_all := mapply(function(ids_all) {\n            length(unlist(ids_all))\n        }, ids_all = ensembl_gene_id_all)]\n    \n    \n    \n    mapFinal.all <-\n        mapFinal.all[, ensembl_gene_id := mapply(\n            function(genome,\n                     cDNA,\n                     ncrna,\n                     score_genome,\n                     score_cDNA,\n                     score_ncrna) {\n                c(unlist(genome), unlist(cDNA), unlist(ncrna))[which.max(c(\n                    max(unlist(score_genome), na.rm = T),\n                    max(unlist(score_cDNA), na.rm = T),\n                    max(unlist(score_ncrna), na.rm = T)\n                ))]\n            },\n            genome = ensembl_gene_id_genome,\n            cDNA = ensembl_gene_id_cDNA_all,\n            ncrna = ensembl_gene_id_ncrna_all,\n            score_genome = overlap_length,\n            score_cDNA = score.x,\n            score_ncrna = score.y\n        )]\n    \n    sum(mapFinal.all$n_all == 1)\n    \n    ## flag genes with nonunique-hits\n    mapFinal.all$unique <- FALSE\n    mapFinal.all$unique[mapFinal.all$n_all == 1] <- TRUE\n    \n    # remove Probes with n_hits >= 100\n    mapFinal.all <- mapFinal.all[n_all < 100]\n    \n    # make probecluster name to probe ID name for affy arrays\n    if (plat_info$platform_type == \"Affy\") {\n        mapFinal.all <- mapFinal.all[order(ProbeID)]\n        mapFinal.all <-\n            mapFinal.all[, ProbeID := unlist(lapply(\n                X = strsplit(ProbeID, split = \":\"),\n                FUN = function(ProbeName) {\n                    ProbeName[3]\n                }\n            ))]\n    }\n    \n    if (plat_info$platform_type == \"Affy_ST\") {\n        mapFinal.all <- mapFinal.all[order(ProbeID)]\n        mapFinal.all <-\n            mapFinal.all[, ProbeID := unlist(lapply(\n                X = strsplit(ProbeID, split = \":\"),\n                FUN = function(ProbeName) {\n                    ProbeName[3]\n                }\n            ))][,\n                ProbeID := unlist(lapply(\n                    X = strsplit(ProbeID, split = \"-\"),\n                    FUN = function(ProbeName) {\n                        ProbeName[2]\n                    }\n                ))][,\n                    ProbeID := unlist(lapply(\n                        X = strsplit(ProbeID, split = \";\"),\n                        FUN = function(ProbeName) {\n                            ProbeName[1]\n                        }\n                    ))]\n    }\n    \n    # determine ProbeSet-Annotation for Affy-Arrays -----------------------------------------\n    if (plat_info$platform_type == \"Affy_ST\" |\n        plat_info$platform_type == \"Affy\") {\n        mapFinal.Probeset <-\n            mapFinal.all[, .(\n                ensembl_gene_id_all = list(ensembl_gene_id_all),\n                ensembl_gene_id = list(ensembl_gene_id),\n                unique = list(unique),\n                n_all = list(n_all)\n            ), by = ProbeID]\n        \n        mapFinal.Probeset <-\n            mapFinal.Probeset[, ensembl_gene_ids_probeset := mapply(function(all_ids) {\n                names(sort(table(unlist(\n                    all_ids\n                )), decreasing = T))[1]\n            }, all_ids = ensembl_gene_id_all)]\n        \n        mapFinal.Probeset <-\n            mapFinal.Probeset[, ensembl_gene_ids_probeset_max_count := mapply(function(all_ids) {\n                as.numeric(sort(table(unlist(\n                    all_ids\n                )), decreasing = T))[1]\n            }, all_ids = ensembl_gene_id_all)]\n        \n        mapFinal.Probeset <-\n            mapFinal.Probeset[, ensembl_gene_ids_probeset_count_probes := mapply(function(all_ids) {\n                length(unlist(all_ids))\n            }, all_ids = ensembl_gene_id)]\n        \n        mapFinal.Probeset <-\n            mapFinal.Probeset[, ensembl_gene_ids_probeset_count_unique := mapply(function(uniques) {\n                sum(unlist(uniques))\n            }, uniques = unique)]\n        \n        mapFinal.Probeset <-\n            mapFinal.Probeset[, ensembl_gene_ids_probeset_percent_id := ensembl_gene_ids_probeset_max_count \/\n                                  ensembl_gene_ids_probeset_count_probes]\n        \n        mapFinal.Probeset <-\n            mapFinal.Probeset[, ensembl_gene_ids_probeset_percent_unique := ensembl_gene_ids_probeset_count_unique \/\n                                  ensembl_gene_ids_probeset_count_probes]\n        \n        mapFinal.Probeset <-\n            mapFinal.Probeset[, unique := mapply(function(percent_unique) {\n                percent_unique > 0.5\n            }, percent_unique = ensembl_gene_ids_probeset_percent_unique)]\n        \n        mapFinal.Probeset <-\n            mapFinal.Probeset[, ensembl_gene_id := mapply(function(percent_id,\n                                                                   ensembl_gene_ids_probeset) {\n                if (percent_id > 0.5 &\n                    !is.na(percent_id)) {\n                    ensembl_gene_ids_probeset\n                } else{\n                    NA\n                }\n            },\n            percent_id = ensembl_gene_ids_probeset_percent_id,\n            ensembl_gene_ids_probeset = ensembl_gene_ids_probeset)]\n        \n        mapFinal.all <- mapFinal.Probeset\n        \n        if (plat_info$platform_type == \"Affy_ST\") {\n            transcript.probeset <-\n                read.csv(\n                    file = \".\/data\/PlatformData\/fasta\/ZebGene-1_1-st-v1.na33.zv9.probeset.csv\",\n                    sep = \",\",\n                    fill = T,\n                    header = T,\n                    as.is = T\n                )\n            transcript.probeset <-\n                transcript.probeset[transcript.probeset$transcript_cluster_id != 0, c(\"probeset_id\", \"transcript_cluster_id\")]\n            transcript.probeset$transcript_cluster_id <-\n                as.character(transcript.probeset$transcript_cluster_id)\n            transcript.probeset$probeset_id <-\n                as.character(transcript.probeset$probeset_id)\n            \n            mapFinal.all <-\n                merge(\n                    mapFinal.all,\n                    transcript.probeset,\n                    by.x = \"ProbeID\",\n                    by.y = \"transcript_cluster_id\",\n                    all = T\n                )\n        } else{\n            mapFinal.all$probeset_id <- NA\n        }\n        \n    } else {\n        mapFinal.all$probeset_id <- NA\n    }\n    \n    mapFinal_reduced <-\n        mapFinal.all[, c(\n            \"ProbeID\",\n            \"ensembl_gene_id_all\",\n            \"ensembl_gene_id\",\n            \"unique\",\n            \"n_all\",\n            \"probeset_id\"\n        )]\n    \n    # get functional annotation ------------------------------------------------\n    BM_all <-\n        toxprofileR::getBM_annotation(values = mapFinal_reduced$ensembl_gene_id,\n                                      filter = \"ensembl_gene_id\",\n                                      mart)\n    \n    annotation_drer11 <-\n        merge(\n            mapFinal_reduced,\n            BM_all,\n            by = \"ensembl_gene_id\",\n            all.x = T,\n            sort = F\n        )\n    \n    annotation_drer11 <-\n        annotation_drer11[order(annotation_drer11$ProbeID), ]\n    \n    # save ---------------------------------------------------------------------\n    saveRDS(\n        annotation_drer11,\n        file = paste0(\n            \".\/data\/PlatformData\/final_annotation\/\",\n            plat_info$gpl_id,\n            \"annotation.Rds\"\n        )\n    )\n    \n    if (exists(\"GPL_old\")) {\n        saveRDS(\n            annotation_drer11,\n            file = paste0(\n                \".\/data\/PlatformData\/final_annotation\/\",\n                GPL_old,\n                \"annotation.Rds\"\n            )\n        )\n        rm(GPL_old)\n    }\n    \n})\n","command":"","os_name":"R","os_version":""}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":658818,"guid":"C62FAC1971B64376A6F7D33B6A8EBFB9","previous_id":658817,"previous_guid":"5AAEEAEC86734799801511B23DDEB857","modified_on":1535462359,"protocol_id":0,"components":[{"id":1054723,"guid":"1AB12537BCBB425C9275E2C99EE326EB","order_id":1,"type_id":6,"title":"Section","source":{"title":"Create target file and table of comparisons"}},{"id":1054723,"guid":"6484C405C5DF4F9C8203E3337A8030C4","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Before loading the data, we compile a targets data frame and a table with all comparisons for logFC calculation<\/div><\/div>"}},{"id":1054723,"guid":"12C84219CA6D4AB18653236E53682CFE","order_id":2,"type_id":15,"title":"command","source":{"name":"rm(list = ls())\n\n# combine sample metadata from databases with manual annotation -------------------------\n## Array Express ------------------------------------------------------------------------\n\n# manual annotation\nzfe_tox_ae_cure <-\n    read.csv(\n        \".\/data\/MetaData_curated\/zfe_tox_ae_cure.csv\",\n        sep = \"\\t\",\n        header = T,\n        fill = T,\n        as.is = T\n    )\n\n# database metadata\nload(file = \".\/data\/zfe_tox_ae.Rd\")\n\nzfe_tox_ae <- zfe_tox_ae[!duplicated(zfe_tox_ae$Array.Data.File), ]\n\nzfe_tox_ae$study_id <-\n    unlist(lapply(strsplit(\n        x = as.character(zfe_tox_ae$Comment..ArrayExpress.FTP.file.),\n        fixed = F,\n        split = \"[.]|[\/]\"\n    ), function(x) {\n        x[[(grep(pattern = \"raw\", x) - 1)]]\n    }))\nzfe_tox_ae$gpl_id <- as.character(zfe_tox_ae$Array.Design.REF)\n\n# combine \nzfe_tox_ae_complete <-\n    merge.data.frame(zfe_tox_ae[, c(\"Array.Data.File\", \"study_id\", \"gpl_id\")], zfe_tox_ae_cure, by =\n                         \"Array.Data.File\")\n\nzfe_tox_ae_complete$gsm.gsm <- zfe_tox_ae_complete$Array.Data.File\n\n## GEO ----------------------------------------------------------------------------------\n\n# manual annotation\nzfe_tox_geo_cure <-\n    read.csv(\n        \".\/data\/MetaData_curated\/zfe_tox_geo_cure.csv\",\n        sep = \"\\t\",\n        header = T,\n        fill = T,\n        as.is = T\n    )\n\n# database metadata\nload(file = \".\/data\/zfe_tox_geo.Rd\")\n\nzfe_tox_geo$study_id <- as.character(zfe_tox_geo$gse.gse)\nzfe_tox_geo$gpl_id <- as.character(zfe_tox_geo$gpl.gpl)\nzfe_tox_geo$Array.Data.File <- unlist(lapply(strsplit(unlist(\n    lapply(\n        X = strsplit(\n            zfe_tox_geo$gsm.supplementary_file,\n            split = \";\",\n            fixed = T\n        ),\n        FUN = function(x) {\n            x[[1]]\n        }\n    )\n), split = \"[\/]|.gz\"), function(x) {\n    x[[length(x)]]\n}))\n\n# combine \nzfe_tox_geo_complete <-\n    merge.data.frame(zfe_tox_geo[, c(\"Array.Data.File\", \"study_id\", \"gpl_id\", \"gsm.gsm\")], zfe_tox_geo_cure, by =\n                         \"gsm.gsm\")\n\n# merge AE and GEO ------------------------------------------------------------\nzfe_tox_targets <- rbind(zfe_tox_ae_complete, zfe_tox_geo_complete)\n\n# remove lines which are marked to disregard\nzfe_tox_targets <-\n    zfe_tox_targets[zfe_tox_targets$disregard == \"\" |\n                        is.na(zfe_tox_targets$disregard), ]\n\n# make sample names\nzfe_tox_targets$SampleName <-\n    make.names(\n        names = paste(\n            zfe_tox_targets$Comp_SubstanceName_Trivial,\n            zfe_tox_targets$Exp_Messzeit_hpf,\n            zfe_tox_targets$Exp_Conc,\n            zfe_tox_targets$Exp_Conc_Unit,\n            sep = \"_\"\n        ),\n        unique = T\n    )\n\n# only take one color experiments\nzfe_tox_targets <-\n    zfe_tox_targets[\n        zfe_tox_targets$Exp_Design == \"OneColor\", ]\n\n\n# correct units\nzfe_tox_targets$Exp_Conc_Unit <-\n    gsub(\n        pattern = \"\u00b5m_L\",\n        replacement = \"\u00b5M_L\",\n        x = zfe_tox_targets$Exp_Conc_Unit,\n        fixed = T\n    )\nzfe_tox_targets$Exp_Conc_Unit <-\n    gsub(\n        pattern = \"mg\/l\",\n        replacement = \"mg_L\",\n        x = zfe_tox_targets$Exp_Conc_Unit,\n        fixed = T\n    )\n\n# remove flawed datasets\nmessage(\"remove dataset GSM668015\")\nzfe_tox_targets <-\n    zfe_tox_targets[zfe_tox_targets$gsm.gsm != \"GSM668015\", ] ##flawed Dataset\n\nmessage(\"remove dataset GSM957452\")\nzfe_tox_targets <-\n    zfe_tox_targets[zfe_tox_targets$gsm.gsm != \"GSM957452\", ] ##flawed Dataset\n\n\n# create comparisons -------------------------------------------------------\nzfe_tox_targets$treat_id <-\n    as.numeric(factor(apply(zfe_tox_targets[, c(\n        \"study_id\",\n        \"Exp_Expositionsstart_hpf\",\n        \"Exp_Expositionsstop_hpf\",\n        \"Exp_Messzeit_hpf\",\n        \"Comp_SubstanceName_Trivial\",\n        \"Comp_Tr_Ctrl\",\n        \"Exp_Conc\",\n        \"Exp_tissue\"\n    )], 1, function(x) {\n        paste(x, collapse = \"_\")\n    })))\n\ncomparisons <-\n    zfe_tox_targets[!duplicated(zfe_tox_targets[, \"treat_id\"]), ]\n\ncomparisons_control <-\n    comparisons[comparisons$Comp_Tr_Ctrl == \"Control\", !(colnames(comparisons) %in%\n                                                             c(\"Array.Data.File\", \"gsm.gsm\"))]\n\ncomparisons_treatment <-\n    comparisons[comparisons$Comp_Tr_Ctrl == \"Treatment\", !(colnames(comparisons) %in% c(\"Array.Data.File\", \"gsm.gsm\"))]\n\ncomparisons_merge <-\n    merge.data.frame(\n        comparisons_treatment,\n        comparisons_control,\n        by = c(\n            \"study_id\",\n            \"gpl_id\",\n            \"Exp_Expositionsstart_hpf\",\n            \"Exp_Expositionsstop_hpf\",\n            \"Exp_Messzeit_hpf\",\n            \"Exp_Expositionsdauer_h\",\n            \"Exp_tissue\",\n            \"Data_RawFormat\"\n        ),\n        all = T,\n        suffixes = c(\".treatment\", \".control\")\n    )\n\ncomparisons_merge$compareID <-\n    c(1:length(rownames(comparisons_merge)))\n\nsave(list=c(\"comparisons_merge\", \"zfe_tox_targets\"), file = \".\/data\/targets_comparisons.Rd\")\n","command":"","os_name":"R","os_version":""}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":658819,"guid":"9356099A6CD042AC8F04C1141E3B9F97","previous_id":658818,"previous_guid":"C62FAC1971B64376A6F7D33B6A8EBFB9","modified_on":1535462475,"protocol_id":0,"components":[{"id":1054723,"guid":"4E7F684439414F6C8450A699809B0FF4","order_id":1,"type_id":6,"title":"Section","source":{"title":"Read raw data"}},{"id":1054723,"guid":"ACA427718BC84DA6B97E8516A207AA6B","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Based on the R-packages \"limma\" and \"oligo\", data is loaded into R.<\/div><\/div>"}},{"id":1054723,"guid":"4BE5E8D1CE9944DA8D2063D8E7C36DB5","order_id":2,"type_id":15,"title":"command","source":{"name":"rm(list = ls())\n\nlibrary(\"toxprofileR\")\n\n# load targets file\nload(file = \".\/data\/targets_comparisons.Rd\")\n\n# create ProcessedData Folder\nif (!dir.exists(\".\/data\/ProcessedData\/\")) {\n    dir.create(\".\/data\/ProcessedData\/\")\n}\n\nlapply(unique(zfe_tox_targets$study_id), function(study) {\n    \n    # retrieve study metadata\n    metadata <- zfe_tox_targets[zfe_tox_targets$study_id == study, ]\n    datadir <- paste0(\".\/data\/ArrayData\/\", study, \"_RAW\/\")\n    rawformat <- as.character(metadata$Data_RawFormat[1])\n    betweenArrayNorm <- \"cyclicloess\"\n    \n    # read data\n    assign(\n        x = paste0(\"data.norm.\", metadata$study_id[1]),\n        value = toxprofileR::read_raw_public(\n            datadir = datadir,\n            rawformat = rawformat,\n            betweenArrayNorm = betweenArrayNorm,\n            metadata = metadata\n        )\n    )\n    \n    # save data\n    save(\n        list = paste0(\"data.norm.\", metadata$study_id[1]),\n        file = paste0(\n            \".\/data\/ProcessedData\/\",\n            metadata$study_id[1],\n            \"_norm.Rdata\"\n        )\n    )\n    \n    \n})\n","command":"","os_name":"R","os_version":""}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":658820,"guid":"06A8106262874DE1888256C71726E54B","previous_id":658819,"previous_guid":"9356099A6CD042AC8F04C1141E3B9F97","modified_on":1535462571,"protocol_id":0,"components":[{"id":1054723,"guid":"4D39A012C5044463ADC1AAFADA773C5C","order_id":1,"type_id":6,"title":"Section","source":{"title":"Create logFC matrix"}},{"id":1054723,"guid":"D278834E4B4F44A381A7D96604CB60E5","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Last but not least a logFC matrix is created from all normalized data.<\/div><\/div>"}},{"id":1054723,"guid":"F73A2DF98304467CB308CB75FA602B2A","order_id":2,"type_id":15,"title":"command","source":{"name":"rm(list = ls())\n\nlibrary(\"toxprofileR\")\nlibrary(\"tidyverse\")\n\nmessage(\"catching target file\")\nload(file = \".\/data\/targets_comparisons.Rd\")\n\nlogFC_list <-\n    lapply(unique(comparisons_merge$study_id), function(study_id) {\n       \n        message(\"processing dataset \", study_id)\n        comparisons_study <-\n            comparisons_merge[comparisons_merge$study_id == study_id, ]\n        \n        # load data\n        load(file = paste0(\n            \".\/data\/ProcessedData\/\",\n            comparisons_study$study_id[1],\n            \"_norm.Rdata\"\n        ))\n        data <- get(paste0(\"data.norm.\", comparisons_study$study_id[1]))\n        \n        #just for safety...\n        data$targets$Exp_Conc <- as.numeric(data$targets$Exp_Conc)\n        data$targets$Exp_Messzeit_hpf <-\n            as.numeric(data$targets$Exp_Messzeit_hpf)\n        \n        \n        fc_list_study <-\n            lapply(comparisons_study$compareID, function(compareID) {\n                message(\"Comparison # \", compareID)\n                comparison <-\n                    comparisons_study[comparisons_study$compareID == compareID, ]\n                \n                # logFC\n                logFCframe <-\n                    toxprofileR::calc_logfc_public(data = data, comparison = comparison)\n                \n                if (is.data.frame(logFCframe)) {\n                    return(logFCframe)\n                }\n            })\n        \n        fc_frame_study <- do.call(\"cbind\", fc_list_study)\n        fc_frame_study$ensembl_gene_id <- row.names(fc_frame_study)\n        \n        return(fc_frame_study)\n    })\n\n# remove studies with no output\nlogFC_list <- logFC_list[unlist(lapply(logFC_list,class))!=\"NULL\"]\n\n# merge all study frames together\nlogFC_frame <-  logFC_list %>% reduce(full_join, by = \"ensembl_gene_id\")\nrow.names(logFC_frame) <- logFC_frame$ensembl_gene_id\nlogFC_frame <- logFC_frame[,!colnames(logFC_frame)==\"ensembl_gene_id\"]\n\n# save\nsave(logFC_frame, file = \".\/data\/ProcessedData\/logFC_frame.Rd\")\n","command":"","os_name":"R","os_version":""}}],"cases":null,"data":null,"section":null,"section_color":null}],"materials":[],"description":"<p>Gene expression databases like Gene Expression Omnibus or ArrayExpress by now contain a wealth of toxicogenomic datasets. This is a offers great possibilities for advanced data analyses, like meta-analyses, co-expression studies, etc.<\/p>\n<p>\u00a0<\/p>\n<p>However, automated retrieval of this data is still a challenge.<\/p>\n<p>\u00a0<\/p>\n<p>With this computational pipeline we retrieve toxicogenomic data of the <em>Danio rerio<\/em> (zebrafish) embryo from GEO and ArrayExpress.<\/p>\n<p>To make the data as comparable as possible, we download the raw datasets, and re-map the probes or probesets to the most recent version.<\/p>\n<p>\u00a0<\/p>\n<p>In the end a matrix with logFC in response to different chemical treatments is compiled.<\/p>"}