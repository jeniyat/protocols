{"id":28705,"title":"Creating Differential Transcript Expression Results with DESeq2","title_html":"<p>Creating Differential Transcript Expression Results with DESeq2<\/p>","image":{"source":"https:\/\/www.protocols.io\/img\/default_protocol.png","placeholder":"https:\/\/www.protocols.io\/img\/default_protocol.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.799hr96","doi_status":2,"uri":"creating-differential-transcript-expression-result-799hr96","type_id":1,"published_on":1571232720,"parent_protocols":[],"parent_collections":[],"version_id":0,"created_on":1571185314,"categories":null,"creator":{"name":"David A. Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","affiliations":[{"affiliation":"Malaghan Institute of Medical Research (NZ)","url":"http:\/\/www.malaghan.org.nz\/","is_default":1}],"username":"david-eccles","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg"},"badges":[{"id":3,"image":{"source":"\/img\/badges\/silver.svg","placeholder":"\/img\/badges\/silver.svg"},"name":"Power author!"},{"id":6,"image":{"source":"\/img\/badges\/socialbutterfly.svg","placeholder":"\/img\/badges\/socialbutterfly.svg"},"name":"Social butterfly"}],"research_interests":null,"blocked_by_you":false,"blocked_you":false},"journal":null,"journal_name":null,"journal_link":null,"article_citation":null,"public":1,"has_versions":0,"link":null,"total_collections":0,"number_of_steps":27,"authors":[{"name":"David A. Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","affiliations":[],"username":"david-eccles","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg"},"badges":[],"research_interests":null,"blocked_by_you":false,"blocked_you":false}],"versions":[],"groups":[],"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"can_be_copied":1,"can_remove_fork":1,"forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":0,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"guid":"EDFD25A0EFAA11E9B46F1980EA91D759","steps":[{"id":826425,"guid":"4E97B3A0EFB311E9B46F1980EA91D759","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"90690D08E7A546B493F0B6B731114528","order_id":1,"type_id":6,"title":"Section","source":{"title":"Collating count data"}},{"id":1054724,"guid":"E92409634C5D4C28A8ECB9D9BD18D479","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Combine the transcript count data into a single data structure. To reduce confusion when this protocol is run multiple times, we declare an <\/span><span style = \"font-style:italic;\">analysisDate<\/span><span> variable to be used for output file names:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">countDate <- format(Sys.Date(), \"%Y-%b-%d\");<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">We also load libraries that will be used in the protocol:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">## steps 1-2<\/div><div class = \"text-block\">library(dplyr);    # data table manipulation<\/div><div class = \"text-block\">library(tidyr);    # data table cleaning<\/div><div class = \"text-block\">library(readr);    # reading csv files into tbl<\/div><div class = \"text-block\">library(magrittr); # additional pipe operators<\/div><div class = \"text-block\">## steps 3-8<\/div><div class = \"text-block\">library(DESeq2);   # differential expression analysis<\/div><div class = \"text-block\">library(ashr);     # for log fold change shrinking<\/div><div class = \"text-block\">## step 9<\/div><div class = \"text-block\">options(java.parameters = \"-Xmx10G\"); # may be needed to avoid Excel errors<\/div><div class = \"text-block\">library(xlsx);                        # writing to an Excel file<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#A492FF","critical":null,"critical_id":null,"duration":0},{"id":826426,"guid":"0C6F18F0EFB411E9B46F1980EA91D759","previous_id":826425,"previous_guid":"4E97B3A0EFB311E9B46F1980EA91D759","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"2EAB27D41A02429D807D80B9279E841B","order_id":1,"type_id":6,"title":"Section","source":{"title":"Collating count data"}},{"id":1054724,"guid":"AFDC72630C944F2A93A9A208164BDFE3","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Collect a list of the count data files:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">data.files <- list.files(pattern = \"_wide_transcript_counts_LAST.csv$\");<\/div><div class = \"text-block\">names(data.files) <- sub(\"_wide_transcript_counts_LAST.csv$\",\"\",data.files);<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">CHECK - <\/span><span>print out the file names to make sure they're correct:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">data.files<\/div><div class = \"text-block\">## example output<\/div><div class = \"text-block\">#                                  CGAug18_004<\/div><div class = \"text-block\">#\"CGAug18_004_wide_transcript_counts_LAST.csv\" <\/div><div class = \"text-block\">#                                      CGDec17 <\/div><div class = \"text-block\">#    \"CGDec17_wide_transcript_counts_LAST.csv\" <\/div><div class = \"text-block\">#                                  CGJan19_006 <\/div><div class = \"text-block\">#\"CGJan19_006_wide_transcript_counts_LAST.csv\" <\/div><div class = \"text-block\">#                                  CGMar19_009 <\/div><div class = \"text-block\">#\"CGMar19_009_wide_transcript_counts_LAST.csv\" <\/div><div class = \"text-block\">#                                  CGNov18_005 <\/div><div class = \"text-block\">#\"CGNov18_005_wide_transcript_counts_LAST.csv\"<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#A492FF","critical":null,"critical_id":null,"duration":0},{"id":826427,"guid":"2B5D5740EFB411E9B46F1980EA91D759","previous_id":826426,"previous_guid":"0C6F18F0EFB411E9B46F1980EA91D759","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"88845E8AA86A4831A9583716605F789B","order_id":1,"type_id":6,"title":"Section","source":{"title":"Collating count data"}},{"id":1054724,"guid":"7F2FBDB7083746F996E3DE0B1E69A140","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Set up the skeleton structures for creating the combined table. This is created in two parts:<\/div><div class = \"text-block\"><ol style = \"list-style-type: decimal;\"><li style = \"counter-reset:ol0;\">A gene lookup table, containing gene metadata<\/li><li style = \"counter-reset:ol0;\">A count table, containing transcript counts<\/li><\/ol><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">geneLookup.tbl <- NULL;<\/div><div class = \"text-block\">counts.raw.tbl <- tibble(tdir=character());<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#A492FF","critical":null,"critical_id":null,"duration":0},{"id":826428,"guid":"719E0050EFB511E9B46F1980EA91D759","previous_id":826427,"previous_guid":"2B5D5740EFB411E9B46F1980EA91D759","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"F7CB87AC2113454382B4BB3F11355774","order_id":1,"type_id":6,"title":"Section","source":{"title":"Collating count data"}},{"id":1054724,"guid":"68AF2D821AC54BE8A046D200EE46D390","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">The skeleton structures are then populated with the data from individual library files:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for(dfi in seq_along(data.files)){<\/div><div class = \"text-block\">  data.files[dfi] %>%<\/div><div class = \"text-block\">    read_csv %>%<\/div><div class = \"text-block\">    mutate(tdir = paste0(transcript, \"_\", dir)) -><\/div><div class = \"text-block\">      counts.sub.tbl;<\/div><div class = \"text-block\">  ## append columns without barcode names to gene table<\/div><div class = \"text-block\">  geneLookup.tbl %<>%<\/div><div class = \"text-block\">      rbind(select(counts.sub.tbl,<\/div><div class = \"text-block\">                   -starts_with(\"BC\"),<\/div><div class = \"text-block\">                   -starts_with(\"RB\")));<\/div><div class = \"text-block\">  ## append columns *with* barcode names to count table<\/div><div class = \"text-block\">  counts.sub.tbl %<>%<\/div><div class = \"text-block\">      select(\"tdir\", starts_with(\"BC\"), starts_with(\"RB\"));<\/div><div class = \"text-block\">  ## add file label to barcode name column<\/div><div class = \"text-block\">  bcCols <- grep(\"^(BC|RB)\", colnames(counts.sub.tbl));<\/div><div class = \"text-block\">  colnames(counts.sub.tbl)[bcCols] %<>%<\/div><div class = \"text-block\">    paste0(names(data.files)[dfi], \".\", .);<\/div><div class = \"text-block\">  counts.raw.tbl %<>%<\/div><div class = \"text-block\">      full_join(counts.sub.tbl, by=\"tdir\");<\/div><div class = \"text-block\">}<\/div><div class = \"text-block\">## Remove duplicates from the gene table<\/div><div class = \"text-block\">geneLookup.tbl %<>% unique;<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">CHECK -<\/span><span> make sure that the column headings of the aggregated count table match the expected names:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">colnames(counts.raw.tbl)<\/div><div class = \"text-block\">## Example output<\/div><div class = \"text-block\"># [1] \"tdir\"             \"CGAug18_004.BC04\" \"CGAug18_004.BC05\" \"CGAug18_004.BC06\"<\/div><div class = \"text-block\"># [5] \"CGDec17.BC06\"     \"CGDec17.BC07\"     \"CGJan19_006.BC03\" \"CGJan19_006.BC04\"<\/div><div class = \"text-block\"># [9] \"CGJan19_006.BC05\" \"CGJan19_006.BC06\" \"CGJan19_006.BC07\" \"CGJan19_006.BC08\"<\/div><div class = \"text-block\">#[13] \"CGMar19_009.BC07\" \"CGMar19_009.BC08\" \"CGMar19_009.BC09\" \"CGMar19_009.BC10\"<\/div><div class = \"text-block\">#[17] \"CGNov18_005.BC01\" \"CGNov18_005.BC02\" \"CGNov18_005.BC03\" \"CGNov18_005.BC04\"<\/div><div class = \"text-block\">#[21] \"CGNov18_005.BC05\" \"CGNov18_005.BC06\"<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#A492FF","critical":null,"critical_id":null,"duration":0},{"id":826448,"guid":"B3158360EFC811E9B46F1980EA91D759","previous_id":826428,"previous_guid":"719E0050EFB511E9B46F1980EA91D759","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"294E987A804747D4AEF76702F77B5DE5","order_id":1,"type_id":6,"title":"Section","source":{"title":"Collating count data"}},{"id":1054724,"guid":"34F94EECDF4B4031B43B4AB50071358B","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Do some cleaning \/ reordering of the data, then create an intermediate aggregate count table<\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#A492FF","critical":null,"critical_id":null,"duration":0},{"id":826449,"guid":"F11A4880EFC811E9B46F1980EA91D759","previous_id":826448,"previous_guid":"B3158360EFC811E9B46F1980EA91D759","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"C0643896B6D342DC9C725224EFEAE267","order_id":1,"type_id":6,"title":"Section","source":{"title":"Collating count data"}},{"id":1054724,"guid":"69D9A3DB02A44BE88773E3EFAD1ACD2A","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">The sample metadata file is read in, mostly as factors; the sample ID is converted to a character vector:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">read.csv(\"metadata.csv\") %>%<\/div><div class = \"text-block\">    mutate(SampleID = as.character(SampleID)) -><\/div><div class = \"text-block\">    meta.df;<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Metadata rows are subset and re-ordered to match the order of the count table:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">meta.df <- meta.df[match(colnames(counts.raw.tbl)[-1], meta.df$SampleID),];<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#A492FF","critical":null,"critical_id":null,"duration":0},{"id":826450,"guid":"C92FBFA0EFCB11E9B46F1980EA91D759","previous_id":826449,"previous_guid":"F11A4880EFC811E9B46F1980EA91D759","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"66891E1B555147BD9573CD10026F3935","order_id":1,"type_id":6,"title":"Section","source":{"title":"Collating count data"}},{"id":1054724,"guid":"8317544B5E45480881168A07DEDC94BA","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Missing values for genes are set to counts of zero, and the count table is appended to the genes table:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">counts.raw.tbl %>%<\/div><div class = \"text-block\">    replace(is.na(.), 0) %>%<\/div><div class = \"text-block\">    left_join(geneLookup.tbl, ., by=\"tdir\") -><\/div><div class = \"text-block\">    counts.withGenes.tbl;<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#A492FF","critical":null,"critical_id":null,"duration":0},{"id":826451,"guid":"14F38AB0EFCD11E9B46F1980EA91D759","previous_id":826450,"previous_guid":"C92FBFA0EFCB11E9B46F1980EA91D759","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"1B475B28A64E4E3693625F058DD2C67C","order_id":1,"type_id":6,"title":"Section","source":{"title":"Collating count data"}},{"id":1054724,"guid":"55B876003FC74181B343F01628096301","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">The combined table is output to an intermediate file, using the analysis date as a file name:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">counts.withGenes.tbl %>%<\/div><div class = \"text-block\">    write_csv(sprintf(\"raw_counts_%s.csv\", countDate));<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#A492FF","critical":null,"critical_id":null,"duration":0},{"id":826453,"guid":"E86B0FB0EFCF11E9B46F1980EA91D759","previous_id":826451,"previous_guid":"14F38AB0EFCD11E9B46F1980EA91D759","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"CCBB5E922CDC4252BB27C81EDA10E1FB","order_id":1,"type_id":6,"title":"Section","source":{"title":"Differential Expression"}},{"id":1054724,"guid":"C4520AC898FD414C9676CF1757C91D91","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Set up variables to change output file names and behaviour:<\/div><div class = \"text-block\"><span style = \"font-style:italic;\">Note: the <\/span><span>countDate<\/span><span style = \"font-style:italic;\"> is not \"today\" because different explorations of differential expression could be done on the same count data.<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">countDate <- \"2019-Oct-16\"; # date of count aggregation<\/div><div class = \"text-block\">l2FCShrink <- TRUE; # whether the Log2FC values should be shrunk<\/div><div class = \"text-block\">analysisDate <- format(Sys.Date(), \"%Y-%b-%d\"); # date of DESeq analysis<\/div><div class = \"text-block\">resultSource <- \"GRCm38_CG_4T1\"; # descriptive label for results<\/div><div class = \"text-block\">excluded.factors <- \"Treatment\"; # factors to exclude from statistical model<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Read in the intermediate aggregated count file and the metadata file:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">sprintf(\"raw_counts_%s.csv\", countDate) %>%<\/div><div class = \"text-block\">    read_csv -><\/div><div class = \"text-block\">    count.tbl;<\/div><div class = \"text-block\">read.csv(\"metadata.csv\") %>%<\/div><div class = \"text-block\">    mutate(SampleID = as.character(SampleID)) %>%<\/div><div class = \"text-block\">    ## Make sure metadata information only includes samples in the count table<\/div><div class = \"text-block\">    filter(SampleID %in% colnames(count.tbl)) -><\/div><div class = \"text-block\">    meta.df;<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#94EBFF","critical":null,"critical_id":null,"duration":0},{"id":826454,"guid":"32B341D0EFD211E9B0CC89B67D0BF410","previous_id":826453,"previous_guid":"E86B0FB0EFCF11E9B46F1980EA91D759","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"96E7A7F574EA403FA73C477A89DFF9A8","order_id":1,"type_id":6,"title":"Section","source":{"title":"Differential Expression"}},{"id":1054724,"guid":"48996514FA5346EE8C5E9F4C1F287F85","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Carry out metadata filtering (i.e. sample exclusion) and count filtering (e.g. gene \/ sample QC)<\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#94EBFF","critical":null,"critical_id":null,"duration":0},{"id":826751,"guid":"DC59E760EFFB11E980827155C6919A2F","previous_id":826760,"previous_guid":"0B905540F00211E980827155C6919A2F","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"F5B5D2DE14734009948D54ED8D6034A3","order_id":1,"type_id":6,"title":"Section","source":{"title":"Differential Expression"}},{"id":1054724,"guid":"D8C928FF29D14827A0418CAA438A6726","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Make sure the count table containing only genes with a total count across all samples of at least <\/span><span style = \"font-style:italic;\">minCount<\/span><span>, have at least <\/span><span style = \"font-style:italic;\">nonZeroThreshold<\/span><span> genes with nonzero counts, and filter to choose only Sample IDs that are in the metadata table:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">count.tbl %<>%<\/div><div class = \"text-block\">    pivot_longer(cols=c(-transcript, -Chr, -Strand, -Start, -End,<\/div><div class = \"text-block\">                 -Description, -Gene, -dir, -tdir),<\/div><div class = \"text-block\">                 names_to = \"SampleID\", values_to = \"count\") %>%<\/div><div class = \"text-block\">    ## only keep transcripts with a total count of 2 or more<\/div><div class = \"text-block\">    group_by(SampleID) %>%<\/div><div class = \"text-block\">    filter(sum(count) >= 2) %>%<\/div><div class = \"text-block\">    filter(sum(count > 0) > (length(count) * 0.25)) %>%<\/div><div class = \"text-block\">    ## convert to integer<\/div><div class = \"text-block\">    mutate(count = as.integer(count)) %>%<\/div><div class = \"text-block\">    ## restore wide format<\/div><div class = \"text-block\">    ungroup %>%<\/div><div class = \"text-block\">    pivot_wider(names_from = SampleID, values_from = count) %>%<\/div><div class = \"text-block\">    ## reorder to match metadata table<\/div><div class = \"text-block\">    select(transcript, Chr, Strand, Start, End, Description, Gene, dir, tdir,<\/div><div class = \"text-block\">           match(meta.df$SampleID, colnames(.)))<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#94EBFF","critical":null,"critical_id":null,"duration":0},{"id":826752,"guid":"47C7E330EFFC11E980827155C6919A2F","previous_id":826751,"previous_guid":"DC59E760EFFB11E980827155C6919A2F","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"F714475E3A7043E7BBA83396B82D07A9","order_id":1,"type_id":6,"title":"Section","source":{"title":"Differential Expression"}},{"id":1054724,"guid":"E603434D8ADF4D79BC1136A90B7C029B","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Filter the metadata file to match the count table (i.e. removing any samples filtered out in the previous step), and exclude any columns that have single values:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><\/div><\/code><\/pre><\/div><div class = \"text-block\">Refactor the metadata structure to remove missing values:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for(x in colnames(meta.df)){<\/div><div class = \"text-block\">    if(is.factor(meta.df[[x]])){<\/div><div class = \"text-block\">        meta.df[[x]] %<>% factor;<\/div><div class = \"text-block\">    }<\/div><div class = \"text-block\">}<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">CHECK -<\/span><span> make sure the SampleIDs in the column names match the exact order of the metadata table:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">colnames(count.tbl)[-(1:9)] == meta.df$SampleID<\/div><div class = \"text-block\">## Example output<\/div><div class = \"text-block\"># [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE                    <\/div><div class = \"text-block\">#[16] TRUE TRUE                                                                                     <\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#94EBFF","critical":null,"critical_id":null,"duration":0},{"id":826760,"guid":"0B905540F00211E980827155C6919A2F","previous_id":826454,"previous_guid":"32B341D0EFD211E9B0CC89B67D0BF410","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"B533877491A242719DD3C5E1154C57A2","order_id":1,"type_id":6,"title":"Section","source":{"title":"Differential Expression"}},{"id":1054724,"guid":"BC87D80F51A34B12B3E00A669286325E","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Filter the metadata table to only include the desired samples:<\/div><div class = \"text-block\"><span style = \"font-style:italic;font-weight:bold;\">Note: this step will be situation specific<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">meta.df %<>%<\/div><div class = \"text-block\">    ## Only keep 4T1 strain data<\/div><div class = \"text-block\">    filter(Strain == \"4T1\") %>%<\/div><div class = \"text-block\">    ## Sort by cell line, then replicate<\/div><div class = \"text-block\">    arrange(Line, Replicate);<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#94EBFF","critical":null,"critical_id":null,"duration":0},{"id":826771,"guid":"D6F24630F00711E980827155C6919A2F","previous_id":826752,"previous_guid":"47C7E330EFFC11E980827155C6919A2F","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"A8986270AD514C9E86D9105EE3C183BC","order_id":1,"type_id":6,"title":"Section","source":{"title":"Differential Expression"}},{"id":1054724,"guid":"7FF8574C98E04753AB180400F06C0487","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Create DESeq2 data structure, and run a differential expression analysis<\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#94EBFF","critical":null,"critical_id":null,"duration":0},{"id":826772,"guid":"E7A442D0F00711E980827155C6919A2F","previous_id":826771,"previous_guid":"D6F24630F00711E980827155C6919A2F","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"9A222F3B5A184F87AB9810374D58415E","order_id":1,"type_id":6,"title":"Section","source":{"title":"Differential Expression"}},{"id":1054724,"guid":"BD8AB1C8EA47460CA2F7DE3DFE0341EF","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Identify factors for the statistical model from the metadata file:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">setdiff(colnames(metasub.df),<\/div><div class = \"text-block\">        c(c(\"SampleID\",\"Label\",\"Replicate\",\"Notes\"), excluded.factors)) -><\/div><div class = \"text-block\">    factorNames;<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#94EBFF","critical":null,"critical_id":null,"duration":0},{"id":826773,"guid":"424E1990F00811E980827155C6919A2F","previous_id":826772,"previous_guid":"E7A442D0F00711E980827155C6919A2F","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"F549653566FB48D18AEF26AD95F2F0FC","order_id":1,"type_id":6,"title":"Section","source":{"title":"Differential Expression"}},{"id":1054724,"guid":"A32C0F6AE59D4B2190C8338DDBF4D653","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Create the transcript count matrix:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">count.mat <- as.matrix(count.tbl[-(1:9)]);<\/div><div class = \"text-block\">rownames(count.mat) <- count.tbl$tdir;<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#94EBFF","critical":null,"critical_id":null,"duration":0},{"id":826774,"guid":"1D623CA0F00911E980827155C6919A2F","previous_id":826773,"previous_guid":"424E1990F00811E980827155C6919A2F","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"415E8050E73649BAA9B4ACF283F93B1C","order_id":1,"type_id":6,"title":"Section","source":{"title":"Differential Expression"}},{"id":1054724,"guid":"73B0323BE69E49399FE242BD5A0B6E4C","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Convert to DESeq2 structure and run DESeq2:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">DESeqDataSetFromMatrix(count.mat, meta.df,<\/div><div class = \"text-block\">        as.formula(paste0(\"~ \", paste(factorNames, collapse=\" + \")))) %>%<\/div><div class = \"text-block\">    DESeq -><\/div><div class = \"text-block\">    dds;<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">CHECK - <\/span><span>make sure dispersion and result names look reasonable:<\/span><\/div><div class = \"text-block\"><span style = \"font-style:italic;\">Note: The result names will not indicate every possible comparison; just a subset from which all comparisons can be derived from.<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">plotDispEsts(dds);<\/div><div class = \"text-block\">resultsNames(dds);<\/div><div class = \"text-block\">## Example output<\/div><div class = \"text-block\"># [1] \"Intercept\"                   \"Experiment_CG005_vs_CG004\"                                      <\/div><div class = \"text-block\"># [3] \"Experiment_CG006_vs_CG004\"   \"Experiment_CG009_vs_CG004\"                                      <\/div><div class = \"text-block\"># [5] \"Experiment_CGDec17_vs_CG004\" \"Line_p0D25_vs_p0\"                                               <\/div><div class = \"text-block\"># [7] \"Line_p0SC_vs_p0\"             \"Line_p0SCL_vs_p0\"                                               <\/div><div class = \"text-block\"># [9] \"Line_WT_vs_p0\"                                                                                <\/div><\/div><\/code><\/pre><\/div><\/div>"}},{"id":1054725,"guid":"B69367BAD3F747E98726608A41728D50","order_id":2,"type_id":17,"title":"result","source":{"body":"<div class = \"text-blocks\"><div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/protocols-files.s3.amazonaws.com\/private\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/bsh3jpt6.png?X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJYFAX46LHRVQMGOA%2F20191016%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20191016T120714Z&X-Amz-SignedHeaders=host&X-Amz-Expires=604800&X-Amz-Signature=25e12a987d35eef7d56369771f36a21fb9cd666bee47139861866136ce0525a2\" \/><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#94EBFF","critical":null,"critical_id":null,"duration":0},{"id":826776,"guid":"6E9FD380F00D11E980827155C6919A2F","previous_id":826774,"previous_guid":"1D623CA0F00911E980827155C6919A2F","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"9C7610B7ADA64F3BA675BB54BF3DC5EF","order_id":1,"type_id":6,"title":"Section","source":{"title":"Result Collation"}},{"id":1054724,"guid":"891E7DA98ADC4320B78EC0A6734D6F3D","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Prepare results table skeletons for DESeq2 results <\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#84CE84","critical":null,"critical_id":null,"duration":0},{"id":826777,"guid":"8532AD10F00E11E99F55B7FEAD98ED34","previous_id":826776,"previous_guid":"6E9FD380F00D11E980827155C6919A2F","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"0B094FCE33394DEE9B7CBB906C1224BC","order_id":1,"type_id":6,"title":"Section","source":{"title":"Result Collation"}},{"id":1054724,"guid":"A78E5A8F09104ECB8AA787B71622E2A5","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Collect up comparisons to make:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">resultList <- NULL;<\/div><div class = \"text-block\">for(fi in factorNames){<\/div><div class = \"text-block\">    vn <- unique(meta.df[[fi]]);<\/div><div class = \"text-block\">    vn <- vn[order(-xtfrm(vn))];<\/div><div class = \"text-block\">    if(length(vn) == 1){<\/div><div class = \"text-block\">        next;<\/div><div class = \"text-block\">    }<\/div><div class = \"text-block\">    for(fai in seq(1, length(vn)-1)){<\/div><div class = \"text-block\">        for(fbi in seq(fai+1, length(vn))){<\/div><div class = \"text-block\">            cat(sprintf(\"%s: %s vs %s\\n\", fi, vn[fai], vn[fbi]));<\/div><div class = \"text-block\">            resultList <- c(resultList,<\/div><div class = \"text-block\">                            list(c(fi, as.character(vn[fai]), as.character(vn[fbi]))));<\/div><div class = \"text-block\">        }<\/div><div class = \"text-block\">    }<\/div><div class = \"text-block\">}<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#84CE84","critical":null,"critical_id":null,"duration":0},{"id":826778,"guid":"A76E41A0F00E11E99F55B7FEAD98ED34","previous_id":826779,"previous_guid":"500C2660F00F11E99F55B7FEAD98ED34","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"A472F65C7CB04163874D828D24526A27","order_id":1,"type_id":6,"title":"Section","source":{"title":"Result Collation"}},{"id":1054724,"guid":"619A15CE5EE34F189EE189F8B52B4BF7","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Generate base count table:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">dds.withCounts.tbl <- count.tbl<\/div><div class = \"text-block\">## replace column names with metadata labels<\/div><div class = \"text-block\">colnames(dds.withCounts.tbl)[match(meta.df$SampleID,<\/div><div class = \"text-block\">                                   colnames(dds.withCounts.tbl))] <-<\/div><div class = \"text-block\">    paste0(\"raw.\",sub(\"^ +\", \"\", as.character(meta.df$Label)));<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Tack on VST matrix:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">dds.withCounts.tbl[,colnames(dds.counts)] <- round(dds.counts,2);<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Pre-populate wth minimum p-value column:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">dds.withCounts.tbl$min.p.val <- 0;<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#84CE84","critical":null,"critical_id":null,"duration":0},{"id":826779,"guid":"500C2660F00F11E99F55B7FEAD98ED34","previous_id":826777,"previous_guid":"8532AD10F00E11E99F55B7FEAD98ED34","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"2A70B86F0EF3420FAAE75EBF56586924","order_id":1,"type_id":6,"title":"Section","source":{"title":"Result Collation"}},{"id":1054724,"guid":"4FE4D2ECDB0746F9B32D3AD7DF8F9467","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Create variance-stabilised [log2] count matrix from DESeq2 structure:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">dds.counts <- assay(vst(dds, blind=FALSE));<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Rescale VST values to have the same 99th percentile, but a minimum value of zero. This makes the scaled counts resemble more closely the actual read counts:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">dds.quantile99 <- quantile(dds.counts[dds.counts > min(dds.counts)], 0.99);<\/div><div class = \"text-block\">((dds.counts - min(dds.counts)) \/<\/div><div class = \"text-block\"> (dds.quantile99 - min(dds.counts))) * (dds.quantile99) -><\/div><div class = \"text-block\">    dds.counts;<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Replace column names in the VST matrix with labels from the metadata:<\/div><div class = \"text-block\"><span style = \"font-style:italic;\">Note: the substution removes any initial whitespace from the label<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">colnames(dds.counts)[match(meta.df$SampleID,<\/div><div class = \"text-block\">                           colnames(dds.counts))] <-<\/div><div class = \"text-block\">    paste0(\"adj.\",sub(\"^ +\", \"\", as.character(meta.df$Label)));<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#84CE84","critical":null,"critical_id":null,"duration":0},{"id":826781,"guid":"50754BA0F01311E99F55B7FEAD98ED34","previous_id":826778,"previous_guid":"A76E41A0F00E11E99F55B7FEAD98ED34","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"2C704FDD09B34D44947CAA826E17EED4","order_id":1,"type_id":6,"title":"Section","source":{"title":"Result Collation"}},{"id":1054724,"guid":"5945038C4E294B1B9DE9AC4F86712AF2","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Fetch DESeq2 results for each comparison from the DESeq2 data structure and add to the base table:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for(rn in resultList){<\/div><div class = \"text-block\">    print(rn);<\/div><div class = \"text-block\">    results.df <-<\/div><div class = \"text-block\">        if(l2FCShrink){<\/div><div class = \"text-block\">            as.data.frame(lfcShrink(dds, contrast=rn, type = \"ashr\"));<\/div><div class = \"text-block\">        } else {<\/div><div class = \"text-block\">           as.data.frame(results(dds, contrast=rn));<\/div><div class = \"text-block\">        }<\/div><div class = \"text-block\">    results.df$log2FoldChange <- round(results.df$log2FoldChange, 2);<\/div><div class = \"text-block\">    results.df$pvalue <- signif(results.df$pvalue, 3);<\/div><div class = \"text-block\">    results.df$padj <- signif(results.df$padj, 3);<\/div><div class = \"text-block\">    rn.label <- paste(rn, collapse=\"-\");<\/div><div class = \"text-block\">    results.tbl <- as.tbl(results.df[, c(\"log2FoldChange\", \"lfcSE\", \"pvalue\", \"padj\")]);<\/div><div class = \"text-block\">    colnames(results.tbl) <- paste0(c(\"L2FC.\", \"lfcSE.\", \"pval.\", \"padj.\"), rn.label);<\/div><div class = \"text-block\">    results.tbl$tdir <- rownames(results.df);<\/div><div class = \"text-block\">    dds.withCounts.tbl <-<\/div><div class = \"text-block\">        left_join(dds.withCounts.tbl, results.tbl, by=\"tdir\");<\/div><div class = \"text-block\">}<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#84CE84","critical":null,"critical_id":null,"duration":0},{"id":826782,"guid":"FC56A620F01411E99F55B7FEAD98ED34","previous_id":826781,"previous_guid":"50754BA0F01311E99F55B7FEAD98ED34","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"0A8E3AF00A7343298B59CD6A7D6FAF19","order_id":1,"type_id":6,"title":"Section","source":{"title":"Result Collation"}},{"id":1054724,"guid":"A5231D93A9FD4E1BB9B0D4059A0B5BCC","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Write results out to a CSV file:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">dds.withCounts.tbl$min.p.val <-<\/div><div class = \"text-block\">    apply(dds.withCounts.tbl[,grep(\"^padj\\\\.\",colnames(dds.withCounts.tbl))],<\/div><div class = \"text-block\">          1, min, na.rm=TRUE);<\/div><div class = \"text-block\">write.csv(dds.withCounts.tbl, row.names=FALSE,<\/div><div class = \"text-block\">          gzfile(sprintf(\"DE_%s_VST_%s_%s.csv.gz\",<\/div><div class = \"text-block\">                         if(l2FCShrink){\"shrunk\"} else {\"orig\"},<\/div><div class = \"text-block\">                         resultSource, analysisDate)));<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#84CE84","critical":null,"critical_id":null,"duration":0},{"id":826783,"guid":"2AF612E0F01511E99F55B7FEAD98ED34","previous_id":826782,"previous_guid":"FC56A620F01411E99F55B7FEAD98ED34","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"647342DF51EA4ABE8A1AC387A9617B0C","order_id":1,"type_id":6,"title":"Section","source":{"title":"Excel Worksheet Output"}},{"id":1054724,"guid":"BAD9984AE3EE4897A3BF36C0FA4986A3","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Separate results and put into an Excel file<\/div><div class = \"text-block\"><span style = \"font-style:italic;font-weight:bold;\">Note: this step will be situation specific<\/span><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#FFED92","critical":null,"critical_id":null,"duration":0},{"id":826784,"guid":"D7D63530F01511E99F55B7FEAD98ED34","previous_id":826783,"previous_guid":"2AF612E0F01511E99F55B7FEAD98ED34","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"04906AE1A8CC48CF9ECA3475772491B6","order_id":1,"type_id":6,"title":"Section","source":{"title":"Excel Worksheet Output"}},{"id":1054724,"guid":"D89EC52B30C0486C9A5220D4F1AB8D8E","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Split out mitochondrial genes:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">filtered.dds.tbl <- filter(dds.withCounts.tbl, Chr != \"MT\");                                        <\/div><div class = \"text-block\">MT.dds.tbl <- filter(dds.withCounts.tbl, Chr == \"MT\");                                              <\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#FFED92","critical":null,"critical_id":null,"duration":0},{"id":826785,"guid":"79E665C0F01611E99F55B7FEAD98ED34","previous_id":826784,"previous_guid":"D7D63530F01511E99F55B7FEAD98ED34","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"AC5954FE6B01439989C696D7F037C203","order_id":1,"type_id":6,"title":"Section","source":{"title":"Excel Worksheet Output"}},{"id":1054724,"guid":"7B1780852A5747348E7C58EC8266142F","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Write split datasets out to the Excel file:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">write.xlsx2(as.data.frame(filtered.dds.tbl),<\/div><div class = \"text-block\">            sprintf(\"DE_%s_VST_%s_%s.xlsx\",<\/div><div class = \"text-block\">                    if(l2FCShrink){\"shrunk\"} else {\"orig\"},<\/div><div class = \"text-block\">                    resultSource, analysisDate),<\/div><div class = \"text-block\">            sheetName=\"Genome Data\", row.names=FALSE);<\/div><div class = \"text-block\">write.xlsx2(as.data.frame(MT.dds.tbl),<\/div><div class = \"text-block\">            sprintf(\"DE_%s_VST_%s_%s.xlsx\",<\/div><div class = \"text-block\">                    if(l2FCShrink){\"shrunk\"} else {\"orig\"},<\/div><div class = \"text-block\">                    resultSource, analysisDate),<\/div><div class = \"text-block\">            sheetName=\"MT Data\", append=TRUE, row.names=FALSE);<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#FFED92","critical":null,"critical_id":null,"duration":0},{"id":826786,"guid":"85987A20F01611E99F55B7FEAD98ED34","previous_id":826785,"previous_guid":"79E665C0F01611E99F55B7FEAD98ED34","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"209DE563506545B1B61240A5D72C8A32","order_id":1,"type_id":6,"title":"Section","source":{"title":"Excel Worksheet Output"}},{"id":1054724,"guid":"B706C008154F418A8C7F1711FC011A77","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Add worksheets for differentially-expressed pairs:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for(rn in resultList){<\/div><div class = \"text-block\">    print(rn);<\/div><div class = \"text-block\">    if(rn[1] == \"Experiment\"){<\/div><div class = \"text-block\">        next;<\/div><div class = \"text-block\">    }<\/div><div class = \"text-block\">    sheetName <- sprintf(\"%s; %s vs %s\", rn[1], rn[2], rn[3]);<\/div><div class = \"text-block\">    meta.df <- meta.df[order(meta.df$Line, meta.df$Replicate),];<\/div><div class = \"text-block\">    cnames <- sub(\"^ +\",\"\",as.character(meta.df$Label[meta.df[[rn[1]]] %in% rn[2:3]]));<\/div><div class = \"text-block\">    cnames <- c(paste0(\"raw.\",cnames), paste0(\"adj.\",cnames));<\/div><div class = \"text-block\">    rn.label <- paste(rn, collapse=\"-\");<\/div><div class = \"text-block\">    res.tbl <- filtered.dds.tbl[,c(colnames(filtered.dds.tbl)[c(6,7,8)],<\/div><div class = \"text-block\">                                   cnames,paste0(c(\"L2FC.\",\"pval.\", \"padj.\"), rn.label))];<\/div><div class = \"text-block\">    res.tbl <- res.tbl[res.tbl[[paste0(\"padj.\", rn.label)]] <= 0.1,];<\/div><div class = \"text-block\">    res.tbl <- res.tbl[order(-res.tbl[[paste0(\"L2FC.\", rn.label)]]),];<\/div><div class = \"text-block\">    write.xlsx2(as.data.frame(res.tbl),<\/div><div class = \"text-block\">                sprintf(\"DE_%s_VST_%s_%s.xlsx\",<\/div><div class = \"text-block\">                        if(l2FCShrink){\"shrunk\"} else {\"orig\"},<\/div><div class = \"text-block\">                        resultSource, analysisDate),<\/div><div class = \"text-block\">               sheetName=sheetName, append=TRUE, row.names=FALSE);<\/div><div class = \"text-block\">}<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#FFED92","critical":null,"critical_id":null,"duration":0}],"document":null,"materials":[],"description":"<div class = \"text-blocks\"><div class = \"text-block\">Differential expression analysis of transcript count tables using DESeq2<\/div><\/div>","changed_on":1571232720}