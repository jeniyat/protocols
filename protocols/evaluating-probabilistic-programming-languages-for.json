{"uri":"evaluating-probabilistic-programming-languages-for-u79ezr6","version_id":"0","protocol_name":"Evaluating probabilistic programming languages for simulating quantum correlations","protocol_name_html":"Evaluating probabilistic programming languages for simulating quantum correlations","is_retracted":"0","is_prepublished":"0","can_edit":"0","parent_id":null,"api_version":"1","is_new_mode":"0","last_modified":"1541058960","type_id":"1","link":null,"fork_id":"","public_fork_note":null,"number_of_steps":"4","has_versions":"0","first_published_date":null,"publish_date":"2018-11-01 07:56:00","documents":null,"have_protocol_in_step":"0","is_protocol_in_step":"0","vendor_name":"Contributed by users","vendor_link":"https:\/\/www.protocols.io","vendor_logo":"\/img\/vendors\/1.png","mod_mins":"9","mod_secs":"45","description":"","is_bookmarked":"0","can_reassign":"1","before_start":null,"has_guidelines":"0","materials":[],"materials_text":null,"warning":null,"version_class":"17377","public":"1","is_owner":"1","is_original_owner":"1","created_on":"1541057564","protocol_affiliation":"Co-Author","affiliation":"QUT","doi":"dx.doi.org\/10.17504\/protocols.io.u79ezr6","doi_status":"2","changed_fork_steps":null,"profile_url":"AbdulObeid-w2t27443r2x2","protocol_img":"https:\/\/www.protocols.io\/img\/default_protocol.png","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/9hz3vzn.jpg","full_name":"Abdul Obeid","created_by":"Abdul Obeid","private_link":"026CB018D3F8A1A6B3102D6F5304C390","original_img":"1","username":"abdul-obeid","retraction_reason":null,"plos_id":null,"manuscript_citation":null,"journal_name":null,"journal_link":null,"is_donations_disabled":"0","is_donations_disabled_by_user":"9","item_record_id":368334,"fork_info":[],"compare_forks":[],"protocols":[],"groups":[],"number_of_shared_runs":[],"ownership_history":[],"keywords":"","transfer_to_user":[],"sub_transfer":false,"is_transfer_pending":false,"number_of_bookmarks":"0","collections":[],"tags":[],"archived":0,"sub_authors":[],"sub_protocols_number":0,"can_edit_shared":0,"shared_access":null,"shared_runs":[],"is_shared_run":0,"is_shared":1,"show_comparison":false,"banner":null,"contact_badges":[{"badge_id":"2","badge_image":"\/img\/badges\/bronze.svg","badge_description":"Author"},{"badge_id":"6","badge_image":"\/img\/badges\/socialbutterfly.svg","badge_description":"Social butterfly"}],"number_of_comments":1,"is_locked":0,"is_locked_by":false,"authors":"Abdul Obeid,Peter WIttek,Peter D. Bruza","authors_list":[{"name":"Abdul Obeid","affiliation":"Co-Author","username":"abdul-obeid","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/9hz3vzn.jpg"},{"name":"Peter WIttek","affiliation":"Co-Author","username":null,"profile_image":null},{"name":"Peter D. Bruza","affiliation":"Co-Author","username":null,"profile_image":null}],"user":{"profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/9hz3vzn.jpg","username":"abdul-obeid","full_name":"Abdul Obeid","created_by":"Abdul Obeid"},"access":{"can_view":"1","can_remove":"0","can_add":"0","can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":"0","can_move":"1","can_transfer":"1","can_download":"1","is_locked":"0"},"is_contact_suspended":0,"guidelines":null,"status_id":"2","is_research":"1","status_info":"We are still developing and optimizing this protocol","steps":[{"id":"678568","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"596FBF20DDA811E89F6C0D61BFDD4A10","previous_guid":null,"data":"{\"blocks\":[{\"key\":\"cgk89\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"50l\",\"text\":\"Navigate to the folder in which you would like to conduct the experimentation.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"enp5g\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"bvtcd\",\"text\":\"Then open your terminal application:\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"2v44l\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"1lpte\",\"text\":\" \",\"type\":\"atomic\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":0,\"length\":1,\"key\":0}],\"data\":[]},{\"key\":\"bvsas\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"4q5hk\",\"text\":\" \",\"type\":\"atomic\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":0,\"length\":1,\"key\":1}],\"data\":[]},{\"key\":\"1ljsq\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"440is\",\"text\":\" \",\"type\":\"atomic\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":0,\"length\":1,\"key\":2}],\"data\":[]},{\"key\":\"77pum\",\"text\":\"Then create a new file entitled \\\"pymc3-main.py\\\", and populate it with the following text:\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"2dkg1\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"5tc8t\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"1jjiq\",\"text\":\" \",\"type\":\"atomic\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":0,\"length\":1,\"key\":3}],\"data\":[]},{\"key\":\"ddapv\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"est90\",\"text\":\"Then create a new file entitled \\\"pyro-main.py\\\", and populate it with the following text:\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"6jkci\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"3h2eu\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"f3k7m\",\"text\":\" \",\"type\":\"atomic\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":0,\"length\":1,\"key\":4}],\"data\":[]},{\"key\":\"dosp3\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"nodr\",\"text\":\"Then create a new file entitled \\\"turing-main.jl\\\", and populate it with the following text:\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"bqn75\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"2mfam\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"7m44g\",\"text\":\" \",\"type\":\"atomic\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":0,\"length\":1,\"key\":5}],\"data\":[]},{\"key\":\"90ni0\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"4f7b0\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]}],\"entityMap\":[{\"type\":\"software\",\"mutability\":\"IMMUTABLE\",\"data\":{\"id\":480,\"guid\":\"6B0325A0DDA911E89F6C0D61BFDD4A10\",\"align\":null,\"name\":\"Terminal\",\"version\":\"\",\"developer\":\"Apple\",\"repository\":\"\",\"link\":\"\",\"os_name\":\"Mac OS X\",\"os_version\":\"\",\"can_edit\":1,\"step_guid\":\"596FBF20DDA811E89F6C0D61BFDD4A10\"}},{\"type\":\"command\",\"mutability\":\"IMMUTABLE\",\"data\":{\"id\":5079,\"guid\":\"C022A3E0DDA811E89F6C0D61BFDD4A10\",\"align\":null,\"name\":\"virtualenv env\",\"description\":\"Create a virtual environment to house the required packages.\",\"os_name\":\"\",\"os_version\":\"\",\"can_edit\":true,\"step_guid\":\"596FBF20DDA811E89F6C0D61BFDD4A10\",\"command\":\"Create a virtual environment to house the required packages.\"}},{\"type\":\"command\",\"mutability\":\"IMMUTABLE\",\"data\":{\"id\":5080,\"guid\":\"243D9FB0DDA911E89F6C0D61BFDD4A10\",\"align\":null,\"name\":\"source env\\\/bin\\\/activate\",\"description\":\"Activate the environment\",\"os_name\":\"\",\"os_version\":\"\",\"can_edit\":true,\"step_guid\":\"596FBF20DDA811E89F6C0D61BFDD4A10\",\"command\":\"Activate the environment\"}},{\"type\":\"command\",\"mutability\":\"IMMUTABLE\",\"data\":{\"id\":5081,\"guid\":\"813B0360DDA911E89F6C0D61BFDD4A10\",\"align\":null,\"name\":\"from numpy import zeros, array, fliplr, sum\\nfrom itertools import product\\nimport pymc3 as pm\\nimport time\\n\\n\\ndef get_vertex(a, b, x, y):\\n   return ((x*8)+(y*4))+(b+(a*2))\\n\\ndef get_hyperedges(H, n):\\n   l = []\\n   for idx, e in enumerate(H):\\n       if n in e:\\n           l.append(idx)\\n   return l\\n\\ndef foulis_randall_product():\\n   fr_edges = []\\n   H = [   [[[0, 0], [1, 0]], [[0, 1], [1, 1]]], \\n           [[[0, 0], [1, 0]], [[0, 1], [1, 1]]]]\\n   for edge_a in H[0]:\\n       for edge_b in H[1]:\\n           fr_edge = []\\n           for vertex_a in edge_a:\\n               for vertex_b in edge_b:\\n                   fr_edge.append([   \\n                       vertex_a[0], vertex_b[0], \\n                       vertex_a[1], vertex_b[1]])\\n           fr_edges.append(fr_edge)\\n   for mc in range(0,2):\\n       mc_i = abs(1-mc)\\n       for edge in H[mc]:\\n           for j in range(0,2):\\n               fr_edge = []\\n               for i in range(0, len(edge)):\\n                   edge_b = H[mc_i][i]\\n                   vertex_a = edge[abs(i-j)]\\n                   vertex_b = edge_b[0]\\n                   vertex_c = edge_b[1]\\n                   vertices_a = [\\n                       vertex_a[0], vertex_b[0], \\n                       vertex_a[1], vertex_b[1]]\\n                   vertices_b = [\\n                       vertex_a[0], vertex_c[0], \\n                       vertex_a[1], vertex_c[1]]\\n                   fr_edge.append([\\n                       vertices_a[mc], vertices_a[mc_i], \\n                       vertices_a[mc+2], vertices_a[mc_i+2]]\\n                       )\\n                   fr_edge.append([\\n                       vertices_b[mc], vertices_b[mc_i], \\n                       vertices_b[mc+2], vertices_b[mc_i+2]])\\n               fr_edges.append(fr_edge)\\n   return fr_edges\\n\\ndef generate_global_distribution(constraints,N):\\n   hyperedges = foulis_randall_product()\\n   hyperedges_tallies = zeros(12)\\n   global_distribution = zeros(16)\\n   while sum(global_distribution) < N:\\n       with pm.Model():\\n           pm.Uniform('C',0.0,1.0)\\n           pm.Bernoulli('A',0.5)\\n           pm.Bernoulli('B',0.5)\\n           pm.Bernoulli('X',0.5)\\n           pm.Bernoulli('Y',0.5)\\n           S = pm.sample(N,tune=0, step=pm.Metropolis())\\n           c = S.get_values('C')\\n           a = S.get_values('A')\\n           b = S.get_values('B')\\n           x = S.get_values('X')\\n           y = S.get_values('Y')\\n       for i in range(0, N):\\n           if (c[i] < constraints[x[i]][y[i]][a[i],b[i]]):\\n               for edge in get_hyperedges(hyperedges, \\n                   [a[i], b[i], x[i], y[i]]):\\n                   hyperedges_tallies[edge] += 1\\n               global_distribution[\\n                   get_vertex(a[i], b[i], x[i], y[i])] += 1\\n   z = [0,1]\\n   for a, b, x, y in product(z,z,z,z):\\n       summed_tally = (sum(hyperedges_tallies[e] \\n           for e in get_hyperedges(hyperedges, [a, b, x, y])))\\n       global_distribution[get_vertex(a, b, x, y)] \\\/= summed_tally\\n   global_distribution *= 3\\n   return global_distribution\\n\\n# execution\\n\\ndef accuracy_time(N):\\n    constraints = [[ array([[0.5, 0], [0., 0.5]]), array([[0.5, 0], [0., 0.5]]) ],[ array([[0.5, 0], [0., 0.5]]), array([[0, 0.5], [0.5, 0.]]) ]]\\n    start = time.time()\\n    Q = generate_global_distribution(constraints,N)\\n    end = time.time()\\n    p = Q\\n    A11 = (2 * (p[0] + p[1])) - 1\\n    A12 = (2 * (p[4] + p[5])) - 1\\n    A21 = (2 * (p[8] + p[9])) - 1\\n    A22 = (2 * (p[12] + p[13])) - 1\\n    B11 = (2 * (p[0] + p[2])) - 1\\n    B12 = (2 * (p[8] + p[10])) - 1\\n    B21 = (2 * (p[4] + p[6])) - 1\\n    B22 = (2 * (p[12] + p[14])) - 1\\n    delta = (abs(A11 - A12) + abs(A21 - A22) + abs(B11 - B21) + abs(B12 - B22))\\\/2\\n    A11B11 = (p[0] + p[3]) - (p[1] + p[2])\\n    A12B12 = (p[4] + p[7]) - (p[5] + p[6])\\n    A21B21 = (p[8] + p[11]) - (p[9] + p[10])\\n    A22B22 = (p[12] + p[15]) - (p[13] + p[14])\\n    print(\\\"Time:\\\")\\n    print(end - start)\\n\\n    print(\\\"Normalization in contexts: \\\", [p[0]+p[1]+p[6]+p[7]])\\n    print(\\\"Normalization in contexts: \\\", [p[2]+p[3]+p[4]+p[5]])\\n    print(\\\"Normalization in contexts: \\\", [p[8]+p[9]+p[14]+p[15]])\\n    print(\\\"Normalization in contexts: \\\", [p[10]+p[11]+p[12]+p[13]])\\n\\n    print(\\\"delta: \\\", delta)\\n    print(\\\"Potential violations: \\\")\\n    print(abs(A11B11 + A12B12 + A21B21 - A22B22), 2 * (1 + delta))\\n    print(abs(A11B11 + A12B12 - A21B21 + A22B22), 2 * (1 + delta))\\n    print(abs(A11B11 - A12B12 + A21B21 + A22B22), 2 * (1 + delta))\\n    print(abs(-A11B11 + A12B12 + A21B21 + A22B22), 2 * (1 + delta))\\n\\n\\naccuracy_time(1000)\\naccuracy_time(2000)\\naccuracy_time(3000)\\naccuracy_time(4000)\\naccuracy_time(5000)\\naccuracy_time(6000)\\naccuracy_time(7000)\\naccuracy_time(8000)\\naccuracy_time(9000)\\naccuracy_time(10000)\\naccuracy_time(15000)\\naccuracy_time(20000)\\naccuracy_time(25000)\\naccuracy_time(30000)\\naccuracy_time(35000)\\naccuracy_time(40000)\\naccuracy_time(45000)\\naccuracy_time(50000)\\naccuracy_time(55000)\\naccuracy_time(60000)\\naccuracy_time(65000)\\naccuracy_time(70000)\\naccuracy_time(75000)\\naccuracy_time(80000)\\naccuracy_time(85000)\\naccuracy_time(90000)\\naccuracy_time(95000)\\naccuracy_time(100000)\",\"description\":\"\",\"os_name\":\"\",\"os_version\":\"\",\"can_edit\":true,\"step_guid\":\"596FBF20DDA811E89F6C0D61BFDD4A10\",\"command\":\"\"}},{\"type\":\"command\",\"mutability\":\"IMMUTABLE\",\"data\":{\"id\":5082,\"guid\":\"989B0D70DDA911E89F6C0D61BFDD4A10\",\"align\":null,\"name\":\"from pyro import sample\\nimport torch\\nfrom numpy import zeros, array, fliplr, sum\\nfrom functools import reduce\\nfrom itertools import product\\nfrom pyro.distributions import Bernoulli, Uniform\\nimport pprint\\nimport sys\\nimport time\\n\\ndef foulis_randall_product():\\n    fr_edges = []\\n    H = [ [[[0,0],[1,0]],[[0,1],[1,1]]], [[[0,0],[1,0]],[[0,1],\\n                                                         [1,1]]] ]\\n    for edge_a in H[0]:\\n        for edge_b in H[1]:\\n            fr_edge = []\\n            for vertex_a in edge_a:\\n                for vertex_b in edge_b:\\n                    fr_edge.append([ vertex_a[0], vertex_b[0], vertex_a[1], vertex_b[1]])\\n            fr_edges.append(fr_edge)\\n    for mc in range(0,2):\\n        mc_i = abs(1-mc)\\n        for edge in H[mc]:\\n            for j in range(0,2):\\n                fr_edge = []\\n                for i in range(0, len(edge)):\\n                    edge_b = H[mc_i][i]\\n                    vertex_a = edge[abs(i-j)]\\n                    vertex_b = edge_b[0]\\n                    vertex_c = edge_b[1]\\n                    vertices_a = [\\n                        vertex_a[0], vertex_b[0], vertex_a[1], vertex_b[1]\\n                    ]\\n                    vertices_b = [\\n                        vertex_a[0], vertex_c[0], vertex_a[1], vertex_c[1]\\n                    ]\\n                    fr_edge.append([ \\n                        vertices_a[mc], vertices_a[mc_i], vertices_a[mc+2], vertices_a[mc_i+2]\\n                    ])\\n                    fr_edge.append([ \\n                        vertices_b[mc], vertices_b[mc_i], vertices_b[mc+2], vertices_b[mc_i+2]\\n                    ])\\n                fr_edges.append(fr_edge)\\n    return fr_edges\\n\\ndef variable(v):\\n    return torch.autograd.Variable(torch.Tensor([v]))\\n\\ndef get_vertex(a, b, x, y):\\n   return ((x*8)+(y*4))+(b+(a*2))\\n\\ndef get_hyperedges(H, n):\\n   l = []\\n   for idx, e in enumerate(H):\\n       if n in e:\\n           l.append(idx)\\n   return l\\n\\n\\ndef generate_global_distribution(constraints,N):\\n    hyperedges = foulis_randall_product()\\n    hyperedges_tallies = zeros(12)\\n    global_distribution = zeros(16)\\n    while sum(global_distribution) < N:\\n        a = int(sample('A', Bernoulli(variable(0.5))))\\n        b = int(sample('B', Bernoulli(variable(0.5))))\\n        x = int(sample('X', Bernoulli(variable(0.5))))\\n        y = int(sample('Y', Bernoulli(variable(0.5))))\\n        value = float(sample('C', Uniform(variable(0.0), variable(1.0))))\\n        if (value < constraints[x][y][a,b]):\\n            for edge in get_hyperedges(hyperedges, [a, b, x, y]):\\n                hyperedges_tallies[edge] += 1\\n            global_distribution[get_vertex(a, b, x, y)] += 1\\n    for a, b, x, y in product(range(2), range(2), range(2), range(2)):\\n        summed_tally = (sum(hyperedges_tallies[e] for e in get_hyperedges(hyperedges, [a, b, x, y])))\\n        global_distribution[get_vertex(a, b, x, y)] \\\/= summed_tally\\n    global_distribution *= 3\\n    return global_distribution\\n\\n\\n\\n\\n\\n\\n\\n\\ndef accuracy_time(N):\\n    print(\\\"Iterations %s\\\" % (N))\\n    constraints = [[ array([[0.5, 0], [0., 0.5]]), array([[0.5, 0], [0., 0.5]]) ],[ array([[0.5, 0], [0., 0.5]]), array([[0, 0.5], [0.5, 0.]]) ]]\\n    start = time.time()\\n    Q = generate_global_distribution(constraints,N)\\n    end = time.time()\\n    p = Q\\n    A11 = (2 * (p[0] + p[1])) - 1\\n    A12 = (2 * (p[4] + p[5])) - 1\\n    A21 = (2 * (p[8] + p[9])) - 1\\n    A22 = (2 * (p[12] + p[13])) - 1\\n    B11 = (2 * (p[0] + p[2])) - 1\\n    B12 = (2 * (p[8] + p[10])) - 1\\n    B21 = (2 * (p[4] + p[6])) - 1\\n    B22 = (2 * (p[12] + p[14])) - 1\\n    delta = (abs(A11 - A12) + abs(A21 - A22) + abs(B11 - B21) + abs(B12 - B22))\\\/2\\n    A11B11 = (p[0] + p[3]) - (p[1] + p[2])\\n    A12B12 = (p[4] + p[7]) - (p[5] + p[6])\\n    A21B21 = (p[8] + p[11]) - (p[9] + p[10])\\n    A22B22 = (p[12] + p[15]) - (p[13] + p[14])\\n    print(\\\"Time:\\\")\\n    print(end - start)\\n\\n    print(\\\"Normalization in contexts: \\\", [p[0]+p[1]+p[6]+p[7]])\\n    print(\\\"Normalization in contexts: \\\", [p[2]+p[3]+p[4]+p[5]])\\n    print(\\\"Normalization in contexts: \\\", [p[8]+p[9]+p[14]+p[15]])\\n    print(\\\"Normalization in contexts: \\\", [p[10]+p[11]+p[12]+p[13]])\\n\\n    print(\\\"delta: \\\", delta)\\n    print(\\\"Potential violations: \\\")\\n    print(abs(A11B11 + A12B12 + A21B21 - A22B22), 2 * (1 + delta))\\n    print(abs(A11B11 + A12B12 - A21B21 + A22B22), 2 * (1 + delta))\\n    print(abs(A11B11 - A12B12 + A21B21 + A22B22), 2 * (1 + delta))\\n    print(abs(-A11B11 + A12B12 + A21B21 + A22B22), 2 * (1 + delta))\\n\\n\\naccuracy_time(1000)\\naccuracy_time(2000)\\naccuracy_time(3000)\\naccuracy_time(4000)\\naccuracy_time(5000)\\naccuracy_time(6000)\\naccuracy_time(7000)\\naccuracy_time(8000)\\naccuracy_time(9000)\\naccuracy_time(10000)\\naccuracy_time(15000)\\naccuracy_time(20000)\\naccuracy_time(25000)\\naccuracy_time(30000)\\naccuracy_time(35000)\\naccuracy_time(40000)\\naccuracy_time(45000)\\naccuracy_time(50000)\\naccuracy_time(55000)\\naccuracy_time(60000)\\naccuracy_time(65000)\\naccuracy_time(70000)\\naccuracy_time(75000)\\naccuracy_time(80000)\\naccuracy_time(85000)\\naccuracy_time(90000)\\naccuracy_time(95000)\\naccuracy_time(100000)\",\"description\":\"\",\"os_name\":\"\",\"os_version\":\"\",\"can_edit\":true,\"step_guid\":\"596FBF20DDA811E89F6C0D61BFDD4A10\",\"command\":\"\"}},{\"type\":\"command\",\"mutability\":\"IMMUTABLE\",\"data\":{\"id\":5083,\"guid\":\"AF2F6310DDA911E89F6C0D61BFDD4A10\",\"align\":null,\"name\":\"using Turing\\nusing Distributions\\n\\n\\nfunction foulis_randall_product()\\n\\tfr_edges = Array{Array{Array{Float64}}}(0)\\n\\tH = [\\t[[[0.0,0.0],[1.0,0.0]],[[0.0,1.0],[1.0,1.0]]],\\n\\t\\t\\t[[[0.0,0.0],[1.0,0.0]],[[0.0,1.0],[1.0,1.0]]]\\t]\\n\\tfor i = 1:size(H[1])[1]\\n\\t\\tfor j = 1:size(H[2])[1]\\n\\t\\t\\tfr_edge = Array{Array{Float64}}(0)\\n\\t\\t\\tfor k = 1:size(H[1][i])[1]\\n\\t\\t\\t\\tfor l = 1:size(H[1][j])[1]\\n\\t\\t\\t\\t\\tappend!( fr_edge, \\n\\t\\t\\t\\t\\t\\t[[ \\tH[1][i][k][1] , H[2][j][l][1] , \\n\\t\\t\\t\\t\\t\\t\\tH[1][i][k][2] , H[2][j][l][2] ]] )\\n\\t\\t\\t\\tend\\n\\t\\t\\tend\\n\\t\\t\\tappend!( fr_edges, [ fr_edge ] )\\n\\t\\tend\\n\\tend\\n\\tfor mc = 1:2\\n\\t\\tmc_i = abs(3-mc)\\n\\t\\tfor k = 1:size(H[mc])[1]\\n\\t\\t\\tfor j = 1:2\\n\\t\\t\\t\\tfr_edge = Array{Array{Float64}}(0)\\n\\t\\t\\t\\tfor i = 1:size(H[mc][k])[1]\\n\\t\\t\\t\\t\\tedge_b = H[mc_i][i]\\n\\t\\t\\t\\t\\tvertex_a = H[mc][k][abs(i-j)+1]\\n\\t\\t\\t\\t\\tvertex_b = edge_b[1]\\n                    vertex_c = edge_b[2]\\n                    vertices_a = [\\tvertex_a[1], vertex_b[1], \\n                    \\t\\t\\t\\tvertex_a[2], vertex_b[2]]\\n                    vertices_b = [\\tvertex_a[1], vertex_c[1], \\n                    \\t\\t\\t\\tvertex_a[2], vertex_c[2]]\\n                    this_edge_b = Array{Float64}(0)\\n                    append!( fr_edge, [[ \\n                    \\tvertices_a[mc], \\tvertices_a[mc_i], \\n                    \\tvertices_a[mc+2], \\tvertices_a[mc_i+2] ]] )\\n                    append!( fr_edge, [[ \\n                    \\tvertices_b[mc], \\tvertices_b[mc_i], \\n                    \\tvertices_b[mc+2], \\tvertices_b[mc_i+2] ]] )\\n\\t\\t\\t\\tend\\n\\t\\t\\t\\tappend!(fr_edges, [ fr_edge ])\\n\\t\\t\\tend\\n\\t\\tend\\n\\tend\\n\\tfr_edges\\nend\\n\\nfunction get_vertex(a,b,x,y)\\n\\t((x*8)+(y*4))+(b+(a*2))+1\\nend\\n\\nfunction float(n)\\n\\tconvert(Float64,n)\\nend\\n\\nfunction get_hyperedges(H, n)\\n\\tl = []\\n\\tfor i = 1:size(H)[1]\\n\\t    if any(x->x==n, H[i])\\n\\t        append!(l,i)\\n\\t    end\\n\\tend\\n\\tl\\nend\\n\\n@model mdl() = begin\\n\\tz ~ Beta(1,1)\\n\\ta ~ Bernoulli(0.5)\\n\\tb ~ Bernoulli(0.5)\\n\\tx ~ Bernoulli(0.5)\\n\\ty ~ Bernoulli(0.5)\\n\\tc ~ Uniform(0.0, 1.0)\\nend\\n\\nfunction generate_global_distribution(constraints,N)\\n\\thyperedges = foulis_randall_product()\\n\\thyperedges_tallies = zeros(12)\\n\\tglobal_distribution = zeros(16)\\n\\twhile sum(global_distribution) < N\\n\\t\\tr = sample(mdl(), SMC(N))\\n\\t\\ta = r[:a]\\n\\t\\tb = r[:b]\\n\\t\\tx = r[:x]\\n\\t\\ty = r[:y]\\n\\t\\tc = r[:c]\\n\\t\\tfor i = 1:N\\n\\t\\t\\tif (c[i] < constraints[x[i]+1][y[i]+1][a[i]+1][b[i]+1])\\n\\t\\t\\t\\tI = [convert(Float64,a[i]), convert(Float64,b[i]),convert(Float64,x[i]), convert(Float64,y[i])]\\n\\t\\t\\t\\tassociated_hyperedges = get_hyperedges(hyperedges, I)\\n\\t\\t\\t\\tfor j = 1:size(associated_hyperedges)[1]\\n\\t\\t\\t\\t\\thyperedges_tallies[associated_hyperedges[j]] += 1\\n\\t\\t\\t\\tend\\n\\t\\t\\t\\tglobal_distribution[get_vertex(a[i], b[i], x[i], y[i])] += 1\\n\\t\\t\\tend\\n\\t\\tend\\n\\tend\\n\\tfor a = 0:1, b = 0:1, x = 0:1, y = 0:1\\n\\t\\tsummed_amount = 0\\n\\t\\tI = [ convert(Float64,a), convert(Float64,b), convert(Float64,x), convert(Float64,y)]\\n\\t\\tassociated_hyperedges = get_hyperedges(hyperedges, I)\\n\\t\\tfor edge_index = 1:size(associated_hyperedges)[1]\\n\\t\\t\\tsummed_amount += hyperedges_tallies[edge_index]\\n\\t\\tend\\n\\t\\tglobal_distribution[get_vertex(a, b, x, y)] \\\/= summed_amount\\n\\tend\\n\\tglobal_distribution .* 3\\nend\\n\\nconstraints = [[ [[0.5, 0.0], [0.0, 0.5]], [[0.5, 0.0], [0.0, 0.5]] ], [ [[0.5, 0.0], [0.0, 0.5]], [[0.0, 0.5], [0.5, 0.0]] ]]\\n\\n\\n\\n\\nfunction accuracy_time(N)\\n    constraints = [[ [[0.5, 0.0], [0.0, 0.5]], [[0.5, 0.0], [0.0, 0.5]] ], [ [[0.5, 0.0], [0.0, 0.5]], [[0.0, 0.5], [0.5, 0.0]] ]]\\n\\ttic()\\n    Q = generate_global_distribution(constraints,N)\\n    toc()\\n    p = Q\\n    A11 = (2 * (p[1] + p[2])) - 1\\n    A12 = (2 * (p[5] + p[6])) - 1\\n    A21 = (2 * (p[9] + p[10])) - 1\\n    A22 = (2 * (p[13] + p[14])) - 1\\n    B11 = (2 * (p[1] + p[3])) - 1\\n    B12 = (2 * (p[9] + p[11])) - 1\\n    B21 = (2 * (p[5] + p[7])) - 1\\n    B22 = (2 * (p[13] + p[15])) - 1\\n    delta = (abs(A11 - A12) + abs(A21 - A22) + abs(B11 - B21) + abs(B12 - B22))\\\/2\\n    A11B11 = (p[1] + p[4]) - (p[2] + p[3])\\n    A12B12 = (p[5] + p[8]) - (p[6] + p[7])\\n    A21B21 = (p[9] + p[12]) - (p[10] + p[11])\\n    A22B22 = (p[13] + p[16]) - (p[14] + p[15])\\n\\n    println(p[1]+p[2]+p[7]+p[8])\\n    println(p[3]+p[4]+p[5]+p[6])\\n    println(p[9]+p[10]+p[15]+p[16])\\n    println(p[11]+p[12]+p[13]+p[14])\\n\\n    a = abs(1-(p[1]+p[2]+p[7]+p[8]))\\n    b = abs(1-(p[3]+p[4]+p[5]+p[6]))\\n    c = abs(1-(p[9]+p[10]+p[15]+p[16]))\\n    d = abs(1-(p[11]+p[12]+p[13]+p[14]))\\n    println(delta)\\n    println(2 * (1 + delta))\\n    print(abs(A11B11 + A12B12 + A21B21 - A22B22))\\n    print(abs(A11B11 + A12B12 - A21B21 + A22B22))\\n    print(abs(A11B11 - A12B12 + A21B21 + A22B22))\\n    print(abs(-A11B11 + A12B12 + A21B21 + A22B22))\\nend\\n\\n\\n\\naccuracy_time(1000)\\naccuracy_time(2000)\\naccuracy_time(3000)\\naccuracy_time(4000)\\naccuracy_time(5000)\\naccuracy_time(6000)\\naccuracy_time(7000)\\naccuracy_time(8000)\\naccuracy_time(9000)\\naccuracy_time(10000)\\naccuracy_time(15000)\\naccuracy_time(20000)\\naccuracy_time(25000)\\naccuracy_time(30000)\\naccuracy_time(35000)\\naccuracy_time(40000)\\naccuracy_time(45000)\\naccuracy_time(50000)\\naccuracy_time(55000)\\naccuracy_time(60000)\\naccuracy_time(65000)\\naccuracy_time(70000)\\naccuracy_time(75000)\\naccuracy_time(80000)\\naccuracy_time(85000)\\naccuracy_time(90000)\\naccuracy_time(95000)\\naccuracy_time(100000)\",\"description\":\"\",\"os_name\":\"\",\"os_version\":\"\",\"can_edit\":true,\"step_guid\":\"596FBF20DDA811E89F6C0D61BFDD4A10\",\"command\":\"\"}}],\"guid\":\"596FBF20DDA811E89F6C0D61BFDD4A10\",\"id\":678568,\"previous_guid\":null,\"section\":\"Set up of environment required for PyMC3 & Pyro (MAC OS X)\"}","section":"Set up of environment required for PyMC3, Pyro & Turing.jl (MAC OS X)","case_id":null,"section_color":"#A492FF","protocol_id":"17377","previous_id":"0","last_modified":"1541058237"},{"id":"678569","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"D57A6560DDA911E89F6C0D61BFDD4A10","previous_guid":"596FBF20DDA811E89F6C0D61BFDD4A10","data":"{\"blocks\":[{\"key\":\"2rur7\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"5vk2o\",\"text\":\"To run the file \\\"pymc3-main.py\\\", you will firstly need to install PyMC3 via the following page:\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"fhd24\",\"text\":\"https:\\\/\\\/docs.pymc.io\\\/\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":0,\"length\":21,\"key\":0}],\"data\":[]},{\"key\":\"1gc0g\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"5v2s3\",\"text\":\"Then run the following command from the terminal:\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"4a906\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"ftten\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"44eoj\",\"text\":\" \",\"type\":\"atomic\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":0,\"length\":1,\"key\":1}],\"data\":[]},{\"key\":\"fent8\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"dcj71\",\"text\":\"To run the file \\\"pyro-main.py\\\", you will firstly need to install Pyro via the following page:\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"c8vo4\",\"text\":\"http:\\\/\\\/pyro.ai\\\/\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":0,\"length\":15,\"key\":2}],\"data\":[]},{\"key\":\"a4227\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"9eaos\",\"text\":\"Then run the following command from the terminal:\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"5g8oh\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"8v20v\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"a25t\",\"text\":\" \",\"type\":\"atomic\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":0,\"length\":1,\"key\":3}],\"data\":[]},{\"key\":\"6ra8r\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"3409g\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"3n5s6\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"amml5\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]}],\"entityMap\":[{\"type\":\"link\",\"mutability\":\"MUTABLE\",\"data\":{\"url\":\"https:\\\/\\\/docs.pymc.io\\\/\"}},{\"type\":\"command\",\"mutability\":\"IMMUTABLE\",\"data\":{\"id\":5084,\"guid\":\"203EB740DDAA11E89F6C0D61BFDD4A10\",\"align\":null,\"name\":\"python \\\"pymc3-main.py\\\"\",\"description\":\"\",\"os_name\":\"\",\"os_version\":\"\",\"can_edit\":true,\"step_guid\":\"D57A6560DDA911E89F6C0D61BFDD4A10\",\"command\":\"\"}},{\"type\":\"link\",\"mutability\":\"MUTABLE\",\"data\":{\"url\":\"http:\\\/\\\/pyro.ai\\\/\"}},{\"type\":\"command\",\"mutability\":\"IMMUTABLE\",\"data\":{\"id\":5085,\"guid\":\"46972710DDAA11E89F6C0D61BFDD4A10\",\"align\":null,\"name\":\"python \\\"pyro-main.py\\\"\",\"description\":\"\",\"os_name\":\"\",\"os_version\":\"\",\"can_edit\":true,\"step_guid\":\"D57A6560DDA911E89F6C0D61BFDD4A10\",\"command\":\"\"}}],\"guid\":\"D57A6560DDA911E89F6C0D61BFDD4A10\",\"id\":678569,\"previous_guid\":\"596FBF20DDA811E89F6C0D61BFDD4A10\",\"section\":\"Running PyMC3 & Pyro\"}","section":"Running PyMC3 & Pyro","case_id":null,"section_color":"#94EBFF","protocol_id":"17377","previous_id":"678568","last_modified":"1541058428"},{"id":"678570","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"55043CC0DDAA11E89F6C0D61BFDD4A10","previous_guid":"D57A6560DDA911E89F6C0D61BFDD4A10","data":"{\"blocks\":[{\"key\":\"63lob\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"ff5t5\",\"text\":\"To run the Turing implementation, you will need to install Julia:\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"1f8el\",\"text\":\"https:\\\/\\\/julialang.org\\\/\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":0,\"length\":22,\"key\":0}],\"data\":[]},{\"key\":\"2ps4s\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"8kihl\",\"text\":\"Then install both the \\\"Distributions\\\" package, and \\\"Turing\\\" package from within the Julia package manager.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"2t2bk\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"aq1c\",\"text\":\"Finally, run the implementation using the following command:\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"fns5u\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"2q5i4\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"9cqml\",\"text\":\" \",\"type\":\"atomic\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":0,\"length\":1,\"key\":1}],\"data\":[]},{\"key\":\"enhmo\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]}],\"entityMap\":[{\"type\":\"link\",\"mutability\":\"MUTABLE\",\"data\":{\"url\":\"https:\\\/\\\/julialang.org\\\/\"}},{\"type\":\"command\",\"mutability\":\"IMMUTABLE\",\"data\":{\"id\":5086,\"guid\":\"80118210DDAA11E89F6C0D61BFDD4A10\",\"align\":null,\"name\":\"julia \\\"turing-main.jl\\\"\",\"description\":\"\",\"os_name\":\"\",\"os_version\":\"\",\"can_edit\":true,\"step_guid\":\"55043CC0DDAA11E89F6C0D61BFDD4A10\",\"command\":\"\"}}],\"guid\":\"55043CC0DDAA11E89F6C0D61BFDD4A10\",\"id\":678570,\"previous_guid\":\"D57A6560DDA911E89F6C0D61BFDD4A10\",\"section\":\"Running Turing.jl\"}","section":"Running Turing.jl","case_id":null,"section_color":"#84CE84","protocol_id":"17377","previous_id":"678569","last_modified":"1541058512"},{"id":"678571","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"86D51350DDAA11E89F6C0D61BFDD4A10","previous_guid":"55043CC0DDAA11E89F6C0D61BFDD4A10","data":"{\"blocks\":[{\"key\":\"5bbhr\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"bg8rh\",\"text\":\"The Figaro implementation will require the following software:\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"4pojl\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"ffnlr\",\"text\":\" \",\"type\":\"atomic\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":0,\"length\":1,\"key\":0}],\"data\":[]},{\"key\":\"5qtlu\",\"text\":\"Create a new project, and add the following jar to your project \\\"figaro_2.11-5.0.0.0-sources.jar\\\" from the Figaro web page: \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"60v75\",\"text\":\"https:\\\/\\\/www.cra.com\\\/work\\\/case-studies\\\/figaro\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":0,\"length\":44,\"key\":1}],\"data\":[]},{\"key\":\"7l112\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]},{\"key\":\"ajcrl\",\"text\":\"Then run the implementation from within the IntelliJ IDEA Community Edition IDE.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":[]}],\"entityMap\":[{\"type\":\"software\",\"mutability\":\"IMMUTABLE\",\"data\":{\"id\":481,\"guid\":\"9C68E8E0DDAA11E89F6C0D61BFDD4A10\",\"align\":null,\"name\":\"IntelliJ IDEA\",\"version\":\"Community Editio\",\"developer\":\"Jetbrains\",\"repository\":\"\",\"link\":\"\",\"os_name\":\"\",\"os_version\":\"\",\"can_edit\":1,\"step_guid\":\"86D51350DDAA11E89F6C0D61BFDD4A10\"}},{\"type\":\"link\",\"mutability\":\"MUTABLE\",\"data\":{\"url\":\"https:\\\/\\\/www.cra.com\\\/work\\\/case-studies\\\/figaro\"}}],\"guid\":\"86D51350DDAA11E89F6C0D61BFDD4A10\",\"id\":678571,\"previous_guid\":\"55043CC0DDAA11E89F6C0D61BFDD4A10\",\"section\":\"Running Figaro\"}","section":"Running Figaro","case_id":null,"section_color":"#FFED92","protocol_id":"17377","previous_id":"678570","last_modified":"1541058769"}]}