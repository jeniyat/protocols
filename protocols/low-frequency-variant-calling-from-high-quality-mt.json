{"uri":"low-frequency-variant-calling-from-high-quality-mt-nfkdbkw","version_id":"0","protocol_name":"Low-frequency variant calling from high-quality mtDNA sequencing data","protocol_name_html":"Low-frequency variant calling from high-quality mtDNA sequencing data","is_prepublished":"0","can_edit":"0","parent_id":null,"api_version":"1","is_new_mode":"0","last_modified":"1524146940","type_id":"1","link":null,"fork_id":"","public_fork_note":"","number_of_steps":"9","has_versions":"0","first_published_date":"1524146940","publish_date":"2018-04-19 14:09:00","documents":null,"have_protocol_in_step":"0","is_protocol_in_step":"0","vendor_name":"Contributed by users","vendor_link":"https:\/\/www.protocols.io","vendor_logo":"\/img\/vendors\/1.png","mod_mins":"-45","mod_secs":"1","description":"<p>High-quality, highly enriched mitochondrial DNA (mtDNA) sample enables detection of extremely low-frequency mtDNA variants. When mtDNA is carefully enriched, fragmented in the presence of EDTA and sequenced with unique dual indices by Illumina HiSeq in paired-end mode, it is possible to reliably detect variants at allele frequencies &lt;0.05 %. To be able to detect variants at every position of the mtDNA genome, 'dual' alignment and variant calling strategy is required.<\/p>","is_bookmarked":"0","can_reassign":"1","before_start":"<p>Ensure that your mtDNA sample used for the sequencing<\/p>\n<p>1) is of high quality and highly enriched from nuclear DNA (nDNA) contamination,<\/p>\n<p>2) 1 mM of EDTA is included into the sonication step of the Illumina library preparation,<\/p>\n<p>3) unique dual indexing is used and reads are sequenced in paired-end mode, and<\/p>\n<p>4) reads are de-multiplexed based on both indices.<\/p>\n<p>\u00a0<\/p>\n<p>Addition of EDTA (or repair enzymes) has been recommended in order to diminish potential oxidative damage or propagation of other damages during library PCR (Costello et al. 2012, Chen et al. 2017). Whereas dual-indexing significantly reduces the possibility of between-sample cross-contamination (Kircher et al. 2012).<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>References<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>Chen, L. et al., 2017.<\/strong> DNA damage is a pervasive cause of sequencing errors, directly confounding variant identification. <em>Science<\/em>, 355, pp.752\u2013756.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Costello, M. et al.<\/strong>, 2013. Discovery and characterization of artifactual mutations in deep coverage targeted capture sequencing data due to oxidative DNA damage during sample preparation. <em>Nucleic Acids Res.<\/em>, 41(6), pp.1\u201312.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Kircher, M., Sawyer, S. &amp; Meyer, M., 2012.<\/strong> Double indexing overcomes inaccuracies in multiplex sequencing on the Illumina platform. <em>Nucleic Acids Res.<\/em>, 40(1), p.e3.<\/p>","has_guidelines":"1","materials":[],"warning":null,"version_class":"10444","public":"1","is_owner":"1","is_original_owner":"1","created_on":"1519580805","protocol_affiliation":"Max Planck Instutute for Biology of Ageing","affiliation":"FIMM, University of Helsinki","doi":"dx.doi.org\/10.17504\/protocols.io.nfkdbkw","doi_status":"2","changed_fork_steps":null,"profile_url":"MaritaA-y2y2c443t2","protocol_img":"https:\/\/www.protocols.io\/img\/default_protocol.png","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/swii3gw.jpg","full_name":"Marita A. Isokallio","created_by":"Marita A. Isokallio","private_link":"2C705AB260156A517CBFE5A39A2174E9","original_img":"1","username":"marita-a-isokallio","is_retracted":"0","retraction_reason":null,"plos_id":null,"manuscript_citation":"<p>Isokallio, M. (2017) <em>The source and fate of mitochondrial DNA mutations using high-sensitivity next-generation sequencing technologies.<\/em> PhD thesis, Universit\u00e4t zu K\u00f6ln.<\/p>\n<p><sub><a href=\"http:\/\/kups.ub.uni-koeln.de\/7941\/\" target=\"_blank\">http:\/\/kups.ub.uni-koeln.de\/7941\/<\/a><\/sub><\/p>","journal_name":null,"is_donations_disabled":"0","is_donations_disabled_by_user":"9","item_record_id":287926,"fork_info":[],"compare_forks":[],"protocols":[],"groups":[{"group_id":"593","group_uri":"stewartlab-mpiage","group_name":"Stewart-Lab MPI-AGE","group_logo":"","requested_uid":null,"request_flag":null,"my_request":"1"}],"number_of_shared_runs":[],"ownership_history":[],"keywords":"mitochondrial DNA, mtDNA, NGS, rare variant detection, low-frequency variant","transfer_to_user":[],"sub_transfer":false,"is_transfer_pending":false,"number_of_bookmarks":"0","collections":[],"tags":[{"tag_id":"157","tag_name":"sequencing"},{"tag_id":"243","tag_name":"NGS"},{"tag_id":"1626","tag_name":"DNA sequencing"},{"tag_id":"1627","tag_name":"next-generation sequencing"},{"tag_id":"1628","tag_name":"Illumina HiSeq"},{"tag_id":"1629","tag_name":"mtDNA-seq"},{"tag_id":"1630","tag_name":"variant calling"},{"tag_id":"1631","tag_name":"mtDNA"}],"archived":0,"sub_authors":[],"sub_protocols_number":0,"can_edit_shared":0,"shared_runs":[],"is_shared_run":0,"is_shared":1,"banner":null,"contact_badges":[{"badge_id":"2","badge_image":"\/img\/badges\/bronze.svg","badge_description":"Author!"},{"badge_id":"6","badge_image":"\/img\/badges\/socialbutterfly.svg","badge_description":"Social butterfly"}],"number_of_comments":0,"is_locked":0,"is_locked_by":false,"authors":"Marita A. Isokallio,James Stewart","authors_list":[{"name":"Marita A. Isokallio","affiliation":"Max Planck Instutute for Biology of Ageing","username":"marita-a-isokallio","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/swii3gw.jpg"},{"name":"James Stewart","affiliation":"Max Planck Instutute for Biology of Ageing","username":"james-stewart","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/swfi3m6.jpg"}],"user":{"profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/swii3gw.jpg","username":"marita-a-isokallio","full_name":"Marita A. Isokallio","created_by":"Marita A. Isokallio"},"access":{"can_view":"1","can_remove":"0","can_add":"0","can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":"1","can_move":"1","can_transfer":"1","can_download":"1","is_locked":"0"},"is_contact_suspended":0,"guidelines":"<p>The unique dual indices require paired-end sequencing and produce R1 and R2 reads. However, to our experience, R2 reads seem to cause more artifactual variant results (mainly GC&gt;TA indicative of oxidative damage). Thus, only use of R1 reads for low-frequency variant detection is recommended.<\/p>\n<p>\u00a0<\/p>\n<p>If 'Before starting' sample quality requirements cannot be met, more stringent variant calling thresholds - namely allele frequency threshold - may be required and extremely low-frequency variant calling is not possible due to the chemical\/biological artifacts present in the sample. Furthermore, it is always advisable to use control samples and confirm the accuracy, preferably in multiple experiments (meaning re-preparation of the libraries from the same case and control samples and sequencing the samples in another sequencing run).<\/p>","status_id":"1","is_research":"1","status_info":"We use this protocol in our group and it is working","steps":[{"id":"610735","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"10FFC135ACD6455191DDCC44921E5E0C","previous_guid":null,"previous_id":"0","last_modified":"1523988599","components":[{"component_id":"1062442","previous_id":0,"original_id":"0","guid":"D3E6D4EA28E54570854C08B4FF736932","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Read trimming","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Read trimming"},"is_project":0},{"component_id":"1062441","previous_id":"1062442","original_id":"0","guid":"3E8DE8963F6B4E71A88DB54DE7963C8D","previous_guid":"D3E6D4EA28E54570854C08B4FF736932","component_type_id":"1","data_id":null,"data":"<p>R1 reads are trimmed for minimum length, minimun base quality and for TruSeq adapter sequences.<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>R1 reads are trimmed for minimum length, minimun base quality and for TruSeq adapter sequences.<\/p>"},"is_project":0},{"component_id":"1062443","previous_id":"1062441","original_id":"0","guid":"0D58300397134770A9BE9E9A53CFC203","previous_guid":"3E8DE8963F6B4E71A88DB54DE7963C8D","component_type_id":"15","data_id":"3500","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"flexbar -n 16 -r \/path\/to\/reads1.fastq.gz -t output_prefix -f i1.8 -j -z GZ -q 28 -m 50 -a \/path\/to\/adapters.txt -ao 10 -at 1 -ae ANY > file.log.txt","description":"-n number of cores\n-r path to R1 reads\n-t prefix for output\n-f quality format \n-j produce read length file\n-z GZ compressed output\n-q minimum base quality for 3' end\n-m minimun read length (bp)\n-a adapter file \n-ao minimum adapter sequence overlap\n-at allowed mismatches in the adapter sequence per 10 bp\n-ae adapter trimming end","os_name":"Unix","os_version":"","can_edit":"1"},"is_project":0},{"component_id":"1062446","previous_id":"1062443","original_id":"0","guid":"CD602FBF21CA49979A2CFC0F920E1954","previous_guid":"0D58300397134770A9BE9E9A53CFC203","component_type_id":"8","data_id":"209","data":"","order_id":"3","name":"Software package","data_by_id":"1","type_id":"8","source_data":{"id":"209","name":"Flexbar","developer":"Dodt, M., Roehr, J.T., Ahmed, R., Dietrich, C.","repository":"https:\/\/sourceforge.net\/projects\/flexbar\/files\/","link":"https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC4009805\/","os_name":"Unix","os_version":"","version":"2.5","can_edit":"1"},"is_project":0}]},{"id":"610737","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"F0AA9ACA1FB54BCFB83198A6108685F5","previous_guid":"10FFC135ACD6455191DDCC44921E5E0C","previous_id":"610735","last_modified":"1523988925","components":[{"component_id":"1062448","previous_id":0,"original_id":"0","guid":"B80EE0936C1146E8BBE803B201D5CC2B","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Read alignment to NORMAL reference genome","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Read alignment to NORMAL reference genome"},"is_project":0},{"component_id":"1062447","previous_id":"1062448","original_id":"0","guid":"BE019D95ADA04285BD8297EBC0F85265","previous_guid":"B80EE0936C1146E8BBE803B201D5CC2B","component_type_id":"1","data_id":null,"data":"<p>Reads are first aligned to normal mouse mtDNA reference genome.<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Reads are first aligned to normal mouse mtDNA reference genome.<\/p>"},"is_project":0},{"component_id":"1062449","previous_id":"1062447","original_id":"0","guid":"C682563A52E340E286C41F56B63252DE","previous_guid":"BE019D95ADA04285BD8297EBC0F85265","component_type_id":"15","data_id":"3501","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Create index for the reference genome (required only once)\nbwa index -p reference reference.fa\n\n# bwa mem alignment\nbwa mem -t 15 -P -T 19 -B 3 -L 5,4 \/path\/to\/reference\/reference\n\/path\/to\/reads1_flexbar.fastq.gz > reads1.sam\n\n# Sorting and indexing\nsamtools view -Sbu reads1.sam | samtools sort - -T reads1.sorted -o\nreads1.sorted.bam\n\nsamtools index reads1.sorted.bam","description":"-t threads\n-P single-end reads\n-T minimum score to output\n-B allowed mismatches\n-L penalty for 5' and 3' end clipping","os_name":"normal reference genome","os_version":"","can_edit":"1"},"is_project":0},{"component_id":"1062474","previous_id":"1062449","original_id":"0","guid":"71738CDDA20745AA80794531633D1F9B","previous_guid":"C682563A52E340E286C41F56B63252DE","component_type_id":"8","data_id":"210","data":"","order_id":"3","name":"Software package","data_by_id":"1","type_id":"8","source_data":{"id":"210","name":"BWA","developer":"Li, H., Durbin, R.","repository":"http:\/\/bio-bwa.sourceforge.net\/","link":"https:\/\/arxiv.org\/abs\/1303.3997","os_name":"Unix","os_version":"","version":"0.7.12- r1039","can_edit":"1"},"is_project":0},{"component_id":"1062479","previous_id":"1062474","original_id":"0","guid":"8FE577B04F2D4677B94470C28DFAEB34","previous_guid":"71738CDDA20745AA80794531633D1F9B","component_type_id":"8","data_id":"211","data":"","order_id":"4","name":"Software package","data_by_id":"1","type_id":"8","source_data":{"id":"211","name":"SAMtools","developer":"Li, H. et al.","repository":"http:\/\/samtools.sourceforge.net\/","link":"https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/19505943","os_name":"Unix","os_version":"","version":"1.3.1","can_edit":"1"},"is_project":0},{"component_id":"1062481","previous_id":"1062479","original_id":"0","guid":"5331C7AD69DF402EAEAC661F109C2185","previous_guid":"8FE577B04F2D4677B94470C28DFAEB34","component_type_id":"26","data_id":"17668","data":"","order_id":"5","name":"Note","data_by_id":"1","type_id":"26","source_data":{"annotation_id":"17668","thread_id":"17668","id":"17668","thread_title":"Comment on step 2 of Low-frequency variant calling from high-quality mtDNA sequencing data","uri":"comment-on-step-2-of-lowfrequency-variant-calling","thread_uri":"comment-on-step-2-of-lowfrequency-variant-calling","step_id":"610737","protocol_uri":"low-frequency-variant-calling-from-high-quality-mt-nfkdbkw","protocol_name":"Low-frequency variant calling from high-quality mtDNA sequencing data","protocol_name_html":"Low-frequency variant calling from high-quality mtDNA sequencing data","annotation":"<p>This will allow variant detection on positions 200 to 16099 i.e. on the full genome excluding the circular genome junction region.<\/p>","thread_text":"<p>This will allow variant detection on positions 200 to 16099 i.e. on the full genome excluding the circular genome junction region.<\/p>","body":"<p>This will allow variant detection on positions 200 to 16099 i.e. on the full genome excluding the circular genome junction region.<\/p>","is_private":"0","public_protocol":"1","can_edit":0,"can_delete":"0","show_name":"0","created_date":"1519585312","created_on":"1519585312","modified_on":null,"last_updated":null,"profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/swii3gw.jpg","full_name":"Marita A. Isokallio","affiliation":"FIMM, University of Helsinki","username":"marita-a-isokallio","email":"marita.isokallio@gmail.com","pa_useranme":"marita-a-isokallio","comments":[]},"is_project":0}]},{"id":"610738","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"45FECB7E6CFC41EBAD4E4720678604D3","previous_guid":"F0AA9ACA1FB54BCFB83198A6108685F5","previous_id":"610737","last_modified":"1520006166","components":[{"component_id":"1062451","previous_id":0,"original_id":"0","guid":"E8D5E4D22A3B44849E25458B7E83DDB2","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Read alignment to a SPLIT reference genome","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Read alignment to a SPLIT reference genome"},"is_project":0},{"component_id":"1062450","previous_id":"1062451","original_id":"0","guid":"E64E45DEA96840088C69CCC2F5C4CF85","previous_guid":"E8D5E4D22A3B44849E25458B7E83DDB2","component_type_id":"1","data_id":null,"data":"<p>Generate a split reference genome. <\/p>\n<p>\u00a0<\/p>\n<p><strong>NOTE:<\/strong> this step only needs to be run once and the generated files can be used for the next analysis.<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Generate a split reference genome. <\/p>\n<p>\u00a0<\/p>\n<p><strong>NOTE:<\/strong> this step only needs to be run once and the generated files can be used for the next analysis.<\/p>"},"is_project":0},{"component_id":"1062452","previous_id":"1062450","original_id":"0","guid":"F53932FF12D7494A9B4133FA82BC206A","previous_guid":"E64E45DEA96840088C69CCC2F5C4CF85","component_type_id":"15","data_id":"3502","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"## Create the split reference genome (required only once) ##\n# Create variables\nsplit_genome=reference_split.fa\nsingle_line=reference_singleline.fa\nsplit_data=reference_split.data\n\n# Transform the reference fasta file to contain the sequence as a single line\nheader=$(cat \/path\/to\/reference.fa | grep '>')\ncat \/path\/to\/reference.fa | grep -v '>' | tr -d '\\n' > $single_line\n\n# Calculate the length of the input reference genome sequence to determine the cutting position\nhalf_split=$(cat $single_line | awk 'BEGIN {junc=0} junc=int(length($0)\/2)\n{print junc}')\nhalf_split1=$(echo $half_split | awk '{print $0+1}')\nfull_len=$(cat $single_line | awk 'BEGIN {len=0} len=length($0) {print len}')\npaste <(echo $half_split) <(echo $half_split1) <(echo $full_len) >\n$split_data\n\n# Take the genome halves according to the calculated positions\ngen_start=$(cat $single_line | cut -c1-$half_split)\ngen_end=$(cat $single_line | cut -c${half_split1}-$full_len)\n\n# Combine the halves in correct order and restore the fasta format\ngen_split=$(paste <(echo $gen_end) <(echo $gen_start) | tr -d '\\t')\npaste <(echo $header) <(echo $gen_split) | tr '\\t' '\\n' > $split_genome","description":"","os_name":"split reference genome","os_version":"","can_edit":"1"},"is_project":0},{"component_id":"1062480","previous_id":"1062452","original_id":"0","guid":"736B89FCEDEC4E8C8485A3468017D277","previous_guid":"F53932FF12D7494A9B4133FA82BC206A","component_type_id":"26","data_id":"17667","data":"","order_id":"3","name":"Note","data_by_id":"1","type_id":"26","source_data":{"annotation_id":"17667","thread_id":"17667","id":"17667","thread_title":"Comment on step 3 of Low-frequency variant calling from high-quality mtDNA sequencing data","uri":"comment-on-step-3-of-lowfrequency-variant-calling","thread_uri":"comment-on-step-3-of-lowfrequency-variant-calling","step_id":"610738","protocol_uri":"low-frequency-variant-calling-from-high-quality-mt-nfkdbkw","protocol_name":"Low-frequency variant calling from high-quality mtDNA sequencing data","protocol_name_html":"Low-frequency variant calling from high-quality mtDNA sequencing data","annotation":"<p>This will allow variant detection on positions at the circular genome junction region i.e. positions 1-199 and 16100-16299.<\/p>","thread_text":"<p>This will allow variant detection on positions at the circular genome junction region i.e. positions 1-199 and 16100-16299.<\/p>","body":"<p>This will allow variant detection on positions at the circular genome junction region i.e. positions 1-199 and 16100-16299.<\/p>","is_private":"0","public_protocol":"1","can_edit":0,"can_delete":"0","show_name":"0","created_date":"1519585298","created_on":"1519585298","modified_on":null,"last_updated":null,"profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/swii3gw.jpg","full_name":"Marita A. Isokallio","affiliation":"FIMM, University of Helsinki","username":"marita-a-isokallio","email":"marita.isokallio@gmail.com","pa_useranme":"marita-a-isokallio","comments":[]},"is_project":0}]},{"id":"610739","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"D2265B33D0F8487FBD4C2AAFA46E0381","previous_guid":"2E5ED30B2A584913BB49B022ED7438B2","previous_id":"612590","last_modified":"1523988955","components":[{"component_id":"1062454","previous_id":0,"original_id":"0","guid":"B06EB52AE35C43219FC5FB3725694B9A","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Read filtering","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Read filtering"},"is_project":0},{"component_id":"1062453","previous_id":"1062454","original_id":"0","guid":"200AE6E41E064FC89B28230BD425B83C","previous_guid":"B06EB52AE35C43219FC5FB3725694B9A","component_type_id":"1","data_id":null,"data":"<p>In order to exclude poorly aligned reads, the aligned reads are filtered for minimum mapping quality.<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>In order to exclude poorly aligned reads, the aligned reads are filtered for minimum mapping quality.<\/p>"},"is_project":0},{"component_id":"1062459","previous_id":"1062453","original_id":"0","guid":"EF34BA14B154417FAF1D1AACFAD8799F","previous_guid":"200AE6E41E064FC89B28230BD425B83C","component_type_id":"15","data_id":"3503","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Quality filter only uniquely aligned reads for further processing (bwa mem mapping quality 0 indicates multi-mapping reads)\n\n# First the reads aligned to normal reference genome\nsamtools view -bq 1 reads1.sorted.bam > reads1.accepted.bam \nsamtools index reads1.accepted.bam\n\n# Similar to reads aligned to the split reference genome\nsamtools view -bq 1 reads1_junction.sorted.bam > reads1_junction.accepted.bam\n\nsamtools index reads1_junction.accepted.bam","description":"-b output BAM format\n-q minimum mapping quality to keep","os_name":"Unix","os_version":"","can_edit":"1"},"is_project":0},{"component_id":"1062482","previous_id":"1062459","original_id":"0","guid":"24886FA709B6403E82CA4662AB514A52","previous_guid":"EF34BA14B154417FAF1D1AACFAD8799F","component_type_id":"26","data_id":"17669","data":"","order_id":"3","name":"Note","data_by_id":"1","type_id":"26","source_data":{"annotation_id":"17669","thread_id":"17669","id":"17669","thread_title":"Comment on step 4 of Low-frequency variant calling from high-quality mtDNA sequencing data","uri":"comment-on-step-4-of-lowfrequency-variant-calling","thread_uri":"comment-on-step-4-of-lowfrequency-variant-calling","step_id":"610739","protocol_uri":"low-frequency-variant-calling-from-high-quality-mt-nfkdbkw","protocol_name":"Low-frequency variant calling from high-quality mtDNA sequencing data","protocol_name_html":"Low-frequency variant calling from high-quality mtDNA sequencing data","annotation":"<p>NOTE: Different alignment tools use different mapping qualities, see for example <a href=\"http:\/\/www.acgt.me\/blog\/2015\/3\/17\/more-madness-with-mapq-scores-aka-why-bioinformaticians-hate-poor-and-incomplete-software-documentation\" target=\"_blank\">a blog post by Keith Bradnam<\/a>.<\/p>","thread_text":"<p>NOTE: Different alignment tools use different mapping qualities, see for example <a href=\"http:\/\/www.acgt.me\/blog\/2015\/3\/17\/more-madness-with-mapq-scores-aka-why-bioinformaticians-hate-poor-and-incomplete-software-documentation\" target=\"_blank\">a blog post by Keith Bradnam<\/a>.<\/p>","body":"<p>NOTE: Different alignment tools use different mapping qualities, see for example <a href=\"http:\/\/www.acgt.me\/blog\/2015\/3\/17\/more-madness-with-mapq-scores-aka-why-bioinformaticians-hate-poor-and-incomplete-software-documentation\" target=\"_blank\">a blog post by Keith Bradnam<\/a>.<\/p>","is_private":"0","public_protocol":"1","can_edit":0,"can_delete":"0","show_name":"0","created_date":"1519585490","created_on":"1519585490","modified_on":"1519585567","last_updated":"1519585567","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/swii3gw.jpg","full_name":"Marita A. Isokallio","affiliation":"FIMM, University of Helsinki","username":"marita-a-isokallio","email":"marita.isokallio@gmail.com","pa_useranme":"marita-a-isokallio","comments":[]},"is_project":0}]},{"id":"610751","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"D42DD68485F84E3EB84A46D286083D1D","previous_guid":"D2265B33D0F8487FBD4C2AAFA46E0381","previous_id":"610739","last_modified":"1523989598","components":[{"component_id":"1062486","previous_id":0,"original_id":"0","guid":"BFF794C1F9504F6398479CF09F5134C7","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Calculate coverage","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Calculate coverage"},"is_project":0},{"component_id":"1062485","previous_id":"1062486","original_id":"0","guid":"03F52C2B7B00455B9FE175DA9E3CEBAD","previous_guid":"BFF794C1F9504F6398479CF09F5134C7","component_type_id":"1","data_id":null,"data":"<p>Calculate coverage for both alignment files, the one from alignment to the normal reference genome and the one from alignment to the split reference genome.<\/p>\n<p>\u00a0<\/p>\n<p>Subset the results such that the entire genome is represented with correct coverage i.e. use the alignment to the normal reference genome for the positions 200-16099 (mouse genome positions) and the alignment to split reference genome for the junction region positions between -200 and +200.<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Calculate coverage for both alignment files, the one from alignment to the normal reference genome and the one from alignment to the split reference genome.<\/p>\n<p>\u00a0<\/p>\n<p>Subset the results such that the entire genome is represented with correct coverage i.e. use the alignment to the normal reference genome for the positions 200-16099 (mouse genome positions) and the alignment to split reference genome for the junction region positions between -200 and +200.<\/p>"},"is_project":0},{"component_id":"1062489","previous_id":"1062485","original_id":"0","guid":"A5BD2D6F0081488EB490184A84C90539","previous_guid":"03F52C2B7B00455B9FE175DA9E3CEBAD","component_type_id":"15","data_id":"3504","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Firts calculate coverage for the normal reference alignment\nbedtools genomecov -d -ibam reads1.accepted.bam -g reference.fa > coverage.txt\n\n# Then the same for the split reference alignment\nbedtools genomecov -d -ibam reads1_junction.accepted.bam -g reference_split.fa > coverage_junction.txt\n\n## Combine the coverages in order to represent the entire mtDNA genome\n\n# Take the middle and end points of the split junction genome for extracting correct lines\nmid_point=$(cat reference_split.data | awk '{print $2}')\nend_point=$(cat reference_split.data | awk '{print $3}')\n\n# Middle part of the normal coverage file\ncat coverage.txt | awk -v endpoint=\"$end_point\" \\\n'$2 > 200 && $2 < endpoint - 200 {print}' > coverage.middle\n\n# Re-coordinate the junction region and take only -200 and +200\ncat coverage_junction.txt | awk -v midpoint=\"$mid_point\" \\ \n-v endpoint=\"$end_point\" \\\n'BEGIN {OFS = \"\\t\"; pos = 0; test = 0; res = 0} \\\n{pos = $2; test = pos - midpoint; \\\nif(test <= 0) res = endpoint + test; \\\nelse res = test; $2 = res; print}' | \\\nsort -nk2 | awk -v endpoint=\"$end_point\" \\\n'$2 <=200 || $2 >= endpoint - 200 {print}' > coverage.junction_replacement\n\n# Merge the middle and junction regions into a final result file\ncat $normal_middle $junction_replacement | sort -nk2 > coverage_final.txt","description":"NOTE:\nawk command is split over multiple rows for better readability.\nIf the command does not run, first try to run it as a single line.","os_name":"","os_version":"","can_edit":"1"},"is_project":0},{"component_id":"1062497","previous_id":"1062489","original_id":"0","guid":"8BDA055B98A1423CB3A74157A56FC978","previous_guid":"A5BD2D6F0081488EB490184A84C90539","component_type_id":"8","data_id":"212","data":"","order_id":"3","name":"Software package","data_by_id":"1","type_id":"8","source_data":{"id":"212","name":"BEDTools","developer":"Quinlan, A.R., Hall, I.M.","repository":"https:\/\/github.com\/arq5x\/bedtools2","link":"https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/20110278","os_name":"Unix","os_version":"","version":"2.22.1","can_edit":"1"},"is_project":0}]},{"id":"610755","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"088FCFEFA9BC4B25A312D0E72FC3EF99","previous_guid":"D42DD68485F84E3EB84A46D286083D1D","previous_id":"610751","last_modified":"1523989376","components":[{"component_id":"1062495","previous_id":0,"original_id":"0","guid":"34F08FAEA43E47CE9EAAE1EAABABD927","previous_guid":null,"component_type_id":"1","data_id":null,"data":"<p>Variant calling is done for both alignment files, the one that was aligned to the normal reference genome and the one that was aligned to the split reference genome.<\/p>\n<p>\u00a0<\/p>\n<p>Variant calling sets minimum base-calling qualities to be considered for the reference and alternative bases and calls indels simultaneosly.<\/p>\n<p>\u00a0<\/p>\n<p>Variants are filtered only for strand bias and minimum quality.<\/p>\n<p>\u00a0<\/p>\n<p><strong>NOTE:<\/strong> Disabling the default run of lofreq filter allows detection of extremely rare variants from a high-quality, highly enriched mtDNA sample.<\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Variant calling is done for both alignment files, the one that was aligned to the normal reference genome and the one that was aligned to the split reference genome.<\/p>\n<p>\u00a0<\/p>\n<p>Variant calling sets minimum base-calling qualities to be considered for the reference and alternative bases and calls indels simultaneosly.<\/p>\n<p>\u00a0<\/p>\n<p>Variants are filtered only for strand bias and minimum quality.<\/p>\n<p>\u00a0<\/p>\n<p><strong>NOTE:<\/strong> Disabling the default run of lofreq filter allows detection of extremely rare variants from a high-quality, highly enriched mtDNA sample.<\/p>"},"is_project":0},{"component_id":"1062496","previous_id":"1062495","original_id":"0","guid":"901CAC37929F46F3B7FEC9B5B21C725B","previous_guid":"34F08FAEA43E47CE9EAAE1EAABABD927","component_type_id":"6","data_id":"0","data":"Variant calling","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Variant calling"},"is_project":0},{"component_id":"1067195","previous_id":"1062496","original_id":"0","guid":"32C24F478CE240ACAB1318DDC9866CE0","previous_guid":"901CAC37929F46F3B7FEC9B5B21C725B","component_type_id":"15","data_id":"3576","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# First set the indel qualities for using --call-indels\nlofreq indelqual --dindel --ref reference.fa --out reads1.indelqual.bam reads1.accepted.bam\n\nlofreq indelqual --dindel --ref reference_split.fa --out reads1_junction.indelqual.bam  reads1_junction.accepted.bam\n\n# Generate the index for both files\nsamtools index reads1.indelqual.bam\nsamtools index reads1_junction.indelqual.bam\n\n\n# Variant calling including indels\nlofreq call-parallel --pp-threads 20 -f reference.fa -o reads1.nofilter.vcf -N -B -q 30 -Q 30 --call-indels --no-default-filter reads1.indelqual.bam\n\nlofreq call-parallel --pp-threads 20 -f reference_split.fa -o reads1_junction.nofilter.vcf -N -B -q 30 -Q 30 --call-indels --no-default-filter reads1_junction.indelqual.bam\n\n\n# Filtering the results if >85% of variant reads are on single strand and for minimum quality\nlofreq filter --no-defaults --snvqual-thresh 70 --indelqual-thresh 70 --sb-incl-indels -B 60 -i reads1.nofilter.vcf -o reads1.sbfiltered.vcf\n\nlofreq filter --no-defaults --snvqual-thresh 70 --indelqual-thresh 70 --sb-incl-indels -B 60 -i reads1_junction.nofilter.vcf -o reads1_junction.sbfiltered.vcf","description":"--dindel Add Dindel's indel qualities (Illumina specific)\n\n--pp-threads number of threads\n-f reference genome .fasta file\n-o output file\n-N Don't merge mapping quality in LoFreq's model\n-B  Disable use of base-alignment quality (BAQ)\n-q minimum REF base quality\n-Q minimum ALT base quality\n--call-indels enable indel calls\n--no-default-filter Don't run default 'lofreq filter' automatically after calling variants\n","os_name":"variant calling for normal and split alignments","os_version":"","can_edit":"1"},"is_project":0},{"component_id":"1067301","previous_id":"1067195","original_id":"0","guid":"96ADB4DBE5FD44839282CABB6493E715","previous_guid":"32C24F478CE240ACAB1318DDC9866CE0","component_type_id":"8","data_id":"219","data":"","order_id":"3","name":"Software package","data_by_id":"1","type_id":"8","source_data":{"id":"219","name":"LoFreq","developer":"Wilm A. et al.","repository":"https:\/\/github.com\/CSB5\/lofreq","link":"http:\/\/csb5.github.io\/lofreq\/2013\/06\/07\/lofreq-star\/","os_name":"Unix","os_version":"","version":"2.1.2","can_edit":"1"},"is_project":0},{"component_id":"1067302","previous_id":"1067301","original_id":"0","guid":"C8F59917B46744D7A8C3FA20690F57B3","previous_guid":"96ADB4DBE5FD44839282CABB6493E715","component_type_id":"8","data_id":"211","data":"","order_id":"4","name":"Software package","data_by_id":"1","type_id":"8","source_data":{"id":"211","name":"SAMtools","developer":"Li, H. et al.","repository":"http:\/\/samtools.sourceforge.net\/","link":"https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/19505943","os_name":"Unix","os_version":"","version":"1.3.1","can_edit":"1"},"is_project":0}]},{"id":"612590","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"2E5ED30B2A584913BB49B022ED7438B2","previous_guid":"45FECB7E6CFC41EBAD4E4720678604D3","previous_id":"610738","last_modified":"1523988903","components":[{"component_id":"1067143","previous_id":0,"original_id":"0","guid":"963E4B9151314010B87D7323790AB5A7","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Read alignment to a SPLIT reference genome","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Read alignment to a SPLIT reference genome"},"is_project":0},{"component_id":"1067142","previous_id":"1067143","original_id":"0","guid":"CF276A0DDF5342C3B6046E42008C7075","previous_guid":"963E4B9151314010B87D7323790AB5A7","component_type_id":"1","data_id":null,"data":"<p>Similar to <strong>Step 2<\/strong>, reads are now aligned to the split mouse mtDNA reference genome generated in <strong>Step 3<\/strong>.<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Similar to <strong>Step 2<\/strong>, reads are now aligned to the split mouse mtDNA reference genome generated in <strong>Step 3<\/strong>.<\/p>"},"is_project":0},{"component_id":"1067144","previous_id":"1067142","original_id":"0","guid":"F34F56E1811044B0904BD2443EDC140A","previous_guid":"CF276A0DDF5342C3B6046E42008C7075","component_type_id":"15","data_id":"3575","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Create index for the reference genome (required only once)\nbwa index -p reference_split reference_split.fa\n\n# bwa mem alignment\nbwa mem -t 15 -P -T 19 -B 3 -L 5,4 \/path\/to\/reference\/reference_split\n\/path\/to\/reads1_flexbar.fastq.gz > reads1_junction.sam\n\n# Sorting and indexing\nsamtools view -Sbu reads1_junction.sam | samtools sort - -T\nreads1_junction.sorted -o reads1_junction.sorted.bam\n\nsamtools index reads1_junction.sorted.bam","description":"-t threads\n-P single-end reads\n-T minimum score to output\n-B allowed mismatches\n-L penalty for 5' and 3' end clipping","os_name":"split reference genome","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"612605","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"E69F05E6334F40739F18EA11A0BE6B13","previous_guid":"088FCFEFA9BC4B25A312D0E72FC3EF99","previous_id":"610755","last_modified":"1523989607","components":[{"component_id":"1067197","previous_id":0,"original_id":"0","guid":"297E2400EB424FAC9893E93D747FDD0F","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Variant calling","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Variant calling"},"is_project":0},{"component_id":"1067196","previous_id":"1067197","original_id":"0","guid":"FD90FF7FABEC418AA9BBFFA774A12B31","previous_guid":"297E2400EB424FAC9893E93D747FDD0F","component_type_id":"1","data_id":null,"data":"<p>Combine the called variants from the both VCF files (normal and split reference genomes) and re-coordinate the positions.<\/p>\n<p>\u00a0<\/p>\n<p>First, use the <em>reference_split.data<\/em> file generated in the <strong>Step 3<\/strong> that describes the middle and last genome position numbers.<\/p>\n<p>\u00a0<\/p>\n<p>From the VCF file that used the split reference genome, take only the variants identified on the genome junction region i.e. positions between -200 and +200. Replace the position numbers with those corresponding the normal reference genome in order to combine these variants with the ones in the VCF file that used the normal reference genome.<\/p>\n<p>\u00a0<\/p>\n<p>From the VCF file that used the normal reference genome, take all variants except those on the above described genome junction region.<\/p>\n<p>\u00a0<\/p>\n<p>Combine the variant lists into a single VCF file that now has the positions according to the normal reference genome and variants are correctly detected also around the junction region.<\/p>\n<p>\u00a0<\/p>\n<p>Finally, separate SNVs and indels into separate files for downstream processing.<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Combine the called variants from the both VCF files (normal and split reference genomes) and re-coordinate the positions.<\/p>\n<p>\u00a0<\/p>\n<p>First, use the <em>reference_split.data<\/em> file generated in the <strong>Step 3<\/strong> that describes the middle and last genome position numbers.<\/p>\n<p>\u00a0<\/p>\n<p>From the VCF file that used the split reference genome, take only the variants identified on the genome junction region i.e. positions between -200 and +200. Replace the position numbers with those corresponding the normal reference genome in order to combine these variants with the ones in the VCF file that used the normal reference genome.<\/p>\n<p>\u00a0<\/p>\n<p>From the VCF file that used the normal reference genome, take all variants except those on the above described genome junction region.<\/p>\n<p>\u00a0<\/p>\n<p>Combine the variant lists into a single VCF file that now has the positions according to the normal reference genome and variants are correctly detected also around the junction region.<\/p>\n<p>\u00a0<\/p>\n<p>Finally, separate SNVs and indels into separate files for downstream processing.<\/p>"},"is_project":0},{"component_id":"1067198","previous_id":"1067196","original_id":"0","guid":"F28AF5E7C12D438EA2ED461A250906E2","previous_guid":"FD90FF7FABEC418AA9BBFFA774A12B31","component_type_id":"15","data_id":"3577","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"## Combine the original and junction region results for the junction region ##\n# Read in the mid and end points of the split genome junction region (generated in Step 3 for the split reference genome)\nmid_point=$(cat reference_split.data | awk '{print $2}')\nend_point=$(cat reference_split.data | awk '{print $3}')\n\n# Re-coordinate the variants and take only -200 and +200 region\ncat reads1_junction.sbfiltered.vcf | awk '\/#CHROM\/ {flag = 1; next} flag {print}' | \\\nawk -v midpoint=\"$mid_point\" -v endpoint=\"$end_point\" \\\n'BEGIN {OFS = \"\\t\"; pos = 0; test = 0; res = 0} \\\n{pos = $2; test = pos - midpoint; if(test <= 0) res = endpoint + test; \\\nelse res = test; $2 = res; print}' | \\\nsort -nk2 | \\\nawk -v endpoint=\"$end_point\" '$2 <= 200 || $2 >= endpoint - 200 {print}' > junction_replacement.vars\n\n# Create intermediate VCF file header\ncat reads1.sbfiltered.vcf | \\\nawk '\/#\/ {print}' > reads1.sbfiltered_junction_combined.vcf\n\n# Take middle part of the original alignment variant calls\ncat reads1.sbfiltered.vcf | \\\nawk '\/#CHROM\/ {flag = 1; next} flag {print}' | \\\nawk -v endpoint=\"$end_point\" '$2 > 200 && $2 < endpoint - 200 {print}' > reads1.middle.vars\n\n# Combine junction replacement and original middle, sort and append to the original VCF header\ncat reads1.middle.vars junction_replacement.vars | \\\nsort -nk2 >> reads1.sbfiltered_junction_combined.vcf\n\n# Final junction fixed file for SNV and indel separation\n# Separate SNVs only and indels only to different files for downstream analysis\nlofreq filter --no-defaults --only-snvs \\\n-i reads1.sbfiltered_junction_combined.vcf -o reads1.snvs.vcf\nlofreq filter --no-defaults --only-indels \\\n-i reads1.sbfiltered_junction_combined.vcf -o reads1.indels.vcf","description":"NOTE:\nawk command is split over multiple rows for better readability.\nIf the command does not run, first try to run it as a single line.","os_name":"combine variant files","os_version":"","can_edit":"1"},"is_project":0},{"component_id":"1067283","previous_id":"1067198","original_id":"0","guid":"8D1418EDF04F4F868CB1B4FF55F386BE","previous_guid":"F28AF5E7C12D438EA2ED461A250906E2","component_type_id":"8","data_id":"219","data":"","order_id":"3","name":"Software package","data_by_id":"1","type_id":"8","source_data":{"id":"219","name":"LoFreq","developer":"Wilm A. et al.","repository":"https:\/\/github.com\/CSB5\/lofreq","link":"http:\/\/csb5.github.io\/lofreq\/2013\/06\/07\/lofreq-star\/","os_name":"Unix","os_version":"","version":"2.1.2","can_edit":"1"},"is_project":0}]},{"id":"612615","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"051B4CFE6DBF423BA12D1F68CB2DDAC7","previous_guid":"E69F05E6334F40739F18EA11A0BE6B13","previous_id":"612605","last_modified":"1523989549","components":[{"component_id":"1067218","previous_id":0,"original_id":"0","guid":"C1B22DE996C24ADA8C2E9D4ADF6AB018","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Variant filtering","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Variant filtering"},"is_project":0},{"component_id":"1067217","previous_id":"1067218","original_id":"0","guid":"0BAB04142FE746AAAA88916D7DA8C24A","previous_guid":"C1B22DE996C24ADA8C2E9D4ADF6AB018","component_type_id":"1","data_id":null,"data":"<p>Variants can be further filtered and annotated with snpEff.<\/p>\n<p>\u00a0<\/p>\n<p>First, make sure that you have the snpEff config file correctly set up to use the mitochondrial codon table (use the same genome version as you used for the alignment).<\/p>\n<p>\u00a0<\/p>\n<p>Then, filter the variants with wanted thresholds. Here, we use the minimum number of total alternative reads (calculated as depth * allele frequency) together with minimum number of alternative reads on each strand (based on DP4 values).<\/p>\n<p>\u00a0<\/p>\n<p>In the next step, we apply an additional filter for variants with extreme strand-bias Phred score (SB&gt;1000), which were not filtered out in the earlier step.<\/p>\n<p>\u00a0<\/p>\n<p>Simultaneously, we filter the results for the near-homoplasmic variants that has expanded in our inbred mouse strain (this part should be omitted if your mouse strain does not carry these variants).<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Variants can be further filtered and annotated with snpEff.<\/p>\n<p>\u00a0<\/p>\n<p>First, make sure that you have the snpEff config file correctly set up to use the mitochondrial codon table (use the same genome version as you used for the alignment).<\/p>\n<p>\u00a0<\/p>\n<p>Then, filter the variants with wanted thresholds. Here, we use the minimum number of total alternative reads (calculated as depth * allele frequency) together with minimum number of alternative reads on each strand (based on DP4 values).<\/p>\n<p>\u00a0<\/p>\n<p>In the next step, we apply an additional filter for variants with extreme strand-bias Phred score (SB&gt;1000), which were not filtered out in the earlier step.<\/p>\n<p>\u00a0<\/p>\n<p>Simultaneously, we filter the results for the near-homoplasmic variants that has expanded in our inbred mouse strain (this part should be omitted if your mouse strain does not carry these variants).<\/p>"},"is_project":0},{"component_id":"1067284","previous_id":"1067217","original_id":"0","guid":"944F79C5170E4AABAB3F650D25146CB1","previous_guid":"0BAB04142FE746AAAA88916D7DA8C24A","component_type_id":"8","data_id":"220","data":"","order_id":"2","name":"Software package","data_by_id":"1","type_id":"8","source_data":{"id":"220","name":"SnpEff","developer":"Cingolani P. et al.","repository":"https:\/\/github.com\/pcingola\/SnpEff","link":"http:\/\/snpeff.sourceforge.net\/","os_name":"Unix","os_version":"","version":"4.2","can_edit":"1"},"is_project":0},{"component_id":"1067281","previous_id":"1067284","original_id":"0","guid":"9FEE42B90B9246B5A5326134A4D26048","previous_guid":"944F79C5170E4AABAB3F650D25146CB1","component_type_id":"15","data_id":"3578","data":"","order_id":"3","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"## Make sure the snpEff config file uses mitochondrial codons for annotations (required only once)\ncd ~\nmkdir snpEff_data\n# Modify snpEff.config file\n# data.dir = ~\/snpEff_data\/\n# Fix mitochondrial codon table usage in the .config file to the wanted genome version:\n## Original rows in snpEff.config\n## GRCm38.82.genome : Mus_musculus\n## GRCm38.82.reference : ftp:\/\/ftp.ensembl.org\/pub\/release-82\/gtf\/\n# Add MT.codonTable in between:\n## GRCm38.82.genome : Mus_musculus\n## GRCm38.82.MT.codonTable: Vertebrate_Mitochondrial\n## GRCm38.82.reference : ftp:\/\/ftp.ensembl.org\/pub\/release-82\/gtf\/\n###","description":"","os_name":"snpEff configuration","os_version":"","can_edit":"1"},"is_project":0},{"component_id":"1067282","previous_id":"1067281","original_id":"0","guid":"2B9EAC059A504EE8B2AFF5B9DBCBBE38","previous_guid":"9FEE42B90B9246B5A5326134A4D26048","component_type_id":"15","data_id":"3579","data":"","order_id":"4","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Filter variants for minimum number of supporting reads in total and on both strands\ncat reads1.snvs.vcf | \\\njava -jar \/software\/snpEff\/4.2\/SnpSift.jar filter \\\n\"( (DP*AF >= 15) & (DP4[2] >= 3) & (DP4[3] >= 3) )\" \\\n> reads1.filtered.vcf\n\n# Filter variants for mouse strain specific and highly strand biased variants\ncat reads1.filtered.vcf | \\\njava -jar \/software\/snpEff\/4.2\/SnpSift.jar filter \\\n\"( (SB < 1000) & (POS != 4891) & (POS != 9461) & (POS != 9027) )\" \\\n> reads1.pos_filtered.vcf","description":"","os_name":"variant filtering","os_version":"","can_edit":"1"},"is_project":0}]}]}