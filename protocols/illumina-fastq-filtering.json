{"uri":"illumina-fastq-filtering-gydbxs6","version_id":"0","protocol_name":"Illumina Fastq Filtering","protocol_name_html":"Illumina Fastq Filtering","is_prepublished":"0","can_edit":"0","parent_id":null,"api_version":"1","is_new_mode":"1","last_modified":"1522231932","type_id":"1","link":"","fork_id":"","public_fork_note":"","number_of_steps":"5","has_versions":"1","first_published_date":"1499457477","publish_date":"2017-07-07 19:57:57","documents":null,"have_protocol_in_step":"0","is_protocol_in_step":"0","vendor_name":"Contributed by users","vendor_link":"https:\/\/www.protocols.io","vendor_logo":"\/img\/vendors\/1.png","mod_mins":"-45","mod_secs":"1","description":"<p>Method to filter Illumina sequence data by removing low quality reads and reads mapping to artifact and contamination databases using BBTools.<\/p>\n<p>DNA sequencing produces low quality reads, reads that contain sequencing artifacts and contamination from lab processes.\u00a0 Removing the bad data from the fastq produces more accurate results for mapping to references and assembly.<\/p>\n<p>\u00a0<\/p>\n<p>BBTools is a bioinformatics software package developed at the DOE Joint Genome Institute and used worldwide.<\/p>\n<p>http:\/\/bbtools.jgi.doe.gov<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>","is_bookmarked":"0","can_reassign":"1","before_start":"","has_guidelines":"0","materials":[],"warning":"","version_class":"4837","public":"1","is_owner":"1","is_original_owner":"1","created_on":"1484333676","protocol_affiliation":"JGI","affiliation":"DOE Joint Genome Institute","doi":"dx.doi.org\/10.17504\/protocols.io.gydbxs6","doi_status":"2","changed_fork_steps":null,"profile_url":"Bryce-x2v254x2p2","protocol_img":"https:\/\/s3.amazonaws.com\/pr-journal\/hrafpve.jpg","profile_image":"\/img\/avatars\/018.png","full_name":"Bryce Foster","created_by":"Bryce Foster","private_link":"06ADC227BBE36EC9257E169595BBF4A1","original_img":"1","username":"bryce-foster","is_retracted":"0","retraction_reason":null,"plos_id":null,"manuscript_citation":null,"journal_name":null,"is_donations_disabled":"0","is_donations_disabled_by_user":"9","item_record_id":236145,"fork_info":[],"compare_forks":[],"protocols":[],"groups":[],"number_of_shared_runs":[],"ownership_history":[],"keywords":"filter illumina sequence fastq","transfer_to_user":[],"sub_transfer":false,"is_transfer_pending":false,"number_of_bookmarks":"0","collections":[],"tags":[],"archived":0,"sub_authors":[],"sub_protocols_number":0,"can_edit_shared":0,"shared_runs":[],"is_shared_run":0,"is_shared":1,"banner":null,"contact_badges":[{"badge_id":"2","badge_image":"\/img\/badges\/bronze.svg","badge_description":"Author!"},{"badge_id":"5","badge_image":"\/img\/badges\/earlyadopter.svg","badge_description":"Early adopter"},{"badge_id":"6","badge_image":"\/img\/badges\/socialbutterfly.svg","badge_description":"Social butterfly"}],"number_of_comments":2,"is_locked":0,"is_locked_by":false,"authors":"Bryce Foster","authors_list":[{"name":"Bryce Foster","affiliation":"JGI","username":null,"profile_image":null}],"user":{"profile_image":"\/img\/avatars\/018.png","username":"bryce-foster","full_name":"Bryce Foster","created_by":"Bryce Foster"},"access":{"can_view":"1","can_remove":"0","can_add":"0","can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":"0","can_move":"1","can_transfer":"1","can_download":"1","is_locked":"0"},"is_contact_suspended":0,"guidelines":"","status_id":"1","is_research":"1","status_info":null,"steps":[{"id":"264956","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"8B89294D22C542F38EE51F749CABFC9F","previous_guid":null,"previous_id":"0","last_modified":"1498864215","components":[{"component_id":"369701","previous_id":0,"original_id":"0","guid":"0917EC7D21DC4331886C0FD12FDC6880","previous_guid":null,"component_type_id":"1","data_id":"0","data":"<p>Use clumpify to reorder the reads in the fastq file so that similar reads are near each other.<\/p>\n<p>Clumpifying the fastq can reduce the file size by 30% depending on the amount of duplicated reads.<\/p>\n<p>Clumpify only has this affect on gzipped and bzipped fastq files.<\/p>\n<p>This step is optional.<\/p>\n<p>\u00a0<\/p>\n<p>$ clumpify.sh zl=4 reorder in=(raw fastq file) out=(temp fastq file)<\/p>\n<ul>\n<li>zl=4: gzip level for out file<\/li>\n<li>reorder: reorder reads based on similar kmers (pairs kept together)<\/li>\n<li>in: input fastq file<\/li>\n<li>out: temporary fastq file<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Use clumpify to reorder the reads in the fastq file so that similar reads are near each other.<\/p>\n<p>Clumpifying the fastq can reduce the file size by 30% depending on the amount of duplicated reads.<\/p>\n<p>Clumpify only has this affect on gzipped and bzipped fastq files.<\/p>\n<p>This step is optional.<\/p>\n<p>\u00a0<\/p>\n<p>$ clumpify.sh zl=4 reorder in=(raw fastq file) out=(temp fastq file)<\/p>\n<ul>\n<li>zl=4: gzip level for out file<\/li>\n<li>reorder: reorder reads based on similar kmers (pairs kept together)<\/li>\n<li>in: input fastq file<\/li>\n<li>out: temporary fastq file<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"369774","previous_id":"369701","original_id":"0","guid":"5953221393684B9892C3195E05979A1A","previous_guid":"0917EC7D21DC4331886C0FD12FDC6880","component_type_id":"6","data_id":"0","data":"Reorder reads in fastq file (Clumpify)","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Reorder reads in fastq file (Clumpify)"},"is_project":0}]},{"id":"265047","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"1B8F6BF48A454BC69059F1ABE495A1A4","previous_guid":"C2F8C6C33E304CEF8895D58132866A7E","previous_id":"351388","last_modified":"1498864238","components":[{"component_id":"369812","previous_id":0,"original_id":"0","guid":"31551BB078314B019BC3D4E406C6A3BD","previous_guid":null,"component_type_id":"1","data_id":"0","data":"<p>This step removes reads in the JGI's short sequencing artifacts database from the fastq from STEP 3<\/p>\n<p>\u00a0<\/p>\n<p>$ bbduk.sh ordered ow=t k=20 hdist=1 zl=6 in=(temp fastq3) out=(temp fastq4) ref=(JGI short sequencing artifacts db.fa)<\/p>\n<ul>\n<li>ordered: keep reads in the same order as the input fastq (temp fastq 3)<\/li>\n<li>ow=t: overwrite 'out' file<\/li>\n<li>k=20: kmer length used to find kmers matching 'ref'<\/li>\n<li>hdist=1: hamming distance of 1, used to identify kmers as matching 'ref'<\/li>\n<li>zl=6: zip level<\/li>\n<li>in: input fastq file from STEP 3 'out='<\/li>\n<li>out: intermediate fastq file<\/li>\n<li>ref: JGI short sequencing artifacts database [3]<\/li>\n<\/ul>\n<p>\u00a0<\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>This step removes reads in the JGI's short sequencing artifacts database from the fastq from STEP 3<\/p>\n<p>\u00a0<\/p>\n<p>$ bbduk.sh ordered ow=t k=20 hdist=1 zl=6 in=(temp fastq3) out=(temp fastq4) ref=(JGI short sequencing artifacts db.fa)<\/p>\n<ul>\n<li>ordered: keep reads in the same order as the input fastq (temp fastq 3)<\/li>\n<li>ow=t: overwrite 'out' file<\/li>\n<li>k=20: kmer length used to find kmers matching 'ref'<\/li>\n<li>hdist=1: hamming distance of 1, used to identify kmers as matching 'ref'<\/li>\n<li>zl=6: zip level<\/li>\n<li>in: input fastq file from STEP 3 'out='<\/li>\n<li>out: intermediate fastq file<\/li>\n<li>ref: JGI short sequencing artifacts database [3]<\/li>\n<\/ul>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"369808","previous_id":"369812","original_id":"0","guid":"C45EB52D9F1449B09326AA0A61DEB545","previous_guid":"31551BB078314B019BC3D4E406C6A3BD","component_type_id":"6","data_id":"0","data":"Artifact Filtering","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Artifact Filtering"},"is_project":0}]},{"id":"265083","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"106CF3071F934A02B44CE38404D0A441","previous_guid":"1B8F6BF48A454BC69059F1ABE495A1A4","previous_id":"265047","last_modified":"1498864310","components":[{"component_id":"369880","previous_id":0,"original_id":"0","guid":"B3BC249A8D714DAB85767E3EB7D5768F","previous_guid":null,"component_type_id":"1","data_id":"0","data":"<p>Identify reads matching references in the JGI contamination databases\u00a0using bbmap and remove them from the fastq file from STEP 4.<\/p>\n<p>This step is optional.<\/p>\n<p>\u00a0<\/p>\n<p>$ filterbytaxa.sh names=(ncbi tax id) include=f tree=tree.taxtree.gz level=order ow=t in=(JGI contamination database) out=(temp taxa.fa.gz)<\/p>\n<ul>\n<li>this step is optional.\u00a0 It removes references matching the (ncbi tax id).\u00a0 If the sequence is E. Coli and E. Coli is in the contamination database then this step excludes it from being removed<\/li>\n<li>names: list of ncbi taxonomy ids to exclude from removing (e.g. cat = 9685)<\/li>\n<li>level=order: use references at the order level to exclude from removal (e.g. cat = 9685, order = Carnivora, anything in the Carnivora order will not be removed)<\/li>\n<li>tree=tree.taxtree.gz: taxonomy tree file<\/li>\n<li>include=f: discard filtered sequences<\/li>\n<li>ow=t: overwrite the out parameter<\/li>\n<li>in: JGI contamination database [4]<\/li>\n<li>out: output contamination database with 'names' removed, used for mapping<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p>$ bbmap.sh ordered quickmatch k=13 idtag=t printunmappedcount ow=t qtrim=rl trimq=10 untrim build=1 ref=(temp taxa fa.gz) in=(temp fastq 4) out=(temp fastq 5)<\/p>\n<ul>\n<li>\u00a0(temp taxa fa.gz) can be replaced by the JGI contamination database if the JGI contamination database did not need to be modified to exclude NCBI taxonomy ids<\/li>\n<li>ordered: keep the reads in the output fastq the same order as the input fastq<\/li>\n<li>quickmatch: generate cigar strings quickly<\/li>\n<li>k=13: kmer length used to find kmers matching 'ref'<\/li>\n<li>idtag=t: write tag indicating percent identity<\/li>\n<li>printunmappedcount: print the total number of unmapped reads and bases<\/li>\n<li>ow=t: overwrite the out parameter<\/li>\n<li>qtrim=rl: quality trim left and right ends of reads before mapping<\/li>\n<li>trimq=10: trim regions with average quality below 10<\/li>\n<li>untrim: undo trimming after mapping<\/li>\n<li>build=1: use a unique id for references indexed in the same directory<\/li>\n<li>ref: JGI contamination database or the (temp taxa.fa.gz) from the previous command<\/li>\n<li>in: input fastq from STEP 4<\/li>\n<li>out: intermediate fastq file<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p>$ bbmap.sh ordered k=14 idtag=t usemodulo printunmappedcount ow=t qtrim=rl trimq=10 untrim kfilter=25 maxsites=1 tipsearch=0 minratio=.9 maxindel=3 minhits=2 bw=12 bwr=0.16 fast=true maxsites2=10 zl=8 in=(temp fastq 5) out=(final filtered fastq)<\/p>\n<ul>\n<li>ordered: keep the reads in the output fastq the same order as the input fastq<\/li>\n<li>k=14: kmer length used to find kmers matching 'ref'<\/li>\n<li>itag=t: write tag indicating percent identity<\/li>\n<li>usemodulo: throw away 80% of kmers based on remainder moduloa number to reduce RAM usage<\/li>\n<li>printunmappedcount: print the total number of unmapped reads and bases<\/li>\n<li>ow=t: overwrite the out parameter<\/li>\n<li>qtrim=rl: quality trim left and right ends of reads before mapping<\/li>\n<li>trimq=10: trim regions with average quality below 10<\/li>\n<li>untrim: undo trimming after mapping<\/li>\n<li>kfilter=25: potential mapping sites must have at least 25 consecutive exact matches<\/li>\n<li>maxsites=1: maximum number of total alignments to print per read<\/li>\n<li>tipsearch=0: do not look for read end deletions<\/li>\n<li>minratio=.9: minratio is 0.9<\/li>\n<li>maxindel=3: do not look for indels longer than this<\/li>\n<li>minhits=2: minimum number of seed hits required for candidate sites<\/li>\n<li>bw=2: restrict bandwidth ratio to 2<\/li>\n<li>bwr=0.16: restrict alignment band to this fraction of the read length<\/li>\n<li>fast=true: macro to set other parameters to run faster at reduced sensitivity<\/li>\n<li>maxsites2=10: do not analze more than this many alignments per read<\/li>\n<li>zl=8: gzip compression level<\/li>\n<li>in: input fastq from previous command (temp fastq 5)<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Identify reads matching references in the JGI contamination databases\u00a0using bbmap and remove them from the fastq file from STEP 4.<\/p>\n<p>This step is optional.<\/p>\n<p>\u00a0<\/p>\n<p>$ filterbytaxa.sh names=(ncbi tax id) include=f tree=tree.taxtree.gz level=order ow=t in=(JGI contamination database) out=(temp taxa.fa.gz)<\/p>\n<ul>\n<li>this step is optional.\u00a0 It removes references matching the (ncbi tax id).\u00a0 If the sequence is E. Coli and E. Coli is in the contamination database then this step excludes it from being removed<\/li>\n<li>names: list of ncbi taxonomy ids to exclude from removing (e.g. cat = 9685)<\/li>\n<li>level=order: use references at the order level to exclude from removal (e.g. cat = 9685, order = Carnivora, anything in the Carnivora order will not be removed)<\/li>\n<li>tree=tree.taxtree.gz: taxonomy tree file<\/li>\n<li>include=f: discard filtered sequences<\/li>\n<li>ow=t: overwrite the out parameter<\/li>\n<li>in: JGI contamination database [4]<\/li>\n<li>out: output contamination database with 'names' removed, used for mapping<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p>$ bbmap.sh ordered quickmatch k=13 idtag=t printunmappedcount ow=t qtrim=rl trimq=10 untrim build=1 ref=(temp taxa fa.gz) in=(temp fastq 4) out=(temp fastq 5)<\/p>\n<ul>\n<li>\u00a0(temp taxa fa.gz) can be replaced by the JGI contamination database if the JGI contamination database did not need to be modified to exclude NCBI taxonomy ids<\/li>\n<li>ordered: keep the reads in the output fastq the same order as the input fastq<\/li>\n<li>quickmatch: generate cigar strings quickly<\/li>\n<li>k=13: kmer length used to find kmers matching 'ref'<\/li>\n<li>idtag=t: write tag indicating percent identity<\/li>\n<li>printunmappedcount: print the total number of unmapped reads and bases<\/li>\n<li>ow=t: overwrite the out parameter<\/li>\n<li>qtrim=rl: quality trim left and right ends of reads before mapping<\/li>\n<li>trimq=10: trim regions with average quality below 10<\/li>\n<li>untrim: undo trimming after mapping<\/li>\n<li>build=1: use a unique id for references indexed in the same directory<\/li>\n<li>ref: JGI contamination database or the (temp taxa.fa.gz) from the previous command<\/li>\n<li>in: input fastq from STEP 4<\/li>\n<li>out: intermediate fastq file<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p>$ bbmap.sh ordered k=14 idtag=t usemodulo printunmappedcount ow=t qtrim=rl trimq=10 untrim kfilter=25 maxsites=1 tipsearch=0 minratio=.9 maxindel=3 minhits=2 bw=12 bwr=0.16 fast=true maxsites2=10 zl=8 in=(temp fastq 5) out=(final filtered fastq)<\/p>\n<ul>\n<li>ordered: keep the reads in the output fastq the same order as the input fastq<\/li>\n<li>k=14: kmer length used to find kmers matching 'ref'<\/li>\n<li>itag=t: write tag indicating percent identity<\/li>\n<li>usemodulo: throw away 80% of kmers based on remainder moduloa number to reduce RAM usage<\/li>\n<li>printunmappedcount: print the total number of unmapped reads and bases<\/li>\n<li>ow=t: overwrite the out parameter<\/li>\n<li>qtrim=rl: quality trim left and right ends of reads before mapping<\/li>\n<li>trimq=10: trim regions with average quality below 10<\/li>\n<li>untrim: undo trimming after mapping<\/li>\n<li>kfilter=25: potential mapping sites must have at least 25 consecutive exact matches<\/li>\n<li>maxsites=1: maximum number of total alignments to print per read<\/li>\n<li>tipsearch=0: do not look for read end deletions<\/li>\n<li>minratio=.9: minratio is 0.9<\/li>\n<li>maxindel=3: do not look for indels longer than this<\/li>\n<li>minhits=2: minimum number of seed hits required for candidate sites<\/li>\n<li>bw=2: restrict bandwidth ratio to 2<\/li>\n<li>bwr=0.16: restrict alignment band to this fraction of the read length<\/li>\n<li>fast=true: macro to set other parameters to run faster at reduced sensitivity<\/li>\n<li>maxsites2=10: do not analze more than this many alignments per read<\/li>\n<li>zl=8: gzip compression level<\/li>\n<li>in: input fastq from previous command (temp fastq 5)<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"369876","previous_id":"369880","original_id":"0","guid":"6557B32F96C645FBA3222BEC43D582E6","previous_guid":"B3BC249A8D714DAB85767E3EB7D5768F","component_type_id":"6","data_id":"0","data":"Contamination Removal","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Contamination Removal"},"is_project":0}]},{"id":"351380","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"3A8B0B1118D24827B63F286950726B87","previous_guid":"8B89294D22C542F38EE51F749CABFC9F","previous_id":"264956","last_modified":"1488232745","components":[{"component_id":"536971","previous_id":0,"original_id":"0","guid":"A98E8D45335D440A999DB3D31C96A18A","previous_guid":null,"component_type_id":"1","data_id":"0","data":"<p>This command removes reads that match the JGI sequencing adapters database.<\/p>\n<p>\u00a0<\/p>\n<p>Commands:<\/p>\n<p>$ bbduk.sh ktrim=r ordered minlen=51 minlenfraction=0.33 mink=11 tbo tpe rcomp=f k=23 ow=t hdist1=1 hdist2=1 ftm=5 zl=4 in=(temp fastq 1) out=(temp fastq 2) ref=(JGI sequencing adapters db.fa)<\/p>\n<ul>\n<li>ktrim = r: trim read to remove bases matching reference on the right of the read<\/li>\n<li>ordered: keep reads in the same order as the input fastq (temp fastq 1)<\/li>\n<li>minlen=51: keep reads with at least 51 bases<\/li>\n<li>minlenfraction=0.33: keep reads that are at least 33% of the original size<\/li>\n<li>mink=11: length of shortest kmer to use to identify kmer as matching the reference<\/li>\n<li>tbo: trim by overlap on (trim adapters based on where paired reads overlap)<\/li>\n<li>tpe: when right-trimming, trim both read of the minimum length of each other<\/li>\n<li>rcomp=f: do not look for reverse compliments of kmers<\/li>\n<li>k=23: kmer length used to find kmers matching 'ref'<\/li>\n<li>ow=t: overwrite 'out' file<\/li>\n<li>hdist1=1: hamming distance of 1, used to identify kmers as matching 'ref'<\/li>\n<li>hdist2=1: hamming distance of 1 for short kmers<\/li>\n<li>ftm=5: right trim length to be equal to module 'ftm'<\/li>\n<li>zl=4: zip level (gzip)<\/li>\n<li>in: input fastq file<\/li>\n<li>out: intermediate fastq file after this first step<\/li>\n<li>ref: JGI sequencing artifacts database [1]<\/li>\n<\/ul>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>This command removes reads that match the JGI sequencing adapters database.<\/p>\n<p>\u00a0<\/p>\n<p>Commands:<\/p>\n<p>$ bbduk.sh ktrim=r ordered minlen=51 minlenfraction=0.33 mink=11 tbo tpe rcomp=f k=23 ow=t hdist1=1 hdist2=1 ftm=5 zl=4 in=(temp fastq 1) out=(temp fastq 2) ref=(JGI sequencing adapters db.fa)<\/p>\n<ul>\n<li>ktrim = r: trim read to remove bases matching reference on the right of the read<\/li>\n<li>ordered: keep reads in the same order as the input fastq (temp fastq 1)<\/li>\n<li>minlen=51: keep reads with at least 51 bases<\/li>\n<li>minlenfraction=0.33: keep reads that are at least 33% of the original size<\/li>\n<li>mink=11: length of shortest kmer to use to identify kmer as matching the reference<\/li>\n<li>tbo: trim by overlap on (trim adapters based on where paired reads overlap)<\/li>\n<li>tpe: when right-trimming, trim both read of the minimum length of each other<\/li>\n<li>rcomp=f: do not look for reverse compliments of kmers<\/li>\n<li>k=23: kmer length used to find kmers matching 'ref'<\/li>\n<li>ow=t: overwrite 'out' file<\/li>\n<li>hdist1=1: hamming distance of 1, used to identify kmers as matching 'ref'<\/li>\n<li>hdist2=1: hamming distance of 1 for short kmers<\/li>\n<li>ftm=5: right trim length to be equal to module 'ftm'<\/li>\n<li>zl=4: zip level (gzip)<\/li>\n<li>in: input fastq file<\/li>\n<li>out: intermediate fastq file after this first step<\/li>\n<li>ref: JGI sequencing artifacts database [1]<\/li>\n<\/ul>"},"is_project":0},{"component_id":"536968","previous_id":"536971","original_id":"0","guid":"370F7AFFE2024CAC844F836F20F6112D","previous_guid":"A98E8D45335D440A999DB3D31C96A18A","component_type_id":"6","data_id":"0","data":"Remove Sequencing Adapters","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Remove Sequencing Adapters"},"is_project":0}]},{"id":"351388","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"C2F8C6C33E304CEF8895D58132866A7E","previous_guid":"3A8B0B1118D24827B63F286950726B87","previous_id":"351380","last_modified":"1487982242","components":[{"component_id":"536986","previous_id":0,"original_id":"0","guid":"F85585444FC7474885CDDFEDC0E26BF0","previous_guid":null,"component_type_id":"1","data_id":"0","data":"<p>This step removes reads and regions with low quality or match the JGI sequencing artifacts database [2].<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>$ bbduk.sh maq=5 trimq=10 qtrim=f ordered ow=t maxns=1 minlen=51 minlenfraction=0.33 k=25 hdist=1 zl=6 cf=t ref=(JGI sequencing artifacts db #2.fa) in=(temp fastq STEP 2) out=(temp fastq STEP 3)<\/p>\n<ul>\n<li>maq=5: reads with average quality below 5 will be discarded (after trimming)<\/li>\n<li>trimq=10: regions with quality below 10 will be trimmed<\/li>\n<li>qtrim=f: trim read ends to remove bases with quality below trimq (f = do not do this)<\/li>\n<li>ordered: keep reads in the same order as the input fastq (temp fastq 2)<\/li>\n<li>ow=t: overwrite 'out' file<\/li>\n<li>maxns=1: remove reads with more than 1 N in the read<\/li>\n<li>minlen=51: keep reads with at least 51 bases<\/li>\n<li>minlenfraction=0.33: keep reads that are at least 33% of the original size<\/li>\n<li>k=25: kmer length used to find kmers matching 'ref'<\/li>\n<li>hdist1=1: hamming distance of 1, used to identify kmers as matching 'ref'<\/li>\n<li>zl=6: zip level<\/li>\n<li>cf=t: discard reads if the chastity filter = Y in the read header<\/li>\n<li>in: input fastq file from STEP 2 'out='<\/li>\n<li>out: intermediate fastq file for this STEP<\/li>\n<li>ref: JGI sequencing artifacts database [2]<\/li>\n<\/ul>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>This step removes reads and regions with low quality or match the JGI sequencing artifacts database [2].<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>$ bbduk.sh maq=5 trimq=10 qtrim=f ordered ow=t maxns=1 minlen=51 minlenfraction=0.33 k=25 hdist=1 zl=6 cf=t ref=(JGI sequencing artifacts db #2.fa) in=(temp fastq STEP 2) out=(temp fastq STEP 3)<\/p>\n<ul>\n<li>maq=5: reads with average quality below 5 will be discarded (after trimming)<\/li>\n<li>trimq=10: regions with quality below 10 will be trimmed<\/li>\n<li>qtrim=f: trim read ends to remove bases with quality below trimq (f = do not do this)<\/li>\n<li>ordered: keep reads in the same order as the input fastq (temp fastq 2)<\/li>\n<li>ow=t: overwrite 'out' file<\/li>\n<li>maxns=1: remove reads with more than 1 N in the read<\/li>\n<li>minlen=51: keep reads with at least 51 bases<\/li>\n<li>minlenfraction=0.33: keep reads that are at least 33% of the original size<\/li>\n<li>k=25: kmer length used to find kmers matching 'ref'<\/li>\n<li>hdist1=1: hamming distance of 1, used to identify kmers as matching 'ref'<\/li>\n<li>zl=6: zip level<\/li>\n<li>cf=t: discard reads if the chastity filter = Y in the read header<\/li>\n<li>in: input fastq file from STEP 2 'out='<\/li>\n<li>out: intermediate fastq file for this STEP<\/li>\n<li>ref: JGI sequencing artifacts database [2]<\/li>\n<\/ul>"},"is_project":0},{"component_id":"536983","previous_id":"536986","original_id":"0","guid":"B033255649C142E4A68EA7F2AD53E907","previous_guid":"F85585444FC7474885CDDFEDC0E26BF0","component_type_id":"6","data_id":"0","data":"Quality Filtering","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Quality Filtering"},"is_project":0}]}]}