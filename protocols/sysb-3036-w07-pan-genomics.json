{"id":18049,"title":"SYSB 3036 W07: Pan-genomics","title_html":"SYSB 3036 W07: Pan-genomics","image":{"source":"https:\/\/www.protocols.io\/img\/default_protocol.png","placeholder":"https:\/\/www.protocols.io\/img\/default_protocol.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.vu9e6z6","doi_status":2,"uri":"sysb-3036-w07-pan-genomics-vu9e6z6","type_id":1,"published_on":1552771735,"version_id":0,"created_on":1543078932,"categories":null,"creator":{"name":"Frank Aylward","affiliation":"Virginia Tech","username":"frank-aylward","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png"},"badges":[{"id":4,"image":{"source":"\/img\/badges\/gold.svg","placeholder":"\/img\/badges\/gold.svg"},"name":"Gold power author!"}],"research_interests":null},"journal":null,"journal_name":null,"journal_link":null,"public":1,"has_versions":0,"link":null,"total_collections":0,"number_of_steps":13,"authors":[{"name":"Frank Aylward","affiliation":"Virginia Tech","username":"frank-aylward","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png"},"badges":[],"research_interests":null}],"versions":[],"groups":[],"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"forks_count":{"private":0,"public":0},"steps":[{"id":685257,"guid":"35F1CAC0F01811E8800CF3D73E56B467","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"AD057A52D077408389A9CF5604C119A0","order_id":1,"type_id":6,"title":"Section","source":{"title":"Get the data"}},{"id":1054724,"guid":"F2D5A642976B4B218E90FB8258D22073","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">First we need to get some data to start with. I have already prepared some starting files and put them on a GitHub repository, so we can download it using the following command:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">git clone https:\/\/github.com\/faylward\/pangenomics_tutorial<\/span><\/div><div class = \"text-block\">After this command finishes you should see a new folder called \"pangenomics_tutorial\", and inside of this folder you should see a file called \"micropan-source.R\" and a folder with 4 gzipped .faa files (.faa.gz).<\/div><div class = \"text-block\">You can check with:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">cd pangenomics_tutorial<\/span><\/div><div class = \"text-block\">and then:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">ls -la<\/span><\/div><div class = \"text-block\">The \"micropan-source.R\" file contains source code written in the R language that we will use later in the tutorial. No need to do anything with it just yet.  <\/div><div class = \"text-block\">The four .faa.gz files correspond to the proteins encoded in 4 Chlamydia pneumoniae genomes that I downloaded from NCBI RefSeq. I chose these genomes since Chlamydia pneumonieae genomes are relatively small (~1 Mbp) and encoded only ~1,000 genomes, so calculating orthologous groups between 4 genomes should not take too long. Calculating orthologous groups gets quickly becomes computationally intensive as we add more genomes, so using smaller genomes should save us a bit of time. Also, Chlamydia pneumoniae is a fascinating pathogen that causes lung infections, and so it's an interesting bug to study here (for more information see the CDC page: <\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/www.cdc.gov\/pneumonia\/atypical\/cpneumoniae\/index.html<\/span><\/a><\/div><div class = \"text-block\">)<\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":685258,"guid":"AF8B49F0F01911E8800CF3D73E56B467","previous_id":685257,"previous_guid":"35F1CAC0F01811E8800CF3D73E56B467","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"B29C25601271413C8095883E178F65D7","order_id":1,"type_id":6,"title":"Section","source":{"title":"Unzip the .faa.gz files and run proteinortho to get orthologous groups"}},{"id":1054724,"guid":"688E0F5ACABE4BB494F37DBE78C15655","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">First we need to unzip the .faa files in the fasta\/ folder so we can begin to analyze the protein files. <\/div><div class = \"text-block\">If you are in the folder pangenomics_tutorial you can run the command:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">gunzip fasta\/*.faa.gz<\/span><\/div><div class = \"text-block\">and then check with:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">ls -la fasta<\/span><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#94EBFF"},{"id":685259,"guid":"8FA4AC70F01A11E8800CF3D73E56B467","previous_id":685258,"previous_guid":"AF8B49F0F01911E8800CF3D73E56B467","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"2672AAB9D4734C5CA7816DAFEB894673","order_id":1,"type_id":6,"title":"Section","source":{"title":"Run Proteinortho to get orthologous groups"}},{"id":1054724,"guid":"32F7453630B24F0BB63B1DFDB41BD9E3","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Here we will run a similar command to the one we used in the \"orthologous groups\" tutorial, only this time we will be including 5 genomes instead of 2 or 3. You can modify the \"-cpus\" flag depending on how many cores you would like to use. Using 2 cores this should take about 2 minutes to complete. <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">proteinortho5 -project=cp_pangenome -cpus=2 -singles fasta\/*.faa<\/span><\/div><div class = \"text-block\">And of course after this we should use the \"ls\" command to ensure that the appropriate new files were created:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">ls -la<\/span><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#84CE84"},{"id":685260,"guid":"67CE0BA0F01B11E8800CF3D73E56B467","previous_id":685259,"previous_guid":"8FA4AC70F01A11E8800CF3D73E56B467","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"39EE41EFB4034F1F9BA4925A269BD445","order_id":1,"type_id":6,"title":"Section","source":{"title":"Get orthologous group statistics"}},{"id":1054724,"guid":"38689805F1554776833DD2927269E1CB","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">The main output file we want to work with from Proteinortho is the \".proteinortho\" file. Use \"head\" and \"tail\" to take a look at this file. The lines are a bit long, here is the general format:<\/div><div class = \"text-block\">- Each row (aside from the header) has information for one protein cluster (or protein family- both terms are equivalent here). <\/div><div class = \"text-block\">- Each line is tab-delimited, and the first three columns have information about that particular cluster. <\/div><div class = \"text-block\">- The first column provides the # of species in which a cluster is present. Here a 5 would mean the protein cluster is found in every genome. <\/div><div class = \"text-block\">- The second column provides the number of proteins that are present. This can be different than the first column since one genome can have multiple members of a given protein cluster. <\/div><div class = \"text-block\">- The third column has the Algebraic connectedness. We won't worry about this here, but this gives some information about how the proteins are distributed in the different genomes. <\/div><div class = \"text-block\">- After that, the number of columns depends on the number of genomes that we analyzed. Since we have 5 genomes there will be 5 more columns (for a total of 8). Each of these next columns just has the names of the proteins that belong to a cluster, or a * if no proteins for that cluster were found. <\/div><div class = \"text-block\">If we want to know how many protein clusters were found, we can just use \"wc\" and subtract one from the line count (since one line is the header). <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">wc -l cp_pangenome.proteinortho<\/span><\/div><div class = \"text-block\">I got 1197 total lines, so 1196 total protein clusters. <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#FFED92"},{"id":685261,"guid":"D71F5C20F01B11E8800CF3D73E56B467","previous_id":721931,"previous_guid":"A9A139E0482B11E9A8AE5132E04C9D96","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"B17384B0FDFE4A9088E870A1141A60A6","order_id":1,"type_id":6,"title":"Section","source":{"title":"Start an R session and load in the micropan source code"}},{"id":1054724,"guid":"F0FDB9275F884E0D8C6B5B8BA765B9E1","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">For the next few steps we will be operating in the R programming language. To do this we can start R and then continue working in the command line, only this time we will need to use R command rather than Unix commands. <\/div><div class = \"text-block\">The reason we are doing this is that there is a very nice R package called \"micropan\" for pan-genomics analysis, and it is written in R. <\/div><div class = \"text-block\">To start an R session simply type:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">R<\/span><\/div><div class = \"text-block\">And you should see an R console open up with a welcome message, and with the cursor now starting with a \">\" symbol. <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#EA9F6C"},{"id":685262,"guid":"345FE350F01C11E8800CF3D73E56B467","previous_id":685261,"previous_guid":"D71F5C20F01B11E8800CF3D73E56B467","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"B799038453854072AE539261AA378798","order_id":1,"type_id":6,"title":"Section","source":{"title":"Load in the micropan source code"}},{"id":1054724,"guid":"9CF9B8A2F39B43C2B4F2095DFDFFC1D0","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Since we need to use code that is part of the micropan R package, we need to load this code into our console before continuing. <\/div><div class = \"text-block\">To do this we can use the R command \"source\" and specify the file \"micropan-source.R\" that was in the \"pangenomics-tutorial\" folder. For me this would look like:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">source(\"week7\/pangenomics_tutorial\/micropan-source.R\")<\/span><\/div><div class = \"text-block\">You will need to change this depending on what the PATH to the micorpan-source.R file looks like. Make sure there are no spaces in your folder names- R will not like this. <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#E57785"},{"id":685263,"guid":"95819C50F01C11E8800CF3D73E56B467","previous_id":685262,"previous_guid":"345FE350F01C11E8800CF3D73E56B467","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"EC40C142CA854CFDBC7E37CD282239D4","order_id":1,"type_id":6,"title":"Section","source":{"title":"Load the .proteinortho file into R"}},{"id":1054724,"guid":"3DD5BD9640DE47D38D65177E21361BE4","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Now that we are in R and have the micropan code loaded into our session, we will need to load in the results we got from Proteinortho so we can start analyzing them. For this we will create an R DataFrame simply \"x\" that will contain the data from the \"cp_pangenome.proteinortho\" file.<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">x <- read.table(\"week7\/pangenomics_tutorial\/cp_pangenome.summary\",  header=T,  sep=\"\\t\")<\/span><\/div><div class = \"text-block\">A few notes:<\/div><div class = \"text-block\">- Here \"<-\" is essentially a fancy \"=\" that is used in R. <\/div><div class = \"text-block\">- \"read.table\" is the R function for loading data.<\/div><div class = \"text-block\">- header=T  <\/div><div class = \"text-block\">- sep=\"\\t\" specifies that the file is tab-delimited (\"\\t\" is a general expression for tabs).<\/div><div class = \"text-block\">Now in addition to loading the data into R we also need to transform it into a \"pangenome matrix\" object that is more easily used by micropan. You will see things like this a lot in R, since different packages need data to be organized in a certain way. We can do this with the simple command:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">panmat <- as.panmat(x)<\/span><\/div><div class = \"text-block\">And now we have our data stored as a pangenome matrix in the \"panmat\" object.<\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":685264,"guid":"9331C370F01D11E8800CF3D73E56B467","previous_id":685263,"previous_guid":"95819C50F01C11E8800CF3D73E56B467","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"B6CA8AEDED6A442AB7B03995109928A9","order_id":1,"type_id":6,"title":"Section","source":{"title":"Summarize the data"}},{"id":1054724,"guid":"719AE53E1E754A6894B22D24AEF7D406","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Now we can start using micropan functions to analyze the data. <\/div><div class = \"text-block\">A simple function to start with is \"summary\":<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">summary(panmat)<\/span><\/div><div class = \"text-block\">This should provide statistics that we already received in Step 4. It's always good to verify that they are the same. <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#84CE84"},{"id":685265,"guid":"2A505400F01F11E8800CF3D73E56B467","previous_id":685264,"previous_guid":"9331C370F01D11E8800CF3D73E56B467","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"3220C4D076D4478CA0A582615400AF07","order_id":1,"type_id":6,"title":"Section","source":{"title":"Generate a rarefaction curve"}},{"id":1054724,"guid":"EA40EBCF396E456BB9E4D96EF08356AC","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">A standard pan-genomic analysis is to create a rarefaction curve of new proteins identified vs # of genomes used. <\/div><div class = \"text-block\">The general idea behind a rarefaction curve is to see how many new genes we find every time we add a new genome. The rate at which new genes are identified every time we add a new genome tells us something about how variable the gene content is between the genomes we are analyzing. <\/div><div class = \"text-block\">Rarefaction curves generally taper off as the x-axis (number of genomes) increases, telling us that sampling a certain number of genomes is sufficient to sample nearly all of the genes in a species. However, sometimes the rarefaction curve continues to increase, telling us that possibly no number of genomes will give us a good enough sampling of all the genes present in that group. The genetic diversity of prokaryotes is pretty amazingly high, so this is not necessarily a surprising result. <\/div><div class = \"text-block\">To calculate the rarefaction curve let's use the following code:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">rarefy <- rarefaction(panmat, n.perm=100)<\/span><\/div><div class = \"text-block\">To get a summary of the rarefaction results we can type:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">summary(rarefy)<\/span><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#EA9F6C"},{"id":685345,"guid":"FA397350F0EB11E8811D5BCE0F069C3A","previous_id":685265,"previous_guid":"2A505400F01F11E8800CF3D73E56B467","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"C30CC49091AA45B299677FDF9D8DD230","order_id":1,"type_id":6,"title":"Section","source":{"title":"Generate a rarefaction curve"}},{"id":1054724,"guid":"F8BF492BB29B4DDEA10EEA2846E351DC","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Lastly, it is always nice to get a graph of the rarefaction curve so we can visualize the results. <\/div><div class = \"text-block\">Generating a plot in R is a 3-step process. <\/div><div class = \"text-block\">First we need to generate a file that the plot will be written to. Here let's try to create a JPEG file:\n<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">jpeg(\"rarefaction.jpg\")<\/span><\/div><div class = \"text-block\">Then we need to plot the graph. Here I will simply use the \"plot\" function and set the y-axis limits to be from 0 to the max rarefaction value:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">plot(rarefy, ylim=c(0, max(rarefy)))<\/span><\/div><div class = \"text-block\">And then we need to close the graphical device so that R knows we are finished plotting to that file:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">dev.off()<\/span><\/div><div class = \"text-block\">\nDepending on your system you could just use the \"plot\" command above, and a new window with the plot may upen up. However, to save the plot as an image file you will still need to use the \"jpeg\" and \"dev.off()\" commands. <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":721931,"guid":"A9A139E0482B11E9A8AE5132E04C9D96","previous_id":685260,"previous_guid":"67CE0BA0F01B11E8800CF3D73E56B467","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"70DC2AC347584EB18EEA5C5634C56ABA","order_id":1,"type_id":6,"title":"Section","source":{"title":"Get orthologous group statistics"}},{"id":1054724,"guid":"3A589391427946E5BE40555147BCB99A","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Now we can start looking through the .proteinortho file to get some idea of what the pan-genome looks like. This will tell us how many proteins are shared between different genomes, and how many unique proteins each genome has. <\/div><div class = \"text-block\">Let's say I want to know how many proteins were found in all genomes exactly one time. For this I can search for \"5\\5\" since that should match only to the first two columns. We need to use the \"-P\" flag here to make sure the whitespace is matched.  <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">cut -f 1-2 cp_pangenome.proteinortho | grep -P \"5\\t5\" | wc | wc -l<\/span><\/div><div class = \"text-block\">And if we want to find how many proteins were present only once in one genome, we can use:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">cut -f 1-2 cp_pangenome.proteinortho | grep -P \"1\\t1\" | wc | wc -l<\/span><\/div><div class = \"text-block\">I got 986 protein clusters shared between 5 genomes and only 117 singleton clusters. This is out of 1197 total. So the majority of the proteins encoded in these genomes are shared between all 5 genomes, indicating a rather restricted pan-genome (i.e., not a huge amount of variability). <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":721932,"guid":"35E227A0482E11E9A8AE5132E04C9D96","previous_id":685345,"previous_guid":"FA397350F0EB11E8811D5BCE0F069C3A","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"DF6F1B94162944B79DEB7A9BE7616C8E","order_id":1,"type_id":6,"title":"Section","source":{"title":"Generate a rarefaction curve"}},{"id":1054724,"guid":"FE9BF1EE4E9044C38484D360900ACE69","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">In addition to rarefaction curves there are a few other ways we can analyze the pan-genome data. <\/div><div class = \"text-block\">For example we can also get the \"Chao\" statistic for a pan-genome, which is the estimated number of genes we would have if we could sequence infinitely many genomes (this is like estimating where the rarefaction curve eventually levels off if we follow the rarefaction curve as far to the right as we can).<\/div><div class = \"text-block\">in R we can calculate this easily with:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">chao(panmat)<\/span><\/div><div class = \"text-block\">Here I got 1684, which seems about right given we have just under 1200 genes with only 5 genomes. <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":721933,"guid":"A40865A0482E11E9A8AE5132E04C9D96","previous_id":721932,"previous_guid":"35E227A0482E11E9A8AE5132E04C9D96","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"87326727E49D41D2AC709295F0F6C34E","order_id":1,"type_id":6,"title":"Section","source":{"title":"Generate a rarefaction curve"}},{"id":1054724,"guid":"820F79243E8A4CECACE29E21D0707180","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Lastly, we can calculate a statistics by fitting the data to Heap's Law, which was initially formulated to estimate the number of distinct words in a text document. Here we can use it to get an estimate for how diverse our pan-genome is. <\/div><div class = \"text-block\">A value of alpha > 1 is used to describe \"closed\" pan-genomes, or those in which we do not see that many unique genes in genomes. An \"open\" pan-genome has an alpha < 1 and is used to describe highly variable pan-genomes in which each genome has many unique genes. We can calcualte alpha with:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">heap <- heaps(panmat, 1000)<\/span><\/div><div class = \"text-block\">I generally use a large value for the number of permuatations to use for estimating this paramter (~1000). I've noticed the values can be quite variable if a smaller number of permutations is used. <\/div><div class = \"text-block\">Here I got a value of ~0.75. So the Chlamydia genomes still technically have \"open\" pangenomes, even though their core genome is much larger than their variable genome. <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null}],"materials":[],"description":"<div class = \"text-blocks\"><\/div>","changed_on":1552771735}