{"id":18287,"title":"SYSB 3036 W10: Read mapping","title_html":"SYSB 3036 W10: Read mapping","image":{"source":"https:\/\/www.protocols.io\/img\/default_protocol.png","placeholder":"https:\/\/www.protocols.io\/img\/default_protocol.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.v4pe8vn","doi_status":2,"uri":"sysb-3036-w10-read-mapping-v4pe8vn","type_id":1,"published_on":1545401642,"version_id":3,"created_on":1543890156,"categories":null,"creator":{"name":"Frank Aylward","affiliation":"Virginia Tech","username":"frank-aylward","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png"},"badges":[{"id":4,"image":{"source":"\/img\/badges\/gold.svg","placeholder":"\/img\/badges\/gold.svg"},"name":"Gold power author!"}],"research_interests":null},"journal":null,"journal_name":null,"journal_link":null,"public":1,"has_versions":1,"link":null,"number_of_steps":8,"authors":[{"name":"Frank Aylward","affiliation":"Virginia Tech","username":null,"link":null,"image":{"source":null,"placeholder":null},"badges":[],"research_interests":null}],"versions":[],"groups":[],"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"forks_count":{"private":0,"public":0},"steps":[{"id":687892,"guid":"C949E8B1636247EBB323DD7A6F63D343","previous_id":687897,"previous_guid":"D9AE44608009431E99B7B759438B7854","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"7FCA3720625B4BAE92F6AE293E177D45","order_id":1,"type_id":6,"title":"Section","source":{"title":"Download the reference genome and index a database with bowtie2"}},{"id":1054723,"guid":"B3E42B3FF7D34BD6868587BB93FD6D1E","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">The datasets we will be using here are part of the Dedrick et al BMC Microbiology paper (more details in the Description for this tutorial), which describes some very cool transcriptomic experiments of Mycobacterium smegmatis while is infected with various bacteriophage. <\/div><div class = \"text-block\">There are several short-read Illumina transcriptomes that are part of this study, but this week we will only consider that associated with the accession\u00a0SRR5585000, which corresponds to a transcriptomic study of M. smegmatis during infection with mycobacteriophage D29. The RNA from this accession was extracted 15 minutes after infection, and other timepoints are also available (see all of the datasets on the Gene Expression Omnibus:\u00a0https:\/\/www.ncbi.nlm.nih.gov\/geo\/query\/acc.cgi?acc=GSE99182).\u00a0<\/div><div class = \"text-block\">Let's download the raw Illumina reads using the fastq-dump utility in the SRA toolkit:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">fastq-dump -X 10000 SRR5585000<\/span><\/div><div class = \"text-block\">The -X flag here indicates that instead of downloading the entire dataset, we only wish to download the first 10,000 reads. This is just for simplicity and to keep the datasets small (10,000 may seem large, but its a small number of reads compared to most transcriptome studies).\u00a0<\/div><div class = \"text-block\">After this we can us the 'ls' command to ensure that the file was downloaded, and then take a quick look inside with the 'head' command to ensure it looks like typical FASTQ format. You should see something like this:<\/div><div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/pr-journal\/yhdjtte.png\" \/><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":687893,"guid":"B872450BFAC94909A1CB49AF7CC55A69","previous_id":687902,"previous_guid":"140FAE90F77011E8A268BFDF8E409DEE","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"497B524A902E4D8DA7540D9B73AC3990","order_id":1,"type_id":6,"title":"Section","source":{"title":"Download a reference genome"}},{"id":1054723,"guid":"86D0495E2EEA479AB0A2E2792243076E","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Now we need to get a reference genome to map reads against. The raw reads themselves are not that interesting unless we have a good quality reference genome that we can map the reads against. <\/div><div class = \"text-block\">The focus of this particular experiment was mycobacteriophage D29, so let's download the FASTA file of that genome using the Unix wget command:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">wget -O D29.fna.gz ftp:\/\/ftp.ncbi.nlm.nih.gov\/genomes\/all\/GCA\/003\/004\/865\/GCA_003004865.1_ASM300486v1\/GCA_003004865.1_ASM300486v1_genomic.fna.gz<\/span><\/div><div class = \"text-block\">and, because the file is compressed, let's unpack it:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">\n<\/span><span style = \"font-weight:bold;\">gunzip D29.fna.gz<\/span><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":687894,"guid":"BC8005619EB3447B81F429577A8A7835","previous_id":687899,"previous_guid":"B3215710F76E11E8A268BFDF8E409DEE","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"578670C1A0604754B64932B246DCD868","order_id":1,"type_id":6,"title":"Section","source":{"title":"Perform the read mapping"}},{"id":1054723,"guid":"CEA8C70FAD334E889F323B7D8BC09C65","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Generally speaking one should do a bit of quality-checking on the reads before jumping straight into the mapping step. Also, it is typical to remove adapter sequences and trim off low-quality bases before mapping.<\/div><div class = \"text-block\">Since this is intended to be a conceptual tutorial, and since it doesn't change the results too much, we will skip these steps here.\u00a0Keep them in mind if you are interested in performing analyses for a formal study, though.\u00a0If you are interested in adapter clipping and quality trimming, I would recommend cutadapt for the former and sickle for the latter (https:\/\/cutadapt.readthedocs.io\/en\/stable\/guide.html\u00a0 \u00a0and\u00a0 \u00a0https:\/\/github.com\/najoshi\/sickle)<\/div><div class = \"text-block\"><span>Before we get started, just type '<\/span><span style = \"font-weight:bold;\">bowtie2<\/span><span>' and take a look at the general usage and options for this tool. Note that bowtie2 is a versatile tool that can be used in many ways. We will be using some rather simple and straightforward code here, but there are many possible options you may wish to play around with.\u00a0<\/span><\/div><div class = \"text-block\">Let's try a simple command:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">bowtie2 -U SRR5585000.fastq -x D29 -S T1.sam<\/span><\/div><div class = \"text-block\">The -U specifies that we are using unpaired reads. Keep in mind that Illumina reads are often paired, so for other data you may want to use the -1 and -2 flags to specify input data. We specify the database prefix with the -x flag, and the output SAM file with the -S flag. Bowtie2 outputs the data in 'sequence alignment map' format, which is pretty typical. For purposes here let's call the outfile T1 since it's our first time-point. <\/div><div class = \"text-block\">SAM format is rather complex and compact and contains information about which reads map, and to what locations; you can see details here:\u00a0https:\/\/en.wikipedia.org\/wiki\/SAM_(file_format).\u00a0<\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#94EBFF"},{"id":687895,"guid":"0DD66533E92F40019EC133B75D6C7951","previous_id":687894,"previous_guid":"BC8005619EB3447B81F429577A8A7835","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"1BCE4832F18742529A42B12CF6278BF2","order_id":1,"type_id":6,"title":"Section","source":{"title":"Take a look at the SAM output"}},{"id":1054723,"guid":"C167BF94A1174E649B87F49AD642AEFB","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Now let's take a look at the SAM output. SAM stands for \"Sequence Alignment Map\". SAM files are typically very large and very difficult to interpret. Most people would probably analyze SAM files with programs like Samtools (which we will go into later) and examine summary statistics rather than look in any detail at an actual raw SAM file. However it is useful to acquaint ourselves with the format a bit. <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">head T1.sam<\/span><\/div><div class = \"text-block\">and <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">tail T1.sam<\/span><\/div><div class = \"text-block\">You will probably notice a few things. The SAM file starts with a few description lines that start with the \"@\" symbol. These lines contain information about the program used for mapping, the reference sequence name, and some other things (all in very specific format). <\/div><div class = \"text-block\">After this there is one line per sequence that was mapped, together with some columns that encode specific information. The first column after the name encoded a flag that specified whether or not the read was mapped. Note that even reads that were not mapped (specified with a \"4\" in this first column). You may see a few that are mapped (code \"0\") and that some of the other columns after this have information about the sequence they mapped to, and the coordinates. <\/div><div class = \"text-block\">Overall SAM files are a fairly standard way of storing sequence and mapping information together in one file, but they are quite large. Check out the files with \"ls\":<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">ls -lh<\/span><\/div><div class = \"text-block\">Notice that the SAM file is about a large as the FASTQ file. This becomes problematic when we need to store lots and lots of mapped read data. <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#EA9F6C"},{"id":687896,"guid":"6869E19B20AE40CC983A492487009A3C","previous_id":687895,"previous_guid":"0DD66533E92F40019EC133B75D6C7951","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"B69D0BCBFD6B48A7814FDE3345F9C687","order_id":1,"type_id":6,"title":"Section","source":{"title":"Convert to SAM to BAM"}},{"id":1054723,"guid":"47B21AF1B6BD47C5BD58FC22143DB641","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Rather than spending too much time looking at the SAM file I usually just start processing it with SAMtools. Often you will see SAM files converted into BAM files (binary alignment map). BAM files are smaller since they do not require encoding to make them human-readable, and they can be processed more quickly. Since SAM and BAM files contain the same information, you will often see SAM files deleted and BAM files used for storage.\u00a0<\/div><div class = \"text-block\"><span>The following commands are a bit tedious, but they are all required to convert SAM->BAM, sort, and index the mapped reads. Before we begin take a quick look at all of the utilities available with samtools by typing \"<\/span><span style = \"font-weight:bold;\">samtools<\/span><span>\" in your command line.\u00a0<\/span><\/div><div class = \"text-block\">First we need to convert SAM->BAM and remove reads that did not map:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">samtools view -bS -F 4 T1.sam > T1.bam<\/span><\/div><div class = \"text-block\">the -F 4 flag specifies that we remove all reads with the \"4\" flag, which corresponds to those that did not map. The -bS flag is a combination of -b and -S (combined for convenience here). -b specifies that the output should be BAM format, and the -S specifies that the input is SAM. <\/div><div class = \"text-block\">Check out the output file with ls:<\/div><div class = \"text-block\">ls -la<\/div><div class = \"text-block\">Note that the BAM file is much smaller than the SAM file. This is because the BAM file only contains reads that mapped, and it is in a more compact binary format. <\/div><div class = \"text-block\"><span>Then we need to sort the reads [note: the following command works with samtools v 0.1.19-96b5f2294a, but the syntax is different with different versions. If you get an error message try using the -o flag and specifying mapping_out.sort.bam as the output file]:\n<\/span><span style = \"font-weight:bold;\">samtools sort T1.bam T1.sort<\/span><\/div><div class = \"text-block\"><span>Finally we need to index the sorted read bam file:\n<\/span><span style = \"font-weight:bold;\">samtools index T1.sort.bam<\/span><\/div><div class = \"text-block\">All of this may seem a bit tedious, but at the end we have a nice sorted bam file that we can use for multiple applications downstream.<\/div><div class = \"text-block\">To check that everything worked as we expected, we can get some summary statistics using the samtools sub-command \"idxstats\":<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">samtools idxstats T1.sort.bam<\/span><\/div><div class = \"text-block\"><span>You should see that 13670 reads mapped, just like we were told when we ran bowtie the first time. This tells us that the sorted BAM file contains the same core information as the original SAM file (only now in much more compact and sorted format)<\/span><span style = \"font-weight:bold;\">. <\/span><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#E57785"},{"id":687897,"guid":"D9AE44608009431E99B7B759438B7854","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"D85CEC54AE7D41E19B26600980B06365","order_id":1,"type_id":6,"title":"Section","source":{"title":"Download some data from GitHub and enter the new folder"}},{"id":1054723,"guid":"5B141EFB8C61445F8DAEC4C8AAACB8E4","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">This tutorial will be combined with next week's since read mapping and analysis is rather complex. For this reason we will download a file that I posted on GitHub, but we won't need it until next week. It will be easiest to do everything from this week and next in the same folder, so that is why we will initialize everything now at the start. <\/div><div class = \"text-block\">So to get started let's clone the read_mapping_tutorial folder from GitHub, and then enter that folder:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">git clone <\/span><\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/github.com\/faylward\/read_mapping_tutorial<\/span><\/a><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">cd read_mapping_tutorial<\/span><\/div><div class = \"text-block\">Now let's see what is there:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">ls -lh<\/span><\/div><div class = \"text-block\">You should see a file called D29.bed. Don't worry about this for now. Just ensure that this file stays there and is not altered until we use it. <\/div><div class = \"text-block\">Now let's continue with the next steps...<\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#EA9F6C"},{"id":687899,"guid":"B3215710F76E11E8A268BFDF8E409DEE","previous_id":687893,"previous_guid":"B872450BFAC94909A1CB49AF7CC55A69","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"31CFC4D055474F0798447485E571F612","order_id":1,"type_id":6,"title":"Section","source":{"title":"Index the reference genome"}},{"id":1054723,"guid":"192596767C294F2B9E62E628C3E3BDD2","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">We are going to map reads using bowtie2, which requires that the FASTA genome file is indexed first. Most (if not all) read mappers and homology search tools require that some kind of index or database is constructed first before the sequence comparisons are performed. Bowtie is no different. <\/div><div class = \"text-block\">To do this we can use the bowtie2-build command. First just try typing \"bowtie2-build\" just to get a handle on the general usage and options of this tool. For purposes here we can run the following command:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">bowtie2-build D29.fna D29 > bowtie2.log<\/span><\/div><div class = \"text-block\">The reason I put a \"> bowtie2.log\" at the end was because this command outputs a large amount of information to the command line, and I wanted to save it in a log file. It's usually not necessary to look at this, but if something weird happens when mapping reads later we can always go back and check to make sure the genome was indexed properly. It is also sometimes annoying to have a lot of text output directly to the command line. <\/div><div class = \"text-block\">The important thing that bowtie2-build does is create a number of bt2 files, which you should be able to see after running the command.\u00a0<\/div><div class = \"text-block\">Overall this step should look something like this:<\/div><div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/pr-journal\/yhfjtte.png\" \/><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":687902,"guid":"140FAE90F77011E8A268BFDF8E409DEE","previous_id":687892,"previous_guid":"C949E8B1636247EBB323DD7A6F63D343","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"36BACE5AD4734F07A9A6626243664330","order_id":1,"type_id":6,"title":"Section","source":{"title":"Download some data from GitHub and enter the new folder"}},{"id":1054723,"guid":"939E708372B141349D183B227169CACA","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">FASTQ files are similar to FASTA file, except that they in addition to sequence information they also encode quality values for each base of the sequence. This is because there is an error rate associated with DNA sequencing, and sometimes with raw sequencing data there can be quite a bit of low-quality bases that we want to be cautious when using (sometimes we may wish to remove these low-quality regions altogether!). <\/div><div class = \"text-block\">Let's take a look at the FASTQ file we just downloaded.<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">head SRR5585000.fastq<\/span><\/div><div class = \"text-block\">Note that the header line starts with a \"@\" rather than a \">\" that is typical of FASTA files. Also note that for every sequence there are 4 lines. The first contains the \"@\" symbol and the non-redundant sequence identifier, the second contains the sequence, the third starts with a \"+\" and contains option descriptions, and the fourth contains the quality scores for the sequence (encoded symbolically). <\/div><div class = \"text-block\">We can also parse through FASTQ files using seqkit:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit fx2tab -n -l -i SRR5585000.fastq | head<\/span><\/div><div class = \"text-block\">Make sure to pipe the results to \"head\" since there are many sequenced here. <\/div><div class = \"text-block\">Using seqkit again we can pipe the results to datamash to get the mean sequence length:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit fx2tab -n -l -i SRR5585000.fastq | datamash mean 4<\/span><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#FFED92"}],"materials":[],"description":"<div class = \"text-blocks\"><div class = \"text-block\">This is an example of a simple short read mapping analysis that could be used as part of a transcriptomics or RNA-seq workflow.\u00a0\u00a0<\/div><div class = \"text-block\">Code is intended for use on an Ubuntu 16.04 LTS OS, but it may work on other Unix or Unix-like systems.<\/div><div class = \"text-block\">This tutorial uses data from the following very nice paper from the Hatfull group:<\/div><div class = \"text-block\">Dedrick, Mavrich, Ng, and Hatfull, Expression and evolutionary patterns of mycobacteriophage D29 and its temperate close relatives. BMC Microbiology, 2017. https:\/\/doi.org\/10.1186\/s12866-017-1131-2<\/div><div class = \"text-block\">The tools that are used include:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">SRA toolkit<\/span><span>:\u00a0https:\/\/www.ncbi.nlm.nih.gov\/sra\/docs\/toolkitsoft\/<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">bowtie2<\/span><span>:\u00a0http:\/\/bowtie-bio.sourceforge.net\/bowtie2\/index.shtml<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">samtools<\/span><span>:\u00a0http:\/\/samtools.sourceforge.net\/<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">BEDOPS<\/span><span>:\u00a0https:\/\/bedops.readthedocs.io\/en\/latest\/content\/reference\/file-management\/conversion\/bam2bed.html<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">BEDtools<\/span><span>:\u00a0https:\/\/bedtools.readthedocs.io\/en\/latest\/<\/span><\/div><div class = \"text-block\">Make sure that these tools are installed before starting the tutorial.\u00a0On a Ubuntu OS you should be able to install most with \"sudo apt install\", but you may wish to use a package manager such as Anaconda or Miniconda as well.\u00a0<\/div><div class = \"text-block\">Throughout the tutorial some notes may be made about particular versions of tools. For example, note that the version of SRA toolkit that is installed with apt install often leads to downstream errors, it may be desirable to install this tool with Miniconda instead.\u00a0<\/div><div class = \"text-block\">Miniconda bash installers can be found here:\u00a0https:\/\/conda.io\/miniconda.html<\/div><\/div>"}