{"uri":"introduction-to-calculating-dn-ds-ratios-with-code-qhwdt7e","version_id":"1","protocol_name":"Introduction to calculating dN\/dS ratios with codeml","protocol_name_html":"Introduction to calculating dN\/dS ratios with codeml","is_prepublished":"0","can_edit":"0","parent_id":"12565","api_version":"1","is_new_mode":"0","last_modified":"1527921679","type_id":"1","link":null,"fork_id":"","public_fork_note":"","number_of_steps":"4","has_versions":"1","first_published_date":"1527522312","publish_date":"2018-05-28 15:45:12","documents":null,"have_protocol_in_step":"0","is_protocol_in_step":"0","vendor_name":"Contributed by users","vendor_link":"https:\/\/www.protocols.io","vendor_logo":"\/img\/vendors\/1.png","mod_mins":"-15","mod_secs":"8","description":"<p>This is short tutorial on one way to calculate dN\/dS ratios between pairs of protein-coding nucleic acid sequences using codeml in the PAML package.<\/p>\n<p>\u00a0<\/p>\n<p>Code is intended for use on an Ubuntu 16.04 LTS OS, but it may work on other Unix or Unix-like systems.<\/p>\n<p>\u00a0<\/p>\n<p>The programs used in this tutorial are:<\/p>\n<p><strong>codeml in the PAML package<\/strong>. On a Ubuntu 16.04 LTS system it should be able to install this tool with \"sudo apt install paml\". http:\/\/abacus.gene.ucl.ac.uk\/software\/paml.html<\/p>\n<p><strong>PAL2NAL.<\/strong> This is essentially a PERL script that you will want to have handy, either by putting it in the folder that you are working in or by putting it somewhere that is in your PATH. http:\/\/www.bork.embl.de\/pal2nal\/<\/p>\n<p><strong>clustal-omaga<\/strong>. You should be able to install this with \"sudo apt install clustalo\" This is a nice amino acid and nucleic acid alignement program. For purposes here your choice of aligner is not critical, so if you prefer MAFFT or Muscle or something else you can continue using those. http:\/\/www.clustal.org\/omega\/\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>","is_bookmarked":"0","can_reassign":"1","before_start":null,"has_guidelines":"0","materials":[],"warning":null,"version_class":"12565","public":"1","is_owner":"1","is_original_owner":"1","created_on":"1527522107","protocol_affiliation":"Virginia Tech","affiliation":"Virginia Tech","doi":"dx.doi.org\/10.17504\/protocols.io.qhwdt7e","doi_status":"2","changed_fork_steps":null,"profile_url":"FrankAylward-y22344v2x2","protocol_img":"https:\/\/www.protocols.io\/img\/default_protocol.png","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","full_name":"Frank Aylward","created_by":"Frank Aylward","private_link":"0D5B2865BC127A9B23EADC9EA8289B9A","original_img":"1","username":"frank-aylward","is_retracted":"0","retraction_reason":null,"plos_id":null,"manuscript_citation":null,"journal_name":null,"is_donations_disabled":"0","is_donations_disabled_by_user":"9","item_record_id":317754,"fork_info":[],"compare_forks":[],"protocols":[],"groups":[],"number_of_shared_runs":[],"ownership_history":[],"keywords":"","transfer_to_user":[],"sub_transfer":false,"is_transfer_pending":false,"number_of_bookmarks":"0","collections":[],"tags":[],"archived":0,"sub_authors":[],"sub_protocols_number":0,"can_edit_shared":0,"shared_runs":[],"is_shared_run":0,"is_shared":1,"banner":null,"contact_badges":[{"badge_id":"4","badge_image":"\/img\/badges\/gold.svg","badge_description":"Gold power author!"}],"number_of_comments":0,"is_locked":0,"is_locked_by":false,"authors":"Frank Aylward","authors_list":[{"name":"Frank Aylward","affiliation":"Virginia Tech","username":"frank-aylward","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png"}],"user":{"profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","username":"frank-aylward","full_name":"Frank Aylward","created_by":"Frank Aylward"},"access":{"can_view":"1","can_remove":"0","can_add":"0","can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":"0","can_move":"1","can_transfer":"1","can_download":"1","is_locked":"0"},"is_contact_suspended":0,"guidelines":null,"status_id":"1","is_research":"0","status_info":"We use this protocol in our group and it is working","steps":[{"id":"632065","is_changed":1,"original_id":"632060","is_skipped":"0","is_checked":"0","guid":"4317ED60F7864989BC70EF2390EEB26F","previous_guid":null,"previous_id":null,"last_modified":"1527522265","components":[{"component_id":"1117100","previous_id":0,"original_id":"1117088","guid":"D23DB816D10046A0ABB38320370C559A","previous_guid":null,"component_type_id":"6","data_id":null,"data":"Get the files organized","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Get the files organized"},"is_project":0},{"component_id":"1117101","previous_id":"1117100","original_id":"1117087","guid":"8265714E76FE489FBF4AFC138D2B11B7","previous_guid":"D23DB816D10046A0ABB38320370C559A","component_type_id":"1","data_id":null,"data":"<p>When calculating dnds ratios, file organization and consistent formatting are key. This is because it is necessary to create amino acid alignments of proteins first, and then convert them to nucleic acid. For this to happen we need to have both amino acid and nucleic acid sequences in separate files, and the proteins and genes in those file need to have the exact same unique identifiers in their FASTA headers.<\/p>\n<p>\u00a0<\/p>\n<p>First we can download some pre-compiled data from GitHub:<\/p>\n<p>\u00a0<\/p>\n<p><strong>git clone https:\/\/github.com\/faylward\/dnds<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>If you navigate into the dnds\/ folder you should see four files: One amino acid FASTA file (.fna), one nucleic acid FASTA file (.faa), one codeml control file (.ctl), and one python script used for parsing the final codeml output (.py).<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>When calculating dnds ratios, file organization and consistent formatting are key. This is because it is necessary to create amino acid alignments of proteins first, and then convert them to nucleic acid. For this to happen we need to have both amino acid and nucleic acid sequences in separate files, and the proteins and genes in those file need to have the exact same unique identifiers in their FASTA headers.<\/p>\n<p>\u00a0<\/p>\n<p>First we can download some pre-compiled data from GitHub:<\/p>\n<p>\u00a0<\/p>\n<p><strong>git clone https:\/\/github.com\/faylward\/dnds<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>If you navigate into the dnds\/ folder you should see four files: One amino acid FASTA file (.fna), one nucleic acid FASTA file (.faa), one codeml control file (.ctl), and one python script used for parsing the final codeml output (.py).<\/p>"},"is_project":0}],"available_protocols":["12565"]},{"id":"632066","is_changed":1,"original_id":"632061","is_skipped":"0","is_checked":"0","guid":"59F493B874784435A32680EA1107FFD7","previous_guid":"4317ED60F7864989BC70EF2390EEB26F","previous_id":"632065","last_modified":"1527917328","components":[{"component_id":"1117102","previous_id":0,"original_id":"1117090","guid":"6369A39BCBA748C194B31AFC76CE2EB6","previous_guid":null,"component_type_id":"6","data_id":null,"data":"Create an amino acid alignment","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Create an amino acid alignment"},"is_project":0},{"component_id":"1117103","previous_id":"1117102","original_id":"1117089","guid":"FAD2C9FD05C1493CBC8F9012F54FEEBB","previous_guid":"6369A39BCBA748C194B31AFC76CE2EB6","component_type_id":"1","data_id":null,"data":"<p>First we want to align the amino acid sequences using clustal omega. The command here is simple enough if we use default parameters:<\/p>\n<p>\u00a0<\/p>\n<p><strong>clustalo -i cluster_1.faa -o cluster_1.aln.faa<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>The .aln.faa file should have the amino acid alignment we need.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>First we want to align the amino acid sequences using clustal omega. The command here is simple enough if we use default parameters:<\/p>\n<p>\u00a0<\/p>\n<p><strong>clustalo -i cluster_1.faa -o cluster_1.aln.faa<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>The .aln.faa file should have the amino acid alignment we need.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"1121082","previous_id":"1117103","original_id":"0","guid":"970A5FDF1EA74AE0B272CF602AE2F2DA","previous_guid":"FAD2C9FD05C1493CBC8F9012F54FEEBB","component_type_id":"13","data_id":"19033","data":"","order_id":"2","name":"Comment","data_by_id":"1","type_id":"13","source_data":{"annotation_id":"19033","thread_id":"19033","id":"19033","thread_title":"Comment on step 2 of Introduction to calculating dN\/dS ratios with codeml","uri":"comment-on-step-2-of-introduction-to-calculating-dnds","thread_uri":"comment-on-step-2-of-introduction-to-calculating-dnds","step_id":"632066","protocol_uri":"introduction-to-calculating-dn-ds-ratios-with-code-qhwdt7e","protocol_name":"Introduction to calculating dN\/dS ratios with codeml","protocol_name_html":"Introduction to calculating dN\/dS ratios with codeml","annotation":"<p>Hi Dr. Frank! :)<\/p>\n<p>\u00a0<\/p>\n<p>I already solved the \u201cinstallation problem\u201d. The fact is that I was not typing perl before pal2nal, and so I was not calling Perl!\u00a0<\/p>\n<p><br \/><strong>I should had write<\/strong>: perl pal2nal.pl cluster_1.aln.faa cluster_1.fna -output paml -nogap &gt; cluster_1.pal2nal<br \/><strong>Instead<\/strong>: pal2nal.pl cluster_1.aln.faa cluster_1.fna -output paml -nogap &gt; cluster_1.pal2nal<\/p>\n<p>\u00a0<\/p>\n<p>Great things are learnt when you get an error :)\u00a0<\/p>\n<p>\u00a0<\/p>","thread_text":"<p>Hi Dr. Frank! :)<\/p>\n<p>\u00a0<\/p>\n<p>I already solved the \u201cinstallation problem\u201d. The fact is that I was not typing perl before pal2nal, and so I was not calling Perl!\u00a0<\/p>\n<p><br \/><strong>I should had write<\/strong>: perl pal2nal.pl cluster_1.aln.faa cluster_1.fna -output paml -nogap &gt; cluster_1.pal2nal<br \/><strong>Instead<\/strong>: pal2nal.pl cluster_1.aln.faa cluster_1.fna -output paml -nogap &gt; cluster_1.pal2nal<\/p>\n<p>\u00a0<\/p>\n<p>Great things are learnt when you get an error :)\u00a0<\/p>\n<p>\u00a0<\/p>","body":"<p>Hi Dr. Frank! :)<\/p>\n<p>\u00a0<\/p>\n<p>I already solved the \u201cinstallation problem\u201d. The fact is that I was not typing perl before pal2nal, and so I was not calling Perl!\u00a0<\/p>\n<p><br \/><strong>I should had write<\/strong>: perl pal2nal.pl cluster_1.aln.faa cluster_1.fna -output paml -nogap &gt; cluster_1.pal2nal<br \/><strong>Instead<\/strong>: pal2nal.pl cluster_1.aln.faa cluster_1.fna -output paml -nogap &gt; cluster_1.pal2nal<\/p>\n<p>\u00a0<\/p>\n<p>Great things are learnt when you get an error :)\u00a0<\/p>\n<p>\u00a0<\/p>","is_private":"1","public_protocol":"1","can_edit":0,"can_delete":"0","show_name":"1","created_date":"1527917328","created_on":"1527917328","modified_on":null,"last_updated":null,"profile_image":"\/img\/avatars\/001.png","full_name":"Carolina Mg","affiliation":null,"username":"carolina-mg","email":"faylward@vt.edu","pa_useranme":"frank-aylward","comments":[]},"is_project":0}],"available_protocols":["12565"]},{"id":"632067","is_changed":"0","original_id":"632062","is_skipped":"0","is_checked":"0","guid":"56F2AD8486AD497FBE983BC0FEA93756","previous_guid":"59F493B874784435A32680EA1107FFD7","previous_id":"632066","last_modified":"1527522107","components":[{"component_id":"1117104","previous_id":0,"original_id":"1117092","guid":"99A1244BFE3D484EA1BDD2A466BCF3E1","previous_guid":null,"component_type_id":"6","data_id":null,"data":"Convert aa alignment to na alignment","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Convert aa alignment to na alignment"},"is_project":0},{"component_id":"1117105","previous_id":"1117104","original_id":"1117091","guid":"5A05D9F135E74C74B0E7B075F85B27A8","previous_guid":"99A1244BFE3D484EA1BDD2A466BCF3E1","component_type_id":"1","data_id":null,"data":"<p>Now we can use pal2nal to get a codon-based nucleic acid alignment. This is critical since we need to be sure the nucleic acid alignment is alined codon-by-codon we we know when substitutions result in a synonymous or nonsynonymous amino change. If we had simply performed an alignment on the nucleic acid sequence, we could not be sure that every single codon was lined up for this kind of calculation.<\/p>\n<p>\u00a0<\/p>\n<p><strong>pal2nal.pl cluster_1.aln.faa cluster_1.fna -output paml -nogap &gt; cluster_1.pal2nal<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Here we input the aligned amino acid sequences and the raw nucleic acid sequences. The flags '-output paml' indicates that we want the output format to be in paml format (for simplicity in subsequent steps). The '-nogap' flag indicates that we want to remove gaps and inframe stop codons, since those are not used in subsequent steps. Just type 'pal2nal.pl' for a full description of all of the options.<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Now we can use pal2nal to get a codon-based nucleic acid alignment. This is critical since we need to be sure the nucleic acid alignment is alined codon-by-codon we we know when substitutions result in a synonymous or nonsynonymous amino change. If we had simply performed an alignment on the nucleic acid sequence, we could not be sure that every single codon was lined up for this kind of calculation.<\/p>\n<p>\u00a0<\/p>\n<p><strong>pal2nal.pl cluster_1.aln.faa cluster_1.fna -output paml -nogap &gt; cluster_1.pal2nal<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Here we input the aligned amino acid sequences and the raw nucleic acid sequences. The flags '-output paml' indicates that we want the output format to be in paml format (for simplicity in subsequent steps). The '-nogap' flag indicates that we want to remove gaps and inframe stop codons, since those are not used in subsequent steps. Just type 'pal2nal.pl' for a full description of all of the options.<\/p>"},"is_project":0}]},{"id":"632068","is_changed":1,"original_id":"632064","is_skipped":"0","is_checked":"0","guid":"56AB215319B045C38D09CEECE43CA43C","previous_guid":"56F2AD8486AD497FBE983BC0FEA93756","previous_id":"632067","last_modified":"1527921679","components":[{"component_id":"1117106","previous_id":0,"original_id":"1117099","guid":"32AECFE698F44FBFB8AC86833D34C392","previous_guid":null,"component_type_id":"6","data_id":null,"data":"Run codeml","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Run codeml"},"is_project":0},{"component_id":"1117107","previous_id":"1117106","original_id":"1117098","guid":"D3FB630B052C4EEB9876F7C5F10D8819","previous_guid":"32AECFE698F44FBFB8AC86833D34C392","component_type_id":"1","data_id":null,"data":"<p>To run codeml all we need to do is type 'codeml' in the same folder that the codeml.ctl file is in. All of the options are in the codeml.ctl file. There are lots of different options here that are described in the PAML manual. The key ones here are:<\/p>\n<p>seqfile = cluster_2.pal2nal [this tells the program where to find the codon-aligned nucleic acid sequences]<\/p>\n<p>outfile = codeml.txt [this tells the program where we want the output]<\/p>\n<p>runmode = -2 [this indicates we want to perform pairwise comparisons]<\/p>\n<p>\u00a0<\/p>\n<p>Some codeml applications require a phylogenetic tree to be provided in .nwk format, but since we are doing pairwise comparisons here it is not required.<\/p>\n<p>\u00a0<\/p>\n<p>When we run codeml, the calculation may take around a minute to finish, and a large number of files will be created. The file codeml.txt is what we want though. We can parse results with the parse_codeml_output.py python script:<\/p>\n<p>\u00a0<\/p>\n<p><strong>python parse_codeml_output.py codeml.txt<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Note that not all gene-pairs will be printed out. This is because the script filters out all pairs for which dS was &lt; 0.01 or &gt; 2. Values &lt; 0.01 indicate that we may not get a reliable estimate of dN\/dS, since the sequences are so similar. dS values &gt; 2 indicate that the sequences are quite divergent and multiple substitutions have likely occured at most sites, so dN\/dS estimates will again be compromised.<\/p>\n<p>\u00a0<\/p>\n<p>The overall workflow should provide results that look something like this:<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yhsjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yhrjtte.png\" data-ofn=\"screenshot.png\" \/><\/p>\n<p>\u00a0<\/p>\n<p>The real power comes from estimating dN\/dS from multiple genes across several genomes, and looking for overall trends. But that will be a tutorial for another day :)<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>To run codeml all we need to do is type 'codeml' in the same folder that the codeml.ctl file is in. All of the options are in the codeml.ctl file. There are lots of different options here that are described in the PAML manual. The key ones here are:<\/p>\n<p>seqfile = cluster_2.pal2nal [this tells the program where to find the codon-aligned nucleic acid sequences]<\/p>\n<p>outfile = codeml.txt [this tells the program where we want the output]<\/p>\n<p>runmode = -2 [this indicates we want to perform pairwise comparisons]<\/p>\n<p>\u00a0<\/p>\n<p>Some codeml applications require a phylogenetic tree to be provided in .nwk format, but since we are doing pairwise comparisons here it is not required.<\/p>\n<p>\u00a0<\/p>\n<p>When we run codeml, the calculation may take around a minute to finish, and a large number of files will be created. The file codeml.txt is what we want though. We can parse results with the parse_codeml_output.py python script:<\/p>\n<p>\u00a0<\/p>\n<p><strong>python parse_codeml_output.py codeml.txt<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Note that not all gene-pairs will be printed out. This is because the script filters out all pairs for which dS was &lt; 0.01 or &gt; 2. Values &lt; 0.01 indicate that we may not get a reliable estimate of dN\/dS, since the sequences are so similar. dS values &gt; 2 indicate that the sequences are quite divergent and multiple substitutions have likely occured at most sites, so dN\/dS estimates will again be compromised.<\/p>\n<p>\u00a0<\/p>\n<p>The overall workflow should provide results that look something like this:<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yhsjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yhrjtte.png\" data-ofn=\"screenshot.png\" \/><\/p>\n<p>\u00a0<\/p>\n<p>The real power comes from estimating dN\/dS from multiple genes across several genomes, and looking for overall trends. But that will be a tutorial for another day :)<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"1121083","previous_id":"1117107","original_id":"0","guid":"616C128D9F45421385234827AD929512","previous_guid":"D3FB630B052C4EEB9876F7C5F10D8819","component_type_id":"13","data_id":"19034","data":"","order_id":"2","name":"Comment","data_by_id":"1","type_id":"13","source_data":{"annotation_id":"19034","thread_id":"19034","id":"19034","thread_title":"Comment on step 4 of Introduction to calculating dN\/dS ratios with codeml","uri":"comment-on-step-4-of-introduction-to-calculating-dnds","thread_uri":"comment-on-step-4-of-introduction-to-calculating-dnds","step_id":"632068","protocol_uri":"introduction-to-calculating-dn-ds-ratios-with-code-qhwdt7e","protocol_name":"Introduction to calculating dN\/dS ratios with codeml","protocol_name_html":"Introduction to calculating dN\/dS ratios with codeml","annotation":"<p>Done!\u00a0<\/p>\n<p>It seems that we are dealing with purifying selection!<\/p>\n<p>\u00a0<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yzu2abe.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yzt2abe.png\" data-ofn=\"codeml.png\" \/><\/p>\n<p>\u00a0<\/p>","thread_text":"<p>Done!\u00a0<\/p>\n<p>It seems that we are dealing with purifying selection!<\/p>\n<p>\u00a0<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yzu2abe.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yzt2abe.png\" data-ofn=\"codeml.png\" \/><\/p>\n<p>\u00a0<\/p>","body":"<p>Done!\u00a0<\/p>\n<p>It seems that we are dealing with purifying selection!<\/p>\n<p>\u00a0<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yzu2abe.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yzt2abe.png\" data-ofn=\"codeml.png\" \/><\/p>\n<p>\u00a0<\/p>","is_private":"1","public_protocol":"1","can_edit":0,"can_delete":"0","show_name":"1","created_date":"1527921679","created_on":"1527921679","modified_on":null,"last_updated":null,"profile_image":"\/img\/avatars\/001.png","full_name":"Carolina Mg","affiliation":null,"username":"carolina-mg","email":"faylward@vt.edu","pa_useranme":"frank-aylward","comments":[]},"is_project":0}],"available_protocols":["12565"]}]}