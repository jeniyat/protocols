{"uri":"introduction-to-blast-and-protein-homology-searche-piedkbe","version_id":"0","protocol_name":"Introduction to BLAST and protein homology searches","protocol_name_html":"Introduction to BLAST and protein homology searches","is_prepublished":"0","can_edit":"0","parent_id":null,"api_version":"1","is_new_mode":"0","last_modified":"1523977851","type_id":"1","link":null,"fork_id":"","public_fork_note":"","number_of_steps":"7","has_versions":"1","first_published_date":"1523977851","publish_date":"2018-04-17 15:10:51","documents":null,"have_protocol_in_step":"0","is_protocol_in_step":"0","vendor_name":"Contributed by users","vendor_link":"https:\/\/www.protocols.io","vendor_logo":"\/img\/vendors\/1.png","mod_mins":"-45","mod_secs":"1","description":null,"is_bookmarked":"0","can_reassign":"1","before_start":null,"has_guidelines":"0","materials":[],"warning":null,"version_class":"11558","public":"1","is_owner":"1","is_original_owner":"1","created_on":"1523977001","protocol_affiliation":"Virginia Tech","affiliation":"Virginia Tech","doi":"dx.doi.org\/10.17504\/protocols.io.piedkbe","doi_status":"2","changed_fork_steps":null,"profile_url":"FrankAylward-y22344v2x2","protocol_img":"https:\/\/www.protocols.io\/img\/default_protocol.png","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","full_name":"Frank Aylward","created_by":"Frank Aylward","private_link":"D420AC5FBD6E78B992CA9DC57DFDBB27","original_img":"1","username":"frank-aylward","is_retracted":"0","retraction_reason":null,"plos_id":null,"manuscript_citation":null,"journal_name":null,"is_donations_disabled":"0","is_donations_disabled_by_user":"9","item_record_id":304720,"fork_info":[],"compare_forks":[],"protocols":[],"groups":[],"number_of_shared_runs":[],"ownership_history":[],"keywords":"","transfer_to_user":[],"sub_transfer":false,"is_transfer_pending":false,"number_of_bookmarks":"0","collections":[],"tags":[],"archived":0,"sub_authors":[],"sub_protocols_number":0,"can_edit_shared":0,"shared_runs":[],"is_shared_run":0,"is_shared":1,"banner":null,"contact_badges":[{"badge_id":"4","badge_image":"\/img\/badges\/gold.svg","badge_description":"Gold power author!"}],"number_of_comments":0,"is_locked":0,"is_locked_by":false,"authors":"Frank Aylward","authors_list":[{"name":"Frank Aylward","affiliation":"Virginia Tech","username":null,"profile_image":null}],"user":{"profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","username":"frank-aylward","full_name":"Frank Aylward","created_by":"Frank Aylward"},"access":{"can_view":"1","can_remove":"0","can_add":"0","can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":"0","can_move":"1","can_transfer":"1","can_download":"1","is_locked":"0"},"is_contact_suspended":0,"guidelines":null,"status_id":"2","is_research":"1","status_info":"We are still developing and optimizing this protocol","steps":[{"id":"622369","is_changed":1,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"26359A2C6C8A4D798DD446B490F4AC63","previous_guid":"D22ACCF17754426A82A1C5DA21879F9B","previous_id":"622372","last_modified":"1523977589","components":[{"component_id":"1092278","previous_id":0,"original_id":"0","guid":"50B874567D3E4106A52869ADD06E6989","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Download the data","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Download the data"},"is_project":0},{"component_id":"1092277","previous_id":"1092278","original_id":"0","guid":"1A3477B843FB4CB8B1F535EED3E463FC","previous_guid":"50B874567D3E4106A52869ADD06E6989","component_type_id":"1","data_id":null,"data":"<p>wget -O\u00a0prochlorococcus_phage_PSSM2.faa ftp:\/\/ftp.ncbi.nlm.nih.gov\/geno<br \/>mes\/all\/GCF\/000\/859\/585\/GCF_000859585.1_ViralProj15135\/GCF_000859585.1_ViralProj15135_protein.faa.gz<\/p>\n<p>\u00a0<\/p>\n<p>wget -O prochlorococcus_phage_PSSM3.faa\u00a0ftp:\/\/ftp.ncbi.nlm.nih.gov\/genomes\/all\/GCF\/000\/907\/775\/GCF_000907775.1_ViralProj209210\/GCF_000907775.1_ViralProj209210_protein.faa.gz<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>wget -O\u00a0prochlorococcus_phage_PSSM2.faa ftp:\/\/ftp.ncbi.nlm.nih.gov\/geno<br \/>mes\/all\/GCF\/000\/859\/585\/GCF_000859585.1_ViralProj15135\/GCF_000859585.1_ViralProj15135_protein.faa.gz<\/p>\n<p>\u00a0<\/p>\n<p>wget -O prochlorococcus_phage_PSSM3.faa\u00a0ftp:\/\/ftp.ncbi.nlm.nih.gov\/genomes\/all\/GCF\/000\/907\/775\/GCF_000907775.1_ViralProj209210\/GCF_000907775.1_ViralProj209210_protein.faa.gz<\/p>"},"is_project":0}],"available_protocols":["11573"]},{"id":"622370","is_changed":1,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"6B0B432584CB4EDBB5E81722B936C788","previous_guid":"26359A2C6C8A4D798DD446B490F4AC63","previous_id":"622369","last_modified":"1523977567","components":[{"component_id":"1092280","previous_id":0,"original_id":"0","guid":"4B05F2C46C404CBC84BB8276F769B9FC","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Get some basic stats about the files and what's inside","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Get some basic stats about the files and what's inside"},"is_project":0},{"component_id":"1092279","previous_id":"1092280","original_id":"0","guid":"0466EF83E2C34F59850BF4C84D22FAA5","previous_guid":"4B05F2C46C404CBC84BB8276F769B9FC","component_type_id":"1","data_id":null,"data":"<p>grep \"^&gt;\" prochlorococcus_phage_PSSM2.faa | wc<br \/># or<br \/>grep \"^&gt;\" prochlorococcus_phage_PSSM3.faa | wc<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>grep \"^&gt;\" prochlorococcus_phage_PSSM2.faa | wc<br \/># or<br \/>grep \"^&gt;\" prochlorococcus_phage_PSSM3.faa | wc<\/p>"},"is_project":0}],"available_protocols":["11573"]},{"id":"622371","is_changed":1,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"E2871033414B4A55B54F2D5CFB4C1578","previous_guid":"6B0B432584CB4EDBB5E81722B936C788","previous_id":"622370","last_modified":"1523977634","components":[{"component_id":"1092281","previous_id":0,"original_id":"0","guid":"5A7C13CD0E4D4230889182DA60A8DA76","previous_guid":null,"component_type_id":"1","data_id":null,"data":"<p>makeblastdb -in prochlorococcus_phage_PSSM2.faa -dbtype prot<\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>makeblastdb -in prochlorococcus_phage_PSSM2.faa -dbtype prot<\/p>"},"is_project":0},{"component_id":"1092282","previous_id":"1092281","original_id":"0","guid":"5100C2F786BA4664AB0617B25418A830","previous_guid":"5A7C13CD0E4D4230889182DA60A8DA76","component_type_id":"6","data_id":"0","data":"Choose one protein file to be the reference, and make the appropriate BLAST databases","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Choose one protein file to be the reference, and make the appropriate BLAST databases"},"is_project":0}],"available_protocols":["11573"]},{"id":"622372","is_changed":1,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"D22ACCF17754426A82A1C5DA21879F9B","previous_guid":null,"previous_id":"0","last_modified":"1523977675","components":[{"component_id":"1092284","previous_id":0,"original_id":"0","guid":"76A4852F1C124427AA8D5ACEA917EE8B","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Make sure the right tools are installed first","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Make sure the right tools are installed first"},"is_project":0},{"component_id":"1092283","previous_id":"1092284","original_id":"0","guid":"4182F30535D04966809E93F74BC24541","previous_guid":"76A4852F1C124427AA8D5ACEA917EE8B","component_type_id":"1","data_id":null,"data":"<p>We'll be using BLASTP<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>We'll be using BLASTP<\/p>"},"is_project":0}],"available_protocols":["11573"]},{"id":"622373","is_changed":1,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"71F7DC0DAAE34D8487FB9FAF994D7D70","previous_guid":"E2871033414B4A55B54F2D5CFB4C1578","previous_id":"622371","last_modified":"1523977710","components":[{"component_id":"1092285","previous_id":0,"original_id":"0","guid":"85D772938CB74242B007CE4C972F43A0","previous_guid":null,"component_type_id":"1","data_id":null,"data":"<p>blastp -query prochlorococcus_phage_PSSM3.faa -db prochlorococcus_phage_PSSM2.faa | head -n 100<\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>blastp -query prochlorococcus_phage_PSSM3.faa -db prochlorococcus_phage_PSSM2.faa | head -n 100<\/p>"},"is_project":0},{"component_id":"1092286","previous_id":"1092285","original_id":"0","guid":"B7235F3818FA4497A031E2510F23F29F","previous_guid":"85D772938CB74242B007CE4C972F43A0","component_type_id":"6","data_id":"0","data":"Now use the other protein file as the query, and the reference file as the database","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Now use the other protein file as the query, and the reference file as the database"},"is_project":0}],"available_protocols":["11573"]},{"id":"622374","is_changed":1,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"7D822E81FC6D4868855326624D09FFB8","previous_guid":"71F7DC0DAAE34D8487FB9FAF994D7D70","previous_id":"622373","last_modified":"1523977763","components":[{"component_id":"1092288","previous_id":0,"original_id":"0","guid":"3478942A82444E36A5A0C728E6989DAA","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Vary the parameters a bit and see what the different results look like","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Vary the parameters a bit and see what the different results look like"},"is_project":0},{"component_id":"1092287","previous_id":"1092288","original_id":"0","guid":"C4FB811EF9D14759ACF00EBC97233A89","previous_guid":"3478942A82444E36A5A0C728E6989DAA","component_type_id":"1","data_id":null,"data":"<p># Do the same thing, but use a tab-delimited output and only look at the top 10 hits.<br \/>blastp -query prochlorococcus_phage_PSSM3.faa -db prochlorococcus_phage_PSSM2.faa -outfmt 6 | head<\/p>\n<p># Now we can play around with the output parameters to ensure that only \"good hits\" are reported, and only the best hit for each query protein is given. <br \/>blastp -query prochlorococcus_phage_PSSM3.faa -db prochlorococcus_phage_PSSM2.faa -outfmt 6 -max_target_seqs 1 -evalue 0.00001 -max_hsps 1 -qcov_hsp_perc 50 | head<\/p>\n<p>\u00a0<\/p>\n<p># breakdown of the flags:<br \/># -query: this is the input file, so the file with all of the protein sequences that we want to search<br \/># -db: this is the database, so the file we just indexed with the makeblastdb command above. Note that makeblastdb creates multiple reference files and that only the root name needs to be given here (so if the database was called refdb, then refdb would be given here even though the index files are called refdb.pin, refdb.phr, etc.)<br \/># -max_target_seqs: This flat specifies that we only want the best hit for each query protein. Otherwise all hits are provided. <br \/># -outfmt: This specifies that we want the tab-delimited output format rather than the full alignment output. If you forget what the columns are you can use -outfmt 7. <br \/># -evalue: This indicates that we want to exclude all hits with evalues above this threshold. A good value is about 0.00001, or 1e-5. <br \/># max_hsps: HSPs are \"high-scoring segment pairs\". A query protein can make several separate alignments to a single reference, so this tells the program we want only the best-scoring alignment. <br \/># -qcov_hsp_perc: This is the \"query coverage high-scoring sequence pair percent\", or the percent of the query protein that has to form an alignment against the reference to be retained. Higher values prevent spurious alignments of only a short portion of the query to a reference. <\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p># Do the same thing, but use a tab-delimited output and only look at the top 10 hits.<br \/>blastp -query prochlorococcus_phage_PSSM3.faa -db prochlorococcus_phage_PSSM2.faa -outfmt 6 | head<\/p>\n<p># Now we can play around with the output parameters to ensure that only \"good hits\" are reported, and only the best hit for each query protein is given. <br \/>blastp -query prochlorococcus_phage_PSSM3.faa -db prochlorococcus_phage_PSSM2.faa -outfmt 6 -max_target_seqs 1 -evalue 0.00001 -max_hsps 1 -qcov_hsp_perc 50 | head<\/p>\n<p>\u00a0<\/p>\n<p># breakdown of the flags:<br \/># -query: this is the input file, so the file with all of the protein sequences that we want to search<br \/># -db: this is the database, so the file we just indexed with the makeblastdb command above. Note that makeblastdb creates multiple reference files and that only the root name needs to be given here (so if the database was called refdb, then refdb would be given here even though the index files are called refdb.pin, refdb.phr, etc.)<br \/># -max_target_seqs: This flat specifies that we only want the best hit for each query protein. Otherwise all hits are provided. <br \/># -outfmt: This specifies that we want the tab-delimited output format rather than the full alignment output. If you forget what the columns are you can use -outfmt 7. <br \/># -evalue: This indicates that we want to exclude all hits with evalues above this threshold. A good value is about 0.00001, or 1e-5. <br \/># max_hsps: HSPs are \"high-scoring segment pairs\". A query protein can make several separate alignments to a single reference, so this tells the program we want only the best-scoring alignment. <br \/># -qcov_hsp_perc: This is the \"query coverage high-scoring sequence pair percent\", or the percent of the query protein that has to form an alignment against the reference to be retained. Higher values prevent spurious alignments of only a short portion of the query to a reference. <\/p>"},"is_project":0}],"available_protocols":["11573"]},{"id":"622375","is_changed":1,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"B4DAF44FF68A4A9393948A535C688786","previous_guid":"7D822E81FC6D4868855326624D09FFB8","previous_id":"622374","last_modified":"1523977791","components":[{"component_id":"1092289","previous_id":0,"original_id":"0","guid":"52179D68CA44451AA26E2F4189EFA8E8","previous_guid":null,"component_type_id":"1","data_id":null,"data":"<p># What is the average amino acid identify of PSSM2 and PSSM3, using PSSM2 as the query?<br \/># To help with this we can install a package for simple math called \"datamash\"<br \/># \"sudo apt install datamash\" OR \"brew install datamash\"<br \/># Datamash will allow for quick calculation of averages straight from the command line. Once this package is installed you can run:<br \/>blastp -query prochlorococcus_phage_PSSM3.faa -db prochlorococcus_phage_PSSM2.faa -outfmt 6 -max_target_seqs 1 -evalue 0.00001 -max_hsps 1 -qcov_hsp_perc 50 | datamash mean 3<br \/># And the output should be a single number, which is the average of all of the % identity scores from the blast output<\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p># What is the average amino acid identify of PSSM2 and PSSM3, using PSSM2 as the query?<br \/># To help with this we can install a package for simple math called \"datamash\"<br \/># \"sudo apt install datamash\" OR \"brew install datamash\"<br \/># Datamash will allow for quick calculation of averages straight from the command line. Once this package is installed you can run:<br \/>blastp -query prochlorococcus_phage_PSSM3.faa -db prochlorococcus_phage_PSSM2.faa -outfmt 6 -max_target_seqs 1 -evalue 0.00001 -max_hsps 1 -qcov_hsp_perc 50 | datamash mean 3<br \/># And the output should be a single number, which is the average of all of the % identity scores from the blast output<\/p>"},"is_project":0},{"component_id":"1092290","previous_id":"1092289","original_id":"0","guid":"2934B947C5FE4D9AA52172B4F06CEE9F","previous_guid":"52179D68CA44451AA26E2F4189EFA8E8","component_type_id":"6","data_id":"0","data":"Now let's calculate the one-way amino acid identity (AAI) of the two genomes","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Now let's calculate the one-way amino acid identity (AAI) of the two genomes"},"is_project":0}],"available_protocols":["11573"]}]}