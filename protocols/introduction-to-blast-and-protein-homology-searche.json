{"uri":"introduction-to-blast-and-protein-homology-searche-pivdke6","version_id":"1","protocol_name":"Introduction to BLAST and protein homology searches","protocol_name_html":"Introduction to BLAST and protein homology searches","is_prepublished":"0","can_edit":"0","parent_id":"11558","api_version":"1","is_new_mode":"0","last_modified":"1527255498","type_id":"1","link":null,"fork_id":"","public_fork_note":"","number_of_steps":"7","has_versions":"1","first_published_date":"1527255498","publish_date":"2018-05-25 13:38:18","documents":null,"have_protocol_in_step":"0","is_protocol_in_step":"0","vendor_name":"Contributed by users","vendor_link":"https:\/\/www.protocols.io","vendor_logo":"\/img\/vendors\/1.png","mod_mins":"-10","mod_secs":"23","description":"<p><strong>This is a short tutorial on the basics of getting started with standalone BLAST+ in the Ubuntu command line.<\/strong><\/p>\n<p>Code is intended for use on an Ubuntu 16.04 LTS OS.<\/p>\n<p>\u00a0<\/p>\n<p>Note that a web server for BLASTP is also available: https:\/\/blast.ncbi.nlm.nih.gov\/Blast.cgi?PROGRAM=blastp&amp;PAGE_TYPE=BlastSearch&amp;LINK_LOC=blasthome<\/p>\n<p>\u00a0<\/p>\n<p>For details on BLAST please see the NCBI webpage and release notes:\u00a0https:\/\/www.ncbi.nlm.nih.gov\/books\/NBK131777\/<\/p>\n<p>And the NCBI paper on BLAST+: https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/20003500?dopt=Citation<\/p>","is_bookmarked":"0","can_reassign":"1","before_start":null,"has_guidelines":"0","materials":[],"warning":null,"version_class":"11558","public":"1","is_owner":"1","is_original_owner":"1","created_on":"1524007764","protocol_affiliation":"Virginia Tech","affiliation":"Virginia Tech","doi":"dx.doi.org\/10.17504\/protocols.io.pivdke6","doi_status":"2","changed_fork_steps":null,"profile_url":"FrankAylward-y22344v2x2","protocol_img":"https:\/\/www.protocols.io\/img\/default_protocol.png","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","full_name":"Frank Aylward","created_by":"Frank Aylward","private_link":"43667240D7E30EC4B75F8BE93B6045AF","original_img":"1","username":"frank-aylward","is_retracted":"0","retraction_reason":null,"plos_id":null,"manuscript_citation":null,"journal_name":null,"is_donations_disabled":"0","is_donations_disabled_by_user":"9","item_record_id":304895,"fork_info":[],"compare_forks":[],"protocols":[],"groups":[],"number_of_shared_runs":[],"ownership_history":[],"keywords":"","transfer_to_user":[],"sub_transfer":false,"is_transfer_pending":false,"number_of_bookmarks":"0","collections":[],"tags":[],"archived":0,"sub_authors":[],"sub_protocols_number":0,"can_edit_shared":0,"shared_runs":[],"is_shared_run":0,"is_shared":1,"banner":null,"contact_badges":[{"badge_id":"4","badge_image":"\/img\/badges\/gold.svg","badge_description":"Gold power author!"}],"number_of_comments":0,"is_locked":0,"is_locked_by":false,"authors":"Frank Aylward","authors_list":[{"name":"Frank Aylward","affiliation":"Virginia Tech","username":null,"profile_image":null}],"user":{"profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","username":"frank-aylward","full_name":"Frank Aylward","created_by":"Frank Aylward"},"access":{"can_view":"1","can_remove":"0","can_add":"0","can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":"0","can_move":"1","can_transfer":"1","can_download":"1","is_locked":"0"},"is_contact_suspended":0,"guidelines":null,"status_id":"1","is_research":"0","status_info":"We use this protocol in our group and it is working","steps":[{"id":"622441","is_changed":1,"original_id":"622369","is_skipped":"0","is_checked":"0","guid":"731728B99DB5438F9F4DD2EE372B20D1","previous_guid":"241ADE6D363F41FD96C951BDDC7EF1AB","previous_id":"622444","last_modified":"1527255344","components":[{"component_id":"1092483","previous_id":0,"original_id":"1092278","guid":"55A8A81D13E9485BA24A981CCDD8249A","previous_guid":null,"component_type_id":"6","data_id":null,"data":"Download the data from NCBI using the Unix wget command ","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Download the data from NCBI using the Unix wget command "},"is_project":0},{"component_id":"1092484","previous_id":"1092483","original_id":"1092277","guid":"8C344BF6F2BC45779EA9EA32FC9F58CA","previous_guid":"55A8A81D13E9485BA24A981CCDD8249A","component_type_id":"1","data_id":null,"data":"<p><strong>wget -O\u00a0prochlorococcus_phage_PSSM2.faa.gz ftp:\/\/ftp.ncbi.nlm.nih.gov\/geno<\/strong><strong>mes\/all\/GCF\/000\/859\/585\/GCF_000859585.1_ViralProj15135\/GCF_000859585.1_ViralProj15135_protein.faa.gz<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>wget -O prochlorococcus_phage_PSSM3.faa.gz ftp:\/\/ftp.ncbi.nlm.nih.gov\/genomes\/all\/GCF\/000\/907\/775\/GCF_000907775.1_ViralProj209210\/GCF_000907775.1_ViralProj209210_protein.faa.gz<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>These commands should download one .gz file each, and both will have to be uncompressed afterwards with the gunzip command<\/p>\n<p><strong>gunzip<\/strong> <strong>prochlorococcus_phage_PSSM2.faa.gz<\/strong><\/p>\n<p><strong>gunzip prochlorococcus_phage_PSSM3.faa.gz<\/strong><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p><strong>wget -O\u00a0prochlorococcus_phage_PSSM2.faa.gz ftp:\/\/ftp.ncbi.nlm.nih.gov\/geno<\/strong><strong>mes\/all\/GCF\/000\/859\/585\/GCF_000859585.1_ViralProj15135\/GCF_000859585.1_ViralProj15135_protein.faa.gz<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>wget -O prochlorococcus_phage_PSSM3.faa.gz ftp:\/\/ftp.ncbi.nlm.nih.gov\/genomes\/all\/GCF\/000\/907\/775\/GCF_000907775.1_ViralProj209210\/GCF_000907775.1_ViralProj209210_protein.faa.gz<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>These commands should download one .gz file each, and both will have to be uncompressed afterwards with the gunzip command<\/p>\n<p><strong>gunzip<\/strong> <strong>prochlorococcus_phage_PSSM2.faa.gz<\/strong><\/p>\n<p><strong>gunzip prochlorococcus_phage_PSSM3.faa.gz<\/strong><\/p>"},"is_project":0}],"available_protocols":["11558","12500"]},{"id":"622442","is_changed":1,"original_id":"622370","is_skipped":"0","is_checked":"0","guid":"9C8E5315A024493D8C08B0163E7AF56D","previous_guid":"731728B99DB5438F9F4DD2EE372B20D1","previous_id":"622441","last_modified":"1524074079","components":[{"component_id":"1092485","previous_id":0,"original_id":"1092280","guid":"B7611B1B10FC4317BD56DBB8B72CAE35","previous_guid":null,"component_type_id":"6","data_id":null,"data":"Get some basic stats about the files and what's inside","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Get some basic stats about the files and what's inside"},"is_project":0},{"component_id":"1092486","previous_id":"1092485","original_id":"1092279","guid":"1AE4EF9C9D49485FB150441A8C945205","previous_guid":"B7611B1B10FC4317BD56DBB8B72CAE35","component_type_id":"1","data_id":null,"data":"<p><strong>grep '^&gt;' prochlorococcus_phage_PSSM2.faa | wc<\/strong><\/p>\n<p>or<\/p>\n<p><strong>grep '^&gt;' prochlorococcus_phage_PSSM3.faa | wc<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Since these are multi-FASTA files, we can (hopefully!) assume that by counting all of the lines that start with a \"&gt;\" we are also counting the number of sequences in that file (since each sequence should have it's own header).<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p><strong>grep '^&gt;' prochlorococcus_phage_PSSM2.faa | wc<\/strong><\/p>\n<p>or<\/p>\n<p><strong>grep '^&gt;' prochlorococcus_phage_PSSM3.faa | wc<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Since these are multi-FASTA files, we can (hopefully!) assume that by counting all of the lines that start with a \"&gt;\" we are also counting the number of sequences in that file (since each sequence should have it's own header).<\/p>"},"is_project":0}],"available_protocols":["11558","12500"]},{"id":"622443","is_changed":1,"original_id":"622371","is_skipped":"0","is_checked":"0","guid":"03A4467DD25F4550B877F3692B9D2528","previous_guid":"9C8E5315A024493D8C08B0163E7AF56D","previous_id":"622442","last_modified":"1524074199","components":[{"component_id":"1092487","previous_id":0,"original_id":"1092281","guid":"4776E770D6224BE6AC9D966D6641161C","previous_guid":null,"component_type_id":"1","data_id":null,"data":"<p><strong>makeblastdb -in prochlorococcus_phage_PSSM2.faa -dbtype prot<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>With BLAST we always need a query and a reference (or db). Which is which does not matter so much here. To identify orthologs we would want to perform a pair-wise comparison, since we would need to identify reciprocal best-BLAST hits for that. Here we can just start with a one-way BLAST.\u00a0 <\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p><strong>makeblastdb -in prochlorococcus_phage_PSSM2.faa -dbtype prot<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>With BLAST we always need a query and a reference (or db). Which is which does not matter so much here. To identify orthologs we would want to perform a pair-wise comparison, since we would need to identify reciprocal best-BLAST hits for that. Here we can just start with a one-way BLAST.\u00a0 <\/p>"},"is_project":0},{"component_id":"1092488","previous_id":"1092487","original_id":"1092282","guid":"35D5C7A9D24D4AF6B828FCFDD2E3D7E3","previous_guid":"4776E770D6224BE6AC9D966D6641161C","component_type_id":"6","data_id":null,"data":"Choose one protein file to be the reference, and make the appropriate BLAST databases","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Choose one protein file to be the reference, and make the appropriate BLAST databases"},"is_project":0}],"available_protocols":["11558","12500"]},{"id":"622444","is_changed":1,"original_id":"622372","is_skipped":"0","is_checked":"0","guid":"241ADE6D363F41FD96C951BDDC7EF1AB","previous_guid":null,"previous_id":null,"last_modified":"1524073874","components":[{"component_id":"1092489","previous_id":0,"original_id":"1092284","guid":"9A348A481D7345ED8B52D417FA3F5619","previous_guid":null,"component_type_id":"6","data_id":null,"data":"Make sure the right tools are installed first","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Make sure the right tools are installed first"},"is_project":0},{"component_id":"1092490","previous_id":"1092489","original_id":"1092283","guid":"54EB31D16865431699F08DD00000E568","previous_guid":"9A348A481D7345ED8B52D417FA3F5619","component_type_id":"1","data_id":null,"data":"<p><strong>Command to be entered into the command line are in bold<\/strong><\/p>\n<p>Comments are in regular typeface<\/p>\n<p>\u00a0<\/p>\n<p>We'll be using the BLASTP tool in the BLAST+ suite.<\/p>\n<p>On an Ubuntu 16.06 system If you need to install this first, type:<\/p>\n<p><strong>sudo apt install ncbi-blast+<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>You will be asked if you wish to continue after you are told how much space it will take up. To proceed type 'Y'.<\/p>\n<p>It may take a minute or two to finish installing.\u00a0<\/p>\n<p>Then, to view the abbreviated usage and flags, type:<\/p>\n<p><strong>blastp -h<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>and for the full usage and commands (there are a lot!) type:<\/p>\n<p><strong>blastp -help<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>We will go over some of the commonly-used commands in this tutorial, but it is always worthwhile to look at all of the available options, play around with different parameters, and see how the results can be changed.\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p><strong>Command to be entered into the command line are in bold<\/strong><\/p>\n<p>Comments are in regular typeface<\/p>\n<p>\u00a0<\/p>\n<p>We'll be using the BLASTP tool in the BLAST+ suite.<\/p>\n<p>On an Ubuntu 16.06 system If you need to install this first, type:<\/p>\n<p><strong>sudo apt install ncbi-blast+<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>You will be asked if you wish to continue after you are told how much space it will take up. To proceed type 'Y'.<\/p>\n<p>It may take a minute or two to finish installing.\u00a0<\/p>\n<p>Then, to view the abbreviated usage and flags, type:<\/p>\n<p><strong>blastp -h<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>and for the full usage and commands (there are a lot!) type:<\/p>\n<p><strong>blastp -help<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>We will go over some of the commonly-used commands in this tutorial, but it is always worthwhile to look at all of the available options, play around with different parameters, and see how the results can be changed.\u00a0<\/p>"},"is_project":0}],"available_protocols":["11558","12500"]},{"id":"622445","is_changed":1,"original_id":"622373","is_skipped":"0","is_checked":"0","guid":"8AA1FD9D3583455A95D229545B4C413B","previous_guid":"03A4467DD25F4550B877F3692B9D2528","previous_id":"622443","last_modified":"1524074329","components":[{"component_id":"1092491","previous_id":0,"original_id":"1092285","guid":"B2ADC1736CC641358F6168B1A3C1E02E","previous_guid":null,"component_type_id":"1","data_id":null,"data":"<p><strong>blastp -query prochlorococcus_phage_PSSM3.faa -db prochlorococcus_phage_PSSM2.faa | head -n 100<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>This is a pretty bare-bones command, but it will give you an idea of what the output looks like. Note that the output of BLAST went to the standard output stream (STDOUT) and that, for simplicity, we piped this into a \"head\" command so that only the first 100 lines would show up. We could have excluded the \"head\" command, but then we would have received a lot of BLAST output straight to our command line, which would be uninterpretable and not very useful.\u00a0<\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p><strong>blastp -query prochlorococcus_phage_PSSM3.faa -db prochlorococcus_phage_PSSM2.faa | head -n 100<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>This is a pretty bare-bones command, but it will give you an idea of what the output looks like. Note that the output of BLAST went to the standard output stream (STDOUT) and that, for simplicity, we piped this into a \"head\" command so that only the first 100 lines would show up. We could have excluded the \"head\" command, but then we would have received a lot of BLAST output straight to our command line, which would be uninterpretable and not very useful.\u00a0<\/p>"},"is_project":0},{"component_id":"1092492","previous_id":"1092491","original_id":"1092286","guid":"E2D44F8F880447D786645EE946DF83B3","previous_guid":"B2ADC1736CC641358F6168B1A3C1E02E","component_type_id":"6","data_id":null,"data":"Now use the other protein file as the query, and the reference file as the database","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Now use the other protein file as the query, and the reference file as the database"},"is_project":0}],"available_protocols":["11558","12500"]},{"id":"622446","is_changed":1,"original_id":"622374","is_skipped":"0","is_checked":"0","guid":"A7AFCD4412B94CBC9FF6338F15A1FE4F","previous_guid":"8AA1FD9D3583455A95D229545B4C413B","previous_id":"622445","last_modified":"1524074593","components":[{"component_id":"1092493","previous_id":0,"original_id":"1092288","guid":"DA418B5EC7714636985AD1CADE479201","previous_guid":null,"component_type_id":"6","data_id":null,"data":"Now let's vary the parameters a bit and see what the different results look like","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Now let's vary the parameters a bit and see what the different results look like"},"is_project":0},{"component_id":"1092494","previous_id":"1092493","original_id":"1092287","guid":"E016FAE9B1484CFBA5BDC75429685B3A","previous_guid":"DA418B5EC7714636985AD1CADE479201","component_type_id":"1","data_id":null,"data":"<p>Here is a similar command, but with a tab-delimited output and only the top 10 hits per query shown. <br \/><strong>blastp -query prochlorococcus_phage_PSSM3.faa -db prochlorococcus_phage_PSSM2.faa -outfmt 6 | head<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Now we can play around with the output parameters to ensure that only 'good hits' are reported, and only the best hit for each query protein is given. <br \/><strong>blastp -query prochlorococcus_phage_PSSM3.faa -db prochlorococcus_phage_PSSM2.faa -outfmt 6 -max_target_seqs 1 -evalue 0.00001 -max_hsps 1 -qcov_hsp_perc 50 | head<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Above, I put \"good hits\" in quotes since it is not always clear what constitutes a good hit. Different users will prefer different e-values and other cutoffs depending on what they are trying to do afterwards, their own comfort level, etc. As a common rule-of-thumb, e-values of 1e-3 and qe-5 are pretty common. For your own analyses you will need to use your own biological insight to decide for yourself what you are willing to trust and whether the results make sense.<\/p>\n<p>\u00a0<\/p>\n<p>Here is a breakdown of the flags used above:<br \/>\u00a0-query: this is the input file, so the file with all of the protein sequences that we want to search<\/p>\n<p><br \/>\u00a0-db: this is the database, so the file we just indexed with the makeblastdb command above. Note that makeblastdb creates multiple reference files and that only the root name needs to be given here (so if the database was called refdb, then refdb would be given here even though the index files are called refdb.pin, refdb.phr, etc.)<\/p>\n<p><br \/>\u00a0-max_target_seqs: This flat specifies that we only want the best hit for each query protein. Otherwise all hits are provided.<\/p>\n<p><br \/>\u00a0-outfmt: This specifies that we want the tab-delimited output format rather than the full alignment output. If you forget what the columns are you can use -outfmt 7.<\/p>\n<p><br \/>\u00a0-evalue: This indicates that we want to exclude all hits with evalues above this threshold. A good value is about 0.00001, or 1e-5.<\/p>\n<p><br \/>\u00a0max_hsps: HSPs are 'high-scoring segment pairs'. A query protein can make several separate alignments to a single reference, so this tells the program we want only the best-scoring alignment.<\/p>\n<p><br \/>\u00a0-qcov_hsp_perc: This is the 'query coverage high-scoring sequence pair percent', or the percent of the query protein that has to form an alignment against the reference to be retained. Higher values prevent spurious alignments of only a short portion of the query to a reference.<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Here is a similar command, but with a tab-delimited output and only the top 10 hits per query shown. <br \/><strong>blastp -query prochlorococcus_phage_PSSM3.faa -db prochlorococcus_phage_PSSM2.faa -outfmt 6 | head<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Now we can play around with the output parameters to ensure that only 'good hits' are reported, and only the best hit for each query protein is given. <br \/><strong>blastp -query prochlorococcus_phage_PSSM3.faa -db prochlorococcus_phage_PSSM2.faa -outfmt 6 -max_target_seqs 1 -evalue 0.00001 -max_hsps 1 -qcov_hsp_perc 50 | head<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Above, I put \"good hits\" in quotes since it is not always clear what constitutes a good hit. Different users will prefer different e-values and other cutoffs depending on what they are trying to do afterwards, their own comfort level, etc. As a common rule-of-thumb, e-values of 1e-3 and qe-5 are pretty common. For your own analyses you will need to use your own biological insight to decide for yourself what you are willing to trust and whether the results make sense.<\/p>\n<p>\u00a0<\/p>\n<p>Here is a breakdown of the flags used above:<br \/>\u00a0-query: this is the input file, so the file with all of the protein sequences that we want to search<\/p>\n<p><br \/>\u00a0-db: this is the database, so the file we just indexed with the makeblastdb command above. Note that makeblastdb creates multiple reference files and that only the root name needs to be given here (so if the database was called refdb, then refdb would be given here even though the index files are called refdb.pin, refdb.phr, etc.)<\/p>\n<p><br \/>\u00a0-max_target_seqs: This flat specifies that we only want the best hit for each query protein. Otherwise all hits are provided.<\/p>\n<p><br \/>\u00a0-outfmt: This specifies that we want the tab-delimited output format rather than the full alignment output. If you forget what the columns are you can use -outfmt 7.<\/p>\n<p><br \/>\u00a0-evalue: This indicates that we want to exclude all hits with evalues above this threshold. A good value is about 0.00001, or 1e-5.<\/p>\n<p><br \/>\u00a0max_hsps: HSPs are 'high-scoring segment pairs'. A query protein can make several separate alignments to a single reference, so this tells the program we want only the best-scoring alignment.<\/p>\n<p><br \/>\u00a0-qcov_hsp_perc: This is the 'query coverage high-scoring sequence pair percent', or the percent of the query protein that has to form an alignment against the reference to be retained. Higher values prevent spurious alignments of only a short portion of the query to a reference.<\/p>\n<p>\u00a0<\/p>"},"is_project":0}],"available_protocols":["11558","12500"]},{"id":"622447","is_changed":1,"original_id":"622375","is_skipped":"0","is_checked":"0","guid":"0D2251B64F174AB6AE9170803D7A284E","previous_guid":"A7AFCD4412B94CBC9FF6338F15A1FE4F","previous_id":"622446","last_modified":"1524074794","components":[{"component_id":"1092495","previous_id":0,"original_id":"1092289","guid":"1C73E5A36F2F461CB9DED2A56FB081AF","previous_guid":null,"component_type_id":"1","data_id":null,"data":"<p>To help with this we can install a package for simple math called 'datamash':<\/p>\n<p>\u00a0<\/p>\n<p><strong>sudo apt install datamash<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Datamash will allow for quick calculation of averages straight from the command line. Once this package is installed you can run:<\/p>\n<p><strong>blastp -query prochlorococcus_phage_PSSM3.faa -db prochlorococcus_phage_PSSM2.faa -outfmt 6 -max_target_seqs 1 -evalue 0.00001 -max_hsps 1 -qcov_hsp_perc 50 | datamash mean 3<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>And the output should be a single number, which is the average of all of the % identity scores from the blast output<\/p>\n<p>Now try doing the reverse and seeing how similar the results are (i.e., using PSSM2 as the query and PSSM3 as the db).<\/p>\n<p>When you vary the e-value what happens to the one-way AAI? Does this make sense?<\/p>\n<p>What about query coverage? How does increasing that change the one-way AAI?<\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>To help with this we can install a package for simple math called 'datamash':<\/p>\n<p>\u00a0<\/p>\n<p><strong>sudo apt install datamash<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Datamash will allow for quick calculation of averages straight from the command line. Once this package is installed you can run:<\/p>\n<p><strong>blastp -query prochlorococcus_phage_PSSM3.faa -db prochlorococcus_phage_PSSM2.faa -outfmt 6 -max_target_seqs 1 -evalue 0.00001 -max_hsps 1 -qcov_hsp_perc 50 | datamash mean 3<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>And the output should be a single number, which is the average of all of the % identity scores from the blast output<\/p>\n<p>Now try doing the reverse and seeing how similar the results are (i.e., using PSSM2 as the query and PSSM3 as the db).<\/p>\n<p>When you vary the e-value what happens to the one-way AAI? Does this make sense?<\/p>\n<p>What about query coverage? How does increasing that change the one-way AAI?<\/p>"},"is_project":0},{"component_id":"1092496","previous_id":"1092495","original_id":"1092290","guid":"A15189CE8A2E4251A98B3F52B6C42B7F","previous_guid":"1C73E5A36F2F461CB9DED2A56FB081AF","component_type_id":"6","data_id":null,"data":"Now let's calculate the one-way amino acid identity (AAI) of the two genomes","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Now let's calculate the one-way amino acid identity (AAI) of the two genomes"},"is_project":0}],"available_protocols":["11558","12500"]}]}