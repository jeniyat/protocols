{"id":22764,"title":"03: Gene Prediction","title_html":"03: Gene Prediction","image":{"source":"https:\/\/www.protocols.io\/img\/default_protocol.png","placeholder":"https:\/\/www.protocols.io\/img\/default_protocol.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.2gkgbuw","doi_status":2,"uri":"03-gene-prediction-2gkgbuw","type_id":1,"published_on":1556630633,"version_id":2,"created_on":1556630527,"categories":null,"creator":{"name":"Frank O. Aylward","affiliation":"Virginia Tech","username":"frank-aylward","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png"},"badges":[{"id":4,"image":{"source":"\/img\/badges\/gold.svg","placeholder":"\/img\/badges\/gold.svg"},"name":"Gold power author!"}],"research_interests":null},"journal":null,"journal_name":null,"journal_link":null,"public":1,"has_versions":1,"link":null,"total_collections":0,"number_of_steps":9,"authors":[{"name":"Frank Aylward","affiliation":"Virginia Tech","username":"frank-aylward","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png"},"badges":[],"research_interests":null}],"versions":[],"groups":[],"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"can_be_copied":1,"can_remove_fork":1,"forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":0,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"steps":[{"id":736425,"guid":"D8BC2C77CBA3499AAE8DBF40679E255C","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"EE0ED64AA4CB41A8BC30A04610A6AD9C","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"DF959B8B8C1A4B2DA5EE79F463FF76C0","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Let's start by downloading a Staphylococcus aureus genome from NCBI:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">wget <\/span><\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">ftp:\/\/ftp.ncbi.nlm.nih.gov\/genomes\/all\/GCF\/000\/009\/585\/GCF_000009585.1_ASM958v1\/GCF_000009585.1_ASM958v1_genomic.fna.gz<\/span><\/a><\/div><div class = \"text-block\">and let's make sure to unzip it so that we can access the .fna file directly (gunzip command). <\/div><div class = \"text-block\">Make sure to use \"head\" and \"tail\" as we did in the W1 tutorial to ensure that the file is in FASTA format.<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">gunzip<\/span><span>  <\/span><span style = \"font-weight:bold;\">GCF_000009585.1_ASM958v1_genomic.fna.gz<\/span><\/div><div class = \"text-block\">and<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">ls -lh<\/span><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null,"duration":0},{"id":736426,"guid":"8B28ED6DC69F42FA824A2EE20A0B5720","previous_id":736425,"previous_guid":"D8BC2C77CBA3499AAE8DBF40679E255C","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"991812670EBD492D84658699479BEC0E","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"2F58313612C84CB589A26F500FA6562A","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Now let's get some basic stats using seqkit so we know what we're dealing with:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit stats GCF_000009585.1_ASM958v1_genomic.fna<\/span><\/div><div class = \"text-block\">and<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit fx2tab -l -n -g GCF_000009585.1_ASM958v1_genomic.fna<\/span><\/div><div class = \"text-block\">Based on these results we can see we're working with a 2.9 Mbp genome that is split into 4 replicons. The chromosome has the majority of the sequence, with 2.87 Mbp. The chromosome has a %GC content of ~33%, slightly higher than that of the plasmids. <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null,"duration":0},{"id":736427,"guid":"F6FA8CE51E0B46A3B123A0D4433501C3","previous_id":736426,"previous_guid":"8B28ED6DC69F42FA824A2EE20A0B5720","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"C8C315F909964EA2B026651F54864850","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"97E76358A7C9431C83AA86217F93CF89","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Now we can start predicting genes using Prodigal. The main page for this tool is here:<\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/github.com\/hyattpd\/Prodigal<\/span><\/a><\/div><div class = \"text-block\">To start, let's take a look at the help menu:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">prodigal -h<\/span><\/div><div class = \"text-block\">We can see that this tool is quite a bit simpler than seqkit. For example, there are no sub-commands, just the main prodigal command. The tool also only has a few options. It takes a FASTA file of DNA as the input, and it will output a file of genes (nucleic acid), proteins (amino acid), and a table of results (usually in Gene Feature Format (GFF)). The main flags we need to be concerned with are -i, -d, -a, and -o. <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null,"duration":0},{"id":736428,"guid":"26CDE9C2473F44F5853D15DD805C1225","previous_id":736427,"previous_guid":"F6FA8CE51E0B46A3B123A0D4433501C3","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"C4AA0C38BFBC4F648A82F7DB3BC8A6D7","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"040567C65C48441BA5A726020B27D2E7","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Let's run prodigal such that we get genes, proteins, and a tabular GFF file. <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">prodigal -i GCF_000009585.1_ASM958v1_genomic.fna -a proteins.faa -d genes.fna -o output_table.gff<\/span><\/div><div class = \"text-block\">And make sure to run \"ls\" afterwards to ensure the right files have been created. <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null,"duration":0},{"id":736429,"guid":"CFFD5FA215564B348ED34B7E4464947B","previous_id":736428,"previous_guid":"26CDE9C2473F44F5853D15DD805C1225","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"1FC152982C6F4616B53D655B2AF03923","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"CB5D0D18EA084B22A2D970448F910F91","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">OK, now we need to quality-check the files that have been created. First thing is to go through and use the \"head\" command to take a quick peak, and then we can use \"seqkit stats\" to get more details. <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit stats genes.fna<\/span><\/div><div class = \"text-block\">and<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit stats proteins.faa<\/span><\/div><div class = \"text-block\">Note that we should get the same number of genes and proteins, since each gene will have a protein translation. Also note that gene sequences will be 3 times as long as their corresponding amino acid sequences, since each protein is encoded by a 3 nt codon. <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null,"duration":0},{"id":736430,"guid":"4D323342996A4F9F81361F8699738060","previous_id":736429,"previous_guid":"CFFD5FA215564B348ED34B7E4464947B","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"E451AC2D13D740BE990A83BB4BBF7F0E","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"2396ECDDA6B94A30947CDE5A08344889","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">We can also find the longest and shortest genes, and those with the highest and lowest GC content like in W1:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit fx2tab -i -n -g -l genes.fna | sort -rn -k 2,2 | head<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit fx2tab -i -n -g -l genes.fna | sort -rn -k 3,3 | head<\/span><\/div><div class = \"text-block\">For the lengths we can do the same with the proteins file, and we should find the same order but with lengths X 1\/3<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit fx2tab -i -n -g -l proteins.faa | sort -rn -k 2,2 | head<\/span><\/div><div class = \"text-block\">Note that the GC content is still calculated for proteins, even though this statistic is not useful here. <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null,"duration":0},{"id":736431,"guid":"1FEBBD1730C240D387827C91759C711D","previous_id":736430,"previous_guid":"4D323342996A4F9F81361F8699738060","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"70CF48DE85984DFAA5312DB0A1E5ECB9","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"6CAD1E803C5F40F29295375BC1573CE2","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Since this Staphylococcus aureus genome is divided up among 1 chromosome and 3 plasmids, we may wish to know how many genes were predicted on each plasmid. <\/div><div class = \"text-block\">We know the plasmid names from runnin seqkit fx2tab:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit fx2tab -l -g -n GCF_000009585.1_ASM958v1_genomic.fna<\/span><\/div><div class = \"text-block\">and we can find all genes on these plasmids with commands like the following:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit fx2tab -l -g -n  genes.fna | grep \"NC_017334.1\"<\/span><\/div><div class = \"text-block\">If we don't want to count we can pipe the above command into a \"wc\" command:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit fx2tab -l -g -n  genes.fna | grep \"NC_017334.1\" | wc<\/span><\/div><div class = \"text-block\">And if we want to get very fancy we can use grep to identify all genes EXCEPT those on the main chromosome with the following command:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit fx2tab -l -g -n  genes.fna | grep -v \"NC_017333.1\" | wc<\/span><\/div><div class = \"text-block\">Note the -v flag in grep indicates that all lines that do not match to the given pattern should be returned. <\/div><div class = \"text-block\">With this command we can see that only 14 of 2,691 genes are present on all of the plasmids combined. So the vast majority of genes are present on the chromosome.  <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null,"duration":0},{"id":736432,"guid":"A1DDF9AD2ABC456F85718059B3C2237D","previous_id":736431,"previous_guid":"1FEBBD1730C240D387827C91759C711D","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"5C78413EA23A45DB80952D29B8490DD8","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"F26AE2FE79F7438F8C6406BA7269CB96","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">So far we have only considered protein-coding genes, but genes that encode functional RNAs are very important and should be considered as well. <\/div><div class = \"text-block\">To predict rRNAs and tRNAs we will use the tool barrnap<\/div><div class = \"text-block\">Barrnap is a relatively simple tool to use. We can see the help menu with <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">barrnap -h<\/span><\/div><div class = \"text-block\">We essentially just need to give it the input FASTA file of the genome, and specify an output file with a \">\" symbol. <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">barrnap GCF_000009585.1_ASM958v1_genomic.fna > rRNA.gff<\/span><\/div><div class = \"text-block\">This gives us a GFF file with the coordinates of the predicted RNA genes, but it does not give us the sequences. To retrieve them we need to use a tool called BEDtools, which will cross reference the genome file with the GFF file and give us a FASTA file of all of the rRNA genes. The command is:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">bedtools getfasta -fi GCF_000009585.1_ASM958v1_genomic.fna -bed rRNA.gff -fo rRNA.fasta<\/span><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null,"duration":0},{"id":736433,"guid":"6C7206FC9EDF4501836D595691168820","previous_id":736432,"previous_guid":"A1DDF9AD2ABC456F85718059B3C2237D","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"0F47D318F2374319B06F2581B6E25180","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"A9F184340A6548F2A38B7A865199B6E0","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">The rRNA.fasta file should have our rRNA genes. Let's see how many we found:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit stats rRNA.fasta<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit fx2tab -n -l -g rRNA.fasta<\/span><\/div><div class = \"text-block\">and let's say we wanted to get the sequence of the first 16S rRNA gene:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit fx2tab rRNA.fasta | grep \"NC_017333.1:564549-566098\"<\/span><\/div><div class = \"text-block\">Retrieving the sequence of a 16S rRNA gene can be very helpful if you are unsure of the taxonomy of the genome that you are examining. These genes can be compared to various 16S databases to help identify a microbe. <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null,"duration":0}],"materials":[],"description":"<div class = \"text-blocks\"><\/div>","changed_on":1556630633}