{"id":20470,"title":"SYSB 3036 W04: Homology searches","title_html":"SYSB 3036 W04: Homology searches","image":{"source":"https:\/\/www.protocols.io\/img\/default_protocol.png","placeholder":"https:\/\/www.protocols.io\/img\/default_protocol.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.x8wfrxe","doi_status":2,"uri":"sysb-3036-w04-homology-searches-x8wfrxe","type_id":1,"published_on":1550421489,"version_id":1,"created_on":1550420963,"categories":null,"creator":{"name":"Frank Aylward","affiliation":"Virginia Tech","username":"frank-aylward","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png"},"badges":[{"id":4,"image":{"source":"\/img\/badges\/gold.svg","placeholder":"\/img\/badges\/gold.svg"},"name":"Gold power author!"}],"research_interests":null},"journal":null,"journal_name":null,"journal_link":null,"public":1,"has_versions":1,"link":null,"number_of_steps":8,"authors":[{"name":"Frank Aylward","affiliation":"Virginia Tech","username":"frank-aylward","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png"},"badges":[],"research_interests":null}],"versions":[],"groups":[],"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"forks_count":{"private":0,"public":0},"steps":[{"id":709494,"guid":"19F9FC17EBA14043A9478CA7274C0EB4","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"0F410128501A484BBA1D92646CC38A45","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"FDC90EF5658B4EF1B54B66158E5E3AEE","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Here we will use proteins predicted from the genomes of two <\/span><span style = \"font-style:italic;\">Prochlorococcus<\/span><span> bacteriophage genomes. We can use the wget command, which is already available as part of the base Ubuntu command line. Wget allows us to download files from a web server directly into the folder we are working in, and we need to know the URL for the file in order to do this. The National Center for Biotechnology Information (NCBI) has many genomes and genome-related datasets that it posts for researchers to use, and I have gone through and found the appropriate URLs to use here.\u00a0<\/span><\/div><div class = \"text-block\">Here are the commands:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">wget -O\u00a0prochlorococcus_phage_PSSM2.fna.gz <\/span><span style = \"font-weight:bold;\"><\/span><\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">ftp:\/\/ftp.ncbi.nlm.nih.gov\/genomes\/all\/GCF\/000\/859\/585\/GCF_000859585.1_ViralProj15135\/GCF_000859585.1_ViralProj15135_genomic.fna.gz<\/span><\/a><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">wget -O prochlorococcus_phage_PSSM3.fna.gz <\/span><\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">ftp:\/\/ftp.ncbi.nlm.nih.gov\/genomes\/all\/GCF\/000\/907\/775\/GCF_000907775.1_ViralProj209210\/GCF_000907775.1_ViralProj209210_genomic.fna.gz<\/span><\/a><\/div><div class = \"text-block\">The -O flag specifies the file names that we want the downloads to be called. Without this flag wget would give the downloaded file the same names that they are given on the website, and sometimes these names can be quite long.\u00a0<\/div><div class = \"text-block\">The above commands should download one gzip file each (extension .gz). Gzip files are commonly used for compressing data on Linux systems. Before we use them here we\u00a0will have to uncompress them with the gunzip command<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">gunzip *.gz<\/span><\/div><div class = \"text-block\">After this we should have two .faa files. To check this we can use the ls command:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">ls\u00a0<\/span><span style = \"font-weight:bold;\"><\/span><\/div><div class = \"text-block\">And we should see something like this:<\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":709495,"guid":"DA5E17EA8F6F4ABFA8A9A9CB39EB0E9D","previous_id":709501,"previous_guid":"80920E4032D111E9B157E5182EDE3771","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"476705D5D5064ABEB59D1AE0FD7D1B85","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"99F8DAF4D76E4CD7B5AFF05B25FF70B6","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Now that we have the files downloaded and in the right format, we can get some basic stats about their format and content. FASTA files are formatted such that sequences are always preceded by a \"header\" line that starts with \">\". This line contains information about the name of the sequence, and possibly other information.\u00a0<\/div><div class = \"text-block\">Let's use \"seqkit stats\" to get some sequence statistics for the protein files. <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit stats PSSM2.faa <\/span><\/div><div class = \"text-block\">or<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit stats PSSM3.faa <\/span><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":709496,"guid":"0E628E70D8404AD5A7AD9A49C470DB72","previous_id":709495,"previous_guid":"DA5E17EA8F6F4ABFA8A9A9CB39EB0E9D","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"48661C9A0AB2416C8727814B9D1FAAF4","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"776A621064134623ADD2CC9591C2F6C8","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Now that we have some basic information about the files we can begin formatting them for BLASTP.<\/div><div class = \"text-block\">For any search BLAST needs one FASTA file to be specified as the query, and one to be specified as the reference. Before running BLAST the reference needs to be formatted using a command called makeblastdb, which is part of the BLAST package and should have bee installed above. Makeblastdb\u00a0takes a FASTA file as input and produces several files with different extensions that can be used as reference databases.\u00a0<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">makeblastdb -in PSSM2.faa -dbtype prot<\/span><\/div><div class = \"text-block\">the -in flag specified the FASTA file to be formatted, and the -dbtype flag specifies the molecule type (prot for protein and nucl for nucleic acid).\u00a0<\/div><div class = \"text-block\">If we check the folder after running the above command we should see a number of new files with the prefix PSSM2.faa and several new suffixes. Something like this:<\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":709497,"guid":"92DC207076A743FA953EFB7212126FA6","previous_id":709496,"previous_guid":"0E628E70D8404AD5A7AD9A49C470DB72","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"2237C161C54244AA8C5BCD00701E8CDB","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"DEDBE80D7AE54B189A528B2D35DA0C7D","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Now that we have one file formatted as a reference database we can run BLASTP, using the other FASTA file as the query.\u00a0<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">blastp -query PSSM3.faa -db PSSM2.faa | head -n 100<\/span><\/div><div class = \"text-block\">The output here is quite long, so we can pipe the output into a head command so we see only last 100 lines. You should see something like this (note not all 100 lines are shown below).\u00a0<\/div><div class = \"text-block\">Note that there is a lot of information in this output. The program name and information are provided, and there is information on the query and reference databases used. The alignments that were calculated are also provided- you can see the top of one in the image above, and you can scroll to inspect it when you run it yourself. Note that this information is provided for every alignment that could be calculated for each protein in the query file, so if we had put this output into a file it would be quite large.\u00a0<\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":709498,"guid":"1A6949FB2A914305B8EB84860B773144","previous_id":709497,"previous_guid":"92DC207076A743FA953EFB7212126FA6","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"3DE7DDB448C34AD0A71EAEF5F0456CD0","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"09C1D03A607145B2A3C27AEABDD3E7A3","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Since the output of the last step was quite extensive, we will want to find ways to simplify it.\u00a0<\/div><div class = \"text-block\">Here is a similar command that will provide tab-delimited output (first 10 hits shown with the head command).\u00a0<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">\n<\/span><span style = \"font-weight:bold;\">blastp -query PSSM3.faa -db PSSM2.faa -outfmt 6 | head<\/span><\/div><div class = \"text-block\">You should see something like this:<\/div><div class = \"text-block\">A few notes on the output here:<\/div><div class = \"text-block\">1) The format is tab-delimited, and the columns correspond to different statistics that were calculated for individual alignments. The columns are:\u00a0query protein, reference protein, % identity, alignment length, mismatches, gap opens, query start, query end, reference start, reference end, evalue, bit score<\/div><div class = \"text-block\">2) Every protein in the query is compared to every protein in the reference, and all alignments are reported. So a protein in the query file could conceivable have alignments to multiple proteins in the reference (indeed, we see this in the image above). Also, multiple alignments that could be found between the same proteins are also shown (for example, if only the beginning and end of the amino acid sequences align, then two distinct alignmens will be provided).\u00a0<\/div><div class = \"text-block\">3) Just becuase an alignment is reported does not mean it is 'real'. There are cases of 'spurious alignments' that could happend by random chance. We will need to investigate the statistics provided for each alignment to decide whether or not we think it's worth trusting.\u00a0<\/div><div class = \"text-block\"><span>Here are some additional parameters that will ensure that very poor alignments are not reported, and that only the best alignment for each query protein are given (for simplicity).\u00a0\n<\/span><span style = \"font-weight:bold;\">blastp -query PSSM3.faa -db PSSM2.faa -outfmt 6 -max_target_seqs 1 -evalue 1e-5 -max_hsps 1 -qcov_hsp_perc 50 | head<\/span><span style = \"font-weight:bold;\"><\/span><\/div><div class = \"text-block\">Different users will prefer different e-values and other cutoffs depending on what they are trying to do afterwards, their own comfort level, etc. As a common rule-of-thumb, e-values of 1e-3 and qe-5 are pretty common. For your own analyses you will need to use your own biological insight to decide for yourself what you are willing to trust and whether the results make sense.<\/div><div class = \"text-block\">Here is a breakdown of the flags used above:\n\u00a0-query: this is the input file, so the file with all of the protein sequences that we want to search<\/div><div class = \"text-block\">\n\u00a0-db: this is the database, so the file we just indexed with the makeblastdb command above. Note that makeblastdb creates multiple reference files and that only the root name needs to be given here (so if the database was called refdb, then refdb would be given here even though the index files are called refdb.pin, refdb.phr, etc.)<\/div><div class = \"text-block\">\n\u00a0-max_target_seqs: This flat specifies that we only want the best hit for each query protein. Otherwise all hits are provided.<\/div><div class = \"text-block\">\n\u00a0-outfmt: This specifies that we want the tab-delimited output format rather than the full alignment output. If you forget what the columns are you can use -outfmt 7.<\/div><div class = \"text-block\">\n\u00a0-evalue: This indicates that we want to exclude all hits with evalues above this threshold. A good value is about 0.00001, or 1e-5.<\/div><div class = \"text-block\">\n\u00a0max_hsps: HSPs are 'high-scoring segment pairs'. A query protein can make several separate alignments to a single reference, so this tells the program we want only the best-scoring alignment.<\/div><div class = \"text-block\">\n\u00a0-qcov_hsp_perc: This is the 'query coverage high-scoring sequence pair percent', or the percent of the query protein that has to form an alignment against the reference to be retained. Higher values prevent spurious alignments of only a short portion of the query to a reference.<\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":709499,"guid":"2A3EEAD2DF51427DB3546A067D96338E","previous_id":709498,"previous_guid":"1A6949FB2A914305B8EB84860B773144","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"68405C90FF93471F85E1EF9578A52216","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"E6BF922553504C13B1CDF6E17B678C4A","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Since we are comparing all of the proteins encoded in two viral genomes, it would be nice to get two basic statistics:<\/div><div class = \"text-block\">1) How many proteins in genome A are present in genome B and vice versa.<\/div><div class = \"text-block\">2) Of he proteins that are present in both genomes, how similar are they overall?<\/div><div class = \"text-block\">To answer the first question, we can simply use the command in the last step and count how many hits we find overall. Using the commands described in the previous step we need to be careful to make sure we are only counting the best hit for each query protein, and only one alignment per protein pair.\u00a0<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">blastp -query PSSM3.faa -db PSSM2.faa -outfmt 6 -max_target_seqs 1 -evalue 0.00001 -max_hsps 1 -qcov_hsp_perc 50 | wc<\/span><\/div><div class = \"text-block\">Note that instead of piping the output to the 'head' command, as we did above, now we can pipe it into a 'wc' command to count how many output lines there are. You should see something like this:<\/div><div class = \"text-block\">So according to this analysis, there are 109 proteins in phage PSSM3 that have hits to phage PSSM2, with the parameters we used. What percent of all proteins in PSSM3 have hits to proteins in PSSM2? And vice versa?<\/div><div class = \"text-block\">Now as an exercise try changing the parameters a bit and see how they change the output. What do you think lowering the e-value threshold will do? What is the result of changing the query coverage percent?<\/div><div class = \"text-block\">Importantly, note that the results may change if we switch the query and the reference files (why would this be?), so we will want to do the reciprocal analysis too.\u00a0<\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":709500,"guid":"B99CB077073E476B9B5E4256B19F6379","previous_id":709499,"previous_guid":"2A3EEAD2DF51427DB3546A067D96338E","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"06A45957DBA749E789CCA629F7019C6D","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"70DD28914FB5421C87C02E6215E0B34A","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Above I mentioned two questions we would like to answer:<\/div><div class = \"text-block\">1) How many proteins in genome A are present in genome B and vice versa.<\/div><div class = \"text-block\">2) Of he proteins that are present in both genomes, how similar are they overall?<\/div><div class = \"text-block\">We answered the first qeustion above, and for the second we can use a package called 'datamash' that can help with simple math in the command line.\u00a0Datamash will allow for quick calculation of averages straight from the command line by piping blastp directly into this command. <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">blastp -query PSSM3.faa -db PSSM2.faa -outfmt 6 -max_target_seqs 1 -evalue 0.00001 -max_hsps 1 -qcov_hsp_perc 50 | datamash mean 3<\/span><\/div><div class = \"text-block\">And the output should be a single number, which is the average of all of the % identity scores from the blast output. Since each line was a distinct alignment between one query protein and it's best match in the reference dataset, this gives us a nice idea of how similar the proteins are overall. Here I got 49.98, which is quite low for % amino acid identity. So it seems as though the protein sequences of these genomes are quite dissimilar.\u00a0<\/div><div class = \"text-block\">For closely related genomes many scientists prefer using average nucleic acid identity (ANI) instead, but for distantly-related organisms this metric is less useful. Viruses evolve very quickly, so AAI is more useful here.\u00a0<\/div><div class = \"text-block\">Now try doing the reverse and seeing how similar the results are (i.e., using PSSM2 as the query and PSSM3 as the db).<\/div><div class = \"text-block\">When you vary the e-value what happens to the one-way AAI? Does this make sense?<\/div><div class = \"text-block\">What about query coverage? How does increasing that change the one-way AAI?<\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":709501,"guid":"80920E4032D111E9B157E5182EDE3771","previous_id":709494,"previous_guid":"19F9FC17EBA14043A9478CA7274C0EB4","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"3FD28592E7B045E1A0980AAADC3B772D","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"1F7B493F2EB1478FA3A14929308B61B4","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Now that we have our genomes downloaded and unzipped, we need to predict genes and proteins. <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">prodigal -i prochlorococcus_phage_PSSM2.fna -a PSSM2.faa -d PSSM2.genes.fna -f gff -o PSSM2.gff<\/span><\/div><div class = \"text-block\">and<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">prodigal -i prochlorococcus_phage_PSSM3.fna -a PSSM3.faa -d PSSM3.genes.fna -f gff -o PSSM3.gff<\/span><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"}],"materials":[],"description":null,"changed_on":1550421489}