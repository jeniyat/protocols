{"id":19932,"title":"SYSB 3036 W02: Parsing FASTA files","title_html":"SYSB 3036 W02: Parsing FASTA files","image":{"source":"https:\/\/www.protocols.io\/img\/default_protocol.png","placeholder":"https:\/\/www.protocols.io\/img\/default_protocol.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.xp4fmqw","doi_status":2,"uri":"sysb-3036-w02-parsing-fasta-files-xp4fmqw","type_id":1,"published_on":1549128220,"version_id":1,"created_on":1549126086,"categories":null,"creator":{"name":"Frank Aylward","affiliation":"Virginia Tech","username":"frank-aylward","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png"},"badges":[{"id":4,"image":{"source":"\/img\/badges\/gold.svg","placeholder":"\/img\/badges\/gold.svg"},"name":"Gold power author!"}],"research_interests":null},"journal":null,"journal_name":null,"journal_link":null,"public":1,"has_versions":1,"link":null,"number_of_steps":13,"authors":[{"name":"Frank Aylward","affiliation":"Virginia Tech","username":"frank-aylward","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png"},"badges":[],"research_interests":null}],"versions":[],"groups":[],"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"forks_count":{"private":0,"public":0},"steps":[{"id":704346,"guid":"9FE63080C12A499B886A1EE6D1403BCF","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"6EA3A64803B347A78B763BCE057E332E","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"634AD42360BB44F18A35238A16C68829","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Today we will be looking at the genome of Yersinia pestis, which can be found on NCBI at this location<\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">ftp:\/\/ftp.ncbi.nlm.nih.gov\/genomes\/all\/GCA\/000\/009\/065\/GCA_000009065.1_ASM906v1<\/span><\/a><\/div><div class = \"text-block\">Copy this URL into your browser and take a look at the files. These are publicly-available files that are made available from the National Center for Biotechnology Information (NCBI). <\/div><div class = \"text-block\">Note that many of the files are in a compressed .gz format. <\/div><div class = \"text-block\">.fna files are Fasta Nucleic Acid (chromosome or gene sequences)<\/div><div class = \"text-block\">.faa files are Fasta Amino Acid   (protein sequences)<\/div><div class = \"text-block\">Today we will be most interested in the gene and chromosome files.<\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":704347,"guid":"96522AB252AA4748A5E277C687017876","previous_id":704346,"previous_guid":"9FE63080C12A499B886A1EE6D1403BCF","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"DE6E0EF65A1E4E35AF40CA1D3353577F","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"531C392D2BF34DC28B0ACA1949A042CF","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">To get started let's download the main genome FASTA file for Yersinia Pestis CO92<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">wget <\/span><\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">ftp:\/\/ftp.ncbi.nlm.nih.gov\/genomes\/all\/GCA\/000\/009\/065\/GCA_000009065.1_ASM906v1\/GCA_000009065.1_ASM906v1_cds_from_genomic.fna.gz<\/span><\/a><\/div><div class = \"text-block\">This command uses the common Unix utility \"wget\", which will download a file directy to the folder in which you are located. After doing this you should see the .fna.gz file in your folder. You can check this with the \"ls\" command. <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":704348,"guid":"65D0CFA019B5421691973F88FF664AF0","previous_id":704347,"previous_guid":"96522AB252AA4748A5E277C687017876","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"7C066B33577F492DA9ABF4B832DD56D8","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"DB484B7C5509418A9C811939220E887F","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Because this file is compressed, we must first uncompress it with the \"gunzip\" command (another common Unix utility). <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">gunzip GCA_000009065.1_ASM906v1_cds_from_genomic.fna.gz<\/span><\/div><div class = \"text-block\">After this you should see the exact same file, only without the .gz ending. You can check this with the \"ls\" command. <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":704349,"guid":"0B84B216320747298212BD5D343596EC","previous_id":704348,"previous_guid":"65D0CFA019B5421691973F88FF664AF0","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"3F5DBFFE26D249478CE189F257890D02","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"ACEE0A4EAAE042AFA66BC02024EC18CF","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Now to start analyzing this FASTA file we first want to check on the formatting. <\/div><div class = \"text-block\">Sometimes genome files can be quite large, so we don't want to open the entire file with a text editor. Instead we can just check the first and last few lines to see what the format looks like. For this we can use the \"head\" and \"tail\" Unix commands. <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">head<\/span><span style = \"font-weight:bold;font-weight:bold;\"> <\/span><span style = \"font-weight:bold;\">GCA_000009065.1_ASM906v1_cds_from_genomic.fna<\/span><\/div><div class = \"text-block\">and<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">tail GCA_000009065.1_ASM906v1_cds_from_genomic.fna<\/span><\/div><div class = \"text-block\">You should see a pretty typical FASTA format. Header lines start with a \">\" and provide names and descriptions, and subsequent lines have the actual sequence information (in this case ATGCs since the sequence is DNA). <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":704350,"guid":"0640D58255AB46AD9CF89AB59F03E158","previous_id":704349,"previous_guid":"0B84B216320747298212BD5D343596EC","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"077F9679C7B84CC1969D00B6ECD82778","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"A9E3BF1F4F734F028A74E025476F2E08","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Now that we have confirmed this is a typical FASTA file, we can start analyzing it with the \"seqkit\" tool. <\/div><div class = \"text-block\">The home page for seqkit with instructions for use is here: <\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/github.com\/shenwei356\/seqkit<\/span><\/a><\/div><div class = \"text-block\">You can also get a list of instructions by typing:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit --help <\/span><\/div><div class = \"text-block\">seqkit is a very versatile tools and it has a large number of sub-commands. We will primarily be using the \"stats\" and \"fx2tab\" commands, so check out the help menu for those with:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit stats --help<\/span><\/div><div class = \"text-block\">and <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit fx2tab --help<\/span><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":704354,"guid":"8800BDBF8B4D4E7DB2F093538A5411E1","previous_id":704350,"previous_guid":"0640D58255AB46AD9CF89AB59F03E158","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"172B6A1C1D8C454B81953E31EB27AF11","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"0AD6C8B5DEB9498DAFDCBE9B43BDB683","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Now let's get some basic stats about the genes with the \"stats\" command. <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit stats GCA_000009065.1_ASM906v1_cds_from_genomic.fna<\/span><\/div><div class = \"text-block\">How does the total length of the protein-coding genes compare to the total length of the whole genome?<\/div><div class = \"text-block\">What is the range of gene lengths?<\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":704355,"guid":"E3815FBAE2CA4BA283B62C04494E00E5","previous_id":704354,"previous_guid":"8800BDBF8B4D4E7DB2F093538A5411E1","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"1E82A37A74DD4E96AF8B39CA3E50BAE9","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"048A0751CC0E483598352C6DC5124CA0","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Let's look at some stats from individual genes using the \"fx2tab\" command:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit fx2tab -a -i -g -l -n GCA_000009065.1_ASM906v1_cds_from_genomic.fna | head<\/span><\/div><div class = \"text-block\">Note that we are piping the command to the \"head\" command here, so that only the first 10 lines are shown. Otherwise thousands of entries would flood our terminal, which is always difficult to interpret (and may cause it to crash). <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":704356,"guid":"3D73ECCDE299441E85854CBD5955E4AF","previous_id":704355,"previous_guid":"E3815FBAE2CA4BA283B62C04494E00E5","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"7E910223B3224E4EBE97D2A622D447B7","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"F684574103F24726BA6ACA13673A3499","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Now let's try to sort the genes based on their length, so that we can find the names of the longest and shortest genes:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit fx2tab -a -i -g -l -n GCA_000009065.1_ASM906v1_cds_from_genomic.fna | sort -r -n -k 2,2 | head<\/span><\/div><div class = \"text-block\">This should return the longest 10 genes. The \"sort\" command uses several flags. <\/div><div class = \"text-block\">-r indicates a reverse sort (default is from low to high. <\/div><div class = \"text-block\">-n indicates a numeric sort (default is alphabetical). <\/div><div class = \"text-block\">-k denotes the columns to sort by. The \"2,2\" means we are sorting only by the second column. Note that all whitespace counts as a single tab here, so the second column is the length (it would be the 4th if we exported the results to a file). <\/div><div class = \"text-block\">We can do the same with \"tail\" instead of head to find the names of the shortest genes. <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":704357,"guid":"F344B7A421A04AA5A8307E63E8C77633","previous_id":704356,"previous_guid":"3D73ECCDE299441E85854CBD5955E4AF","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"AB2DBA6F770644F0AB5A7EF48BE9949F","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"E6C68CFCCEF642458CC0B762B33547FA","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">We can use the same logic as above to find the genes with the highest and lowest %GC content. For this we need to sort by the third column. <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit fx2tab -H -a -i -g -l -n GCA_000009065.1_ASM906v1_cds_from_genomic.fna | sort -rn -k 3,3 | head <\/span><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":704358,"guid":"6D6E3902C62F4ED9BB0935D9A4F65E85","previous_id":704361,"previous_guid":"67F701D0270D11E9AE92997D110FD8A3","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"A42D1F0772794A1598776D4B135E23A0","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"B6A42CEEA87341228FD8851BA2470E89","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Now let's say we want to retrieve the actual DNA sequence of the gene with the highest %GC content. We can do this by using a \"seqkit fx2tab\" command and piping the results to a \"grep\" command. <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit fx2tab -H -a -i -g -l GCA_000009065.1_ASM906v1_cds_from_genomic.fna | head -n 1<\/span><\/div><div class = \"text-block\">Note that we did not use the \"-n\" flag in the seqkit fx2tab command, since this time we wanted the sequence (before we just wanted the statistics). <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":704359,"guid":"8D67BBA0270B11E9AE92997D110FD8A3","previous_id":704358,"previous_guid":"6D6E3902C62F4ED9BB0935D9A4F65E85","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"E5350FA51F81415597D0EA545492A719","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"629077386D96498AA51D9E26EB397099","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">We can also search the actual gene sequences to find certain motifs with the \"locate\" subcommand. <\/div><div class = \"text-block\">Lets see how many genes have a string of 11 G's:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit locate -p \"GGGGGGGGGGG\" GCA_000009065.1_ASM906v1_cds_from_genomic.fna<\/span><\/div><div class = \"text-block\">Note that some genes come up multiple times, since they have multiple matches (in this case, genes with a very high GC content will come up several times). <\/div><div class = \"text-block\">To return only one line per gene, we can pipe the result to a \"sort\" command using the \"-u\" option, to specify we only want unique matches.  <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit locate -p \"GGGGGGGGGGG\" GCA_000009065.1_ASM906v1_cds_from_genomic.fna | sort -u -k 1,1<\/span><\/div><div class = \"text-block\">Note that we still have to use the -k 1,1 flag for sort, since we only want to sort by the first column. <\/div><div class = \"text-block\">Now let's do the same, but allow for one mismatch:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit locate -m 1 -p \"GGGGGGGGGG\" GCA_000009065.1_ASM906v1_cds_from_genomic.fna | sort -u -k1,1<\/span><\/div><div class = \"text-block\">Note that we get many more matches when allowing for even just a single mismatch, since that mismatch can occur anywhere on the sequence. | <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":704361,"guid":"67F701D0270D11E9AE92997D110FD8A3","previous_id":704357,"previous_guid":"F344B7A421A04AA5A8307E63E8C77633","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"4E036689D8E44062AAF8712C8C1F1C5C","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"AF07CA8572844F75A1EB9D36A29E18ED","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">If we want to do something more complex and find the average GC content of the genes, we can pipe the result to \"datamash\" a nice program for simple math. <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit fx2tab -H -a -i -g -l -n GCA_000009065.1_ASM906v1_cds_from_genomic.fna | sort -rn -k 3,3 | datamash mean 5<\/span><\/div><div class = \"text-block\">Datamash needs the operation as the second item in the command (sum, mean, etc) and the column ID as the third item. Note that whitespace is sometimes interpreted strangely by these commands, so here we actually need to use the 5th column (just by looking at the output we would assume %GC would be the third column, and that is how \"sort\" interprets it, but every tool is different). <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":704362,"guid":"720D6790270D11E9AE92997D110FD8A3","previous_id":704359,"previous_guid":"8D67BBA0270B11E9AE92997D110FD8A3","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"73DD3826229E48B09B1455DF82416B11","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"8D407916D72E432C9E7B04E8B9AF1D86","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Lastly, let's say we want to examine the actual sequences a bit more. Perhaps we are interested in the start codons used by these genes. We can identify them by using the \"subseq\" command. <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit subseq -r 1:3 GCA_000009065.1_ASM906v1_cds_from_genomic.fna | grep -v \">\" | head<\/span><\/div><div class = \"text-block\">Here \"-r\" tells the command that we want only the first 3 bases in the sequences returned. The command also returns the FASTA headers, so we can remove them by piping the result to \"grep -v \">\"\", since this will only match lines that do not have the FASTA > header character. <\/div><div class = \"text-block\">If we wanted to get a summary of how often different start codons are used, we can sort and summarize the results with \"sort\" and then \"uniq\". <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">seqkit subseq -r 1:3 GCA_000009065.1_ASM906v1_cds_from_genomic.fna | grep -v \">\" | sort | uniq -c<\/span><\/div><div class = \"text-block\">Here we can see that although ATG is the canonical and most frequently used start codon, there are actually a variety of different start codons used throughout the genome. <\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"}],"materials":[],"description":"<div class = \"text-blocks\"><div class = \"text-block\">Week 1<\/div><div class = \"text-block\">Introduction to parsing FASTA files.<\/div><div class = \"text-block\">Commands to be entered into the command line are in bold. <\/div><div class = \"text-block\">Here we will be using various base Unix commands such as head, tail, sort, wget, and others. <\/div><div class = \"text-block\">We will also be using the seqkit tool to process FASTA files. The main page for seqkit is here:<\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/github.com\/shenwei356\/seqkit<\/span><\/a><\/div><\/div>","changed_on":1549128220}