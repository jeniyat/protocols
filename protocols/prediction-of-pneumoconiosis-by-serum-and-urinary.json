{"id":20453,"title":"Prediction of pneumoconiosis by serum and urinary biomarkers in workers exposed to asbestos-contaminated minerals","title_html":"Prediction of pneumoconiosis by serum and urinary biomarkers in workers exposed to asbestos-contaminated minerals","image":{"source":"https:\/\/www.protocols.io\/img\/default_protocol.png","placeholder":"https:\/\/www.protocols.io\/img\/default_protocol.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.x8dfrs6","doi_status":2,"uri":"prediction-of-pneumoconiosis-by-serum-and-urinary-x8dfrs6","type_id":1,"published_on":1554480364,"version_id":0,"created_on":1550370314,"categories":null,"creator":{"name":"Hsiao-Yu Yang","affiliation":"National Taiwan University","username":"hsiaoyu-yang","link":"https:\/\/doi.org\/10.1371\/journal.pone.0214808","image":{"source":"\/img\/avatars\/006.png","placeholder":"\/img\/avatars\/006.png"},"badges":[{"id":2,"image":{"source":"\/img\/badges\/bronze.svg","placeholder":"\/img\/badges\/bronze.svg"},"name":"Author"}],"research_interests":null},"journal":"PLOS One","journal_name":"PLOS One","journal_link":"https:\/\/doi.org\/10.1371\/journal.pone.0214808","public":1,"has_versions":0,"link":"https:\/\/doi.org\/10.1371\/journal.pone.0214808","total_collections":0,"number_of_steps":6,"authors":[{"name":"Hsiao-Yu Yang","affiliation":"National Taiwan University","username":"hsiaoyu-yang","link":null,"image":{"source":"\/img\/avatars\/006.png","placeholder":"\/img\/avatars\/006.png"},"badges":[],"research_interests":null}],"versions":[],"groups":[],"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":0,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"steps":[{"id":709326,"guid":"BD6004B0325B11E9BEFCE953CA63C7FA","previous_id":709327,"previous_guid":"CEE249A0325B11E9BEFCE953CA63C7FA","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"98BB193B89334FD6B5E4E564BA6A4C3C","order_id":1,"type_id":6,"title":"Section","source":{"title":"Dataset preparation"}},{"id":1054724,"guid":"524B37B0FF424877B2B5A40E0D4773E8","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Download the dataset and store at \"C:\\r\".<\/div><\/div>"}},{"id":1054725,"guid":"24F85480326911E9BEFCE953CA63C7FA","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/bc84a.csv","placeholder":"https:\/\/www.protocols.io\/img\/extensions\/csv.png","original_name":"PLoS One Excel Main Raw Datafile.csv"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":709327,"guid":"CEE249A0325B11E9BEFCE953CA63C7FA","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"7931844ED6FF4545A358AADCFCEFEB9B","order_id":1,"type_id":6,"title":"Section","source":{"title":"Required software"}},{"id":1054724,"guid":"75A5E43943384DC7A4D467836AD9D371","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">This protocol requires R-3.5.2 for Windows (32\/64 bit) (https:\/\/cran.r-project.org\/bin\/windows\/base\/)<\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#94EBFF"},{"id":709332,"guid":"DD631C20326011E9BEFCE953CA63C7FA","previous_id":709327,"previous_guid":"CEE249A0325B11E9BEFCE953CA63C7FA","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"6A3CD5B8F2534C37B637046A9D1399AD","order_id":1,"type_id":6,"title":"Section","source":{"title":"Dataset preparation"}},{"id":1054724,"guid":"A05B9CCC39644761A431353B9AAE34FC","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><\/div>"}},{"id":1054725,"guid":"123C4950326411E9BEFCE953CA63C7FA","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/bc82a.csv","placeholder":"https:\/\/www.protocols.io\/img\/extensions\/csv.png","original_name":"PLoS One Excel Main Raw Datafile.csv"}}],"cases":null,"data":null,"section":null,"section_color":"#84CE84"},{"id":709337,"guid":"F8B9D470326311E9BEFCE953CA63C7FA","previous_id":709332,"previous_guid":"DD631C20326011E9BEFCE953CA63C7FA","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"89F6D7AE17F848D986AC9D61411E83B1","order_id":1,"type_id":6,"title":"Section","source":{"title":"Dataset preparation"}},{"id":1054724,"guid":"47EEC4E5CA21484E801801CE308F06B3","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Download the file of \u201cPLoS One Excel Main Raw Datafile.csv\u201d. Store at \u201cC:\\r\u201d<\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#84CE84"},{"id":709404,"guid":"EF874990326411E9BEFCE953CA63C7FA","previous_id":709337,"previous_guid":"F8B9D470326311E9BEFCE953CA63C7FA","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"2C1F3174C2654D5992ECCB46F739624E","order_id":1,"type_id":6,"title":"Section","source":{"title":"Copy the R script of six machine learning algorhithms and pastes onthe R console."}},{"id":1054724,"guid":"AD8CFACB562040CA94A0F72219A5F444","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><\/div>"}},{"id":1054725,"guid":"B60BCB30326611E9BEFCE953CA63C7FA","order_id":2,"type_id":15,"title":"command","source":{"name":"library(rattle)   # Access the weather dataset and utilities.\nlibrary(magrittr) # Utilise %>% and %<>% pipeline operators.\n\nbuilding <- TRUE\nscoring  <- ! building\n\n# A pre-defined value is used to reset the random seed \n# so that results are repeatable.\n\ncrv$seed <- 42 \n\n# Load a dataset from file.\n\nfname     <- \"file:\/\/\/C:\/r\/PLoS One Excel Main Raw Datafile.csv\" \ncrs$dataset <- read.csv(fname,\n\t\t\tna.strings=c(\".\", \"NA\", \"\", \"?\"),\n\t\t\tstrip.white=TRUE, encoding=\"UTF-8\")\n\n\n# Action the user selections from the Data tab. \n\n# The following variable selections have been noted.\n\ncrs$input     <- c(\"Age\", \"Sex\", \"CEA\", \"SMRP\", \"Fibulin3\",\n                   \"OhdG\")\n\ncrs$numeric   <- c(\"Age\", \"Sex\", \"CEA\", \"SMRP\", \"Fibulin3\",\n                   \"OhdG\")\n\ncrs$categoric <- NULL\n\ncrs$target    <- \"Pneumoconiosis\"\ncrs$risk      <- NULL\ncrs$ident     <- NULL\ncrs$ignore    <- c(\"FeNO\", \"FVC\", \"FEV1\", \"Smoking\")\ncrs$weights   <- NULL\n\n#============================================================\n# Decision Tree \n\n# The 'rpart' package provides the 'rpart' function.\n\nlibrary(rpart, quietly=TRUE)\n\n# Reset the random number seed to obtain the same results each time.\n\nset.seed(crv$seed)\n\n# Build the Decision Tree model.\n\ncrs$rpart <- rpart(Pneumoconiosis ~ .,\n    data=crs$dataset[, c(crs$input, crs$target)],\n    method=\"class\",\n    parms=list(split=\"information\"),\n    control=rpart.control(usesurrogate=0, \n        maxsurrogate=0),\n    model=TRUE)\n\n# Generate a textual view of the Decision Tree model.\n\nprint(crs$rpart)\nprintcp(crs$rpart)\ncat(\"\\n\")\n\n#\n#============================================================\n# Extreme Boost \n\n# The `xgboost' package implements the extreme gradient boost algorithm.\n\n# Build the Extreme Boost model.\n\nset.seed(crv$seed)\n\ncrs$ada <- xgboost(Pneumoconiosis ~ .,\n  data              = crs$dataset[,c(crs$input, crs$target)],\n  max_depth         = 6,\n  eta               = 0.3, \n  num_parallel_tree = 1, \n  nthread           = 2, \n  nround            = 50,\n  metrics           = 'error',\n  objective         = 'binary:logistic')\n\n# Print the results of the modelling.\n\nprint(crs$ada)\n\ncat('\\nFinal iteration error rate:\\n')\nprint(round(crs$ada$evaluation_log[crs$ada$niter, ], 2))\n\ncat('\\nImportance\/Frequency of variables actually used:\\n')\nprint(crs$imp <- importance(crs$ada, crs$dataset[,c(crs$input, crs$target)]))\n\n\n#============================================================\n# Build a Random Forest model using the traditional approach.\n\nset.seed(crv$seed)\n\ncrs$rf <- randomForest::randomForest(as.factor(Pneumoconiosis) ~ .,\n  data=crs$dataset[, c(crs$input, crs$target)], \n  ntree=500,\n  mtry=2,\n  importance=TRUE,\n  na.action=randomForest::na.roughfix,\n  replace=FALSE)\n\n# Generate textual output of the 'Random Forest' model.\n\ncrs$rf\n\n# The `pROC' package implements various AUC functions.\n\n# Calculate the Area Under the Curve (AUC).\n\npROC::roc(crs$rf$y, as.numeric(crs$rf$predicted))\n\n# Calculate the AUC Confidence Interval.\n\npROC::ci.auc(crs$rf$y, as.numeric(crs$rf$predicted))FALSE\n\n# List the importance of the variables.\n\nrn <- round(randomForest::importance(crs$rf), 2)\nrn[order(rn[,3], decreasing=TRUE),]\n\n\n\n#============================================================\n# Support vector machine. \n\n# The 'kernlab' package provides the 'ksvm' function.\n\nlibrary(kernlab, quietly=TRUE)\n\n# Build a Support Vector Machine model.\n\nset.seed(crv$seed)\ncrs$ksvm <- ksvm(as.factor(Pneumoconiosis) ~ .,\n      data=crs$dataset[,c(crs$input, crs$target)],\n      kernel=\"rbfdot\",\n      prob.model=TRUE)\n\n# Generate a textual view of the SVM model.\n\ncrs$ksvm\n\n\n\n#============================================================\n# Regression model \n\n# Build a Regression model.\n\ncrs$glm <- glm(Pneumoconiosis ~ .,\n    data=crs$dataset[, c(crs$input, crs$target)],\n    family=binomial(link=\"logit\"))\n\n# Generate a textual view of the Linear model.\n\nprint(summary(crs$glm))\n\ncat(sprintf(\"Log likelihood: %.3f (%d df)\\n\",\n            logLik(crs$glm)[1],\n            attr(logLik(crs$glm), \"df\")))\n\ncat(sprintf(\"Null\/Residual deviance difference: %.3f (%d df)\\n\",\n            crs$glm$null.deviance-crs$glm$deviance,\n            crs$glm$df.null-crs$glm$df.residual))\n\ncat(sprintf(\"Chi-square p-value: %.8f\\n\",\n            dchisq(crs$glm$null.deviance-crs$glm$deviance,\n                   crs$glm$df.null-crs$glm$df.residual)))\n\ncat(sprintf(\"Pseudo R-Square (optimistic): %.8f\\n\",\n             cor(crs$glm$y, crs$glm$fitted.values)))\n\ncat('\\n==== ANOVA ====\\n\\n')\nprint(anova(crs$glm, test=\"Chisq\"))\ncat(\"\\n\")\n\n\n\n#============================================================\n# Neural Network \n\n# Build a neural network model using the nnet package.\n\nlibrary(nnet, quietly=TRUE)\n\n# Build the NNet model.\n\nset.seed(199)\ncrs$nnet <- nnet(as.factor(Pneumoconiosis) ~ .,\n    data=crs$dataset[,c(crs$input, crs$target)],\n    size=10, skip=TRUE, MaxNWts=10000, trace=FALSE, maxit=100)\n\n# Print the results of the modelling.\n\ncat(sprintf(\"A %s network with %d weights.\\n\",\n    paste(crs$nnet$n, collapse=\"-\"),\n    length(crs$nnet$wts)))\ncat(sprintf(\"Inputs: %s.\\n\",\n    paste(crs$nnet$coefnames, collapse=\", \")))\ncat(sprintf(\"Output: %s.\\n\",\n    names(attr(crs$nnet$terms, \"dataClasses\"))[1]))\ncat(sprintf(\"Sum of Squares Residuals: %.4f.\\n\",\n    sum(residuals(crs$nnet) ^ 2)))\ncat(\"\\n\")\nprint(summary(crs$nnet))\ncat('\\n')\n\n\n\n#============================================================\n# Evaluate model performance on the training dataset. \n\n# Sensitivity\/Specificity Plot: requires the ROCR package\n\nlibrary(ROCR)\n\n# Generate Sensitivity\/Specificity Plot for rpart model on PLoS One Excel Main Raw Datafile.csv [**train**].\n\ncrs$pr <- predict(crs$rpart, newdata=crs$dataset[,c(crs$input, crs$target)])[,2]\n\n# Remove observations with missing target.\n\nno.miss   <- na.omit(crs$dataset[,c(crs$input, crs$target)]$Pneumoconiosis)\nmiss.list <- attr(no.miss, \"na.action\")\nattributes(no.miss) <- NULL\n\nif (length(miss.list))\n{\n  pred <- prediction(crs$pr[-miss.list], no.miss)\n} else\n{\n  pred <- prediction(crs$pr, no.miss)\n}\nROCR::plot(performance(pred, \"sens\", \"spec\"), col=\"#CC0000FF\", lty=1, add=FALSE)\n\n\n# Sensitivity\/Specificity Plot: requires the ROCR package\n\nlibrary(ROCR)\n\n# Generate Sensitivity\/Specificity Plot for xgb model on PLoS One Excel Main Raw Datafile.csv [**train**].\n\ncrs$pr <- predict(crs$ada, crs$dataset[,c(crs$input, crs$target)])\n\n# Remove observations with missing target.\n\nno.miss   <- na.omit(crs$dataset[,c(crs$input, crs$target)]$Pneumoconiosis)\nmiss.list <- attr(no.miss, \"na.action\")\nattributes(no.miss) <- NULL\n\nif (length(miss.list))\n{\n  pred <- prediction(crs$pr[-miss.list], no.miss)\n} else\n{\n  pred <- prediction(crs$pr, no.miss)\n}\nROCR::plot(performance(pred, \"sens\", \"spec\"), col=\"#CCCC00FF\", lty=2, add=TRUE)\n\n\n# Sensitivity\/Specificity Plot: requires the ROCR package\n\nlibrary(ROCR)\n\n# Generate Sensitivity\/Specificity Plot for rf model on PLoS One Excel Main Raw Datafile.csv [**train**].\n\ncrs$pr <- predict(crs$rf, newdata=na.omit(crs$dataset[,c(crs$input, crs$target)]),\n    type    = \"prob\")[,2]\n\n# Remove observations with missing target.\n\nno.miss   <- na.omit(na.omit(crs$dataset[,c(crs$input, crs$target)])$Pneumoconiosis)\nmiss.list <- attr(no.miss, \"na.action\")\nattributes(no.miss) <- NULL\n\nif (length(miss.list))\n{\n  pred <- prediction(crs$pr[-miss.list], no.miss)\n} else\n{\n  pred <- prediction(crs$pr, no.miss)\n}\nROCR::plot(performance(pred, \"sens\", \"spec\"), col=\"#00CC00FF\", lty=3, add=TRUE)\n\n\n# Sensitivity\/Specificity Plot: requires the ROCR package\n\nlibrary(ROCR)\n\n# Generate Sensitivity\/Specificity Plot for ksvm model on PLoS One Excel Main Raw Datafile.csv [**train**].\n\ncrs$pr <- kernlab::predict(crs$ksvm, newdata=na.omit(crs$dataset[,c(crs$input, crs$target)]),\n    type    = \"probabilities\")[,2]\n\n# Remove observations with missing target.\n\nno.miss   <- na.omit(na.omit(crs$dataset[,c(crs$input, crs$target)])$Pneumoconiosis)\nmiss.list <- attr(no.miss, \"na.action\")\nattributes(no.miss) <- NULL\n\nif (length(miss.list))\n{\n  pred <- prediction(crs$pr[-miss.list], no.miss)\n} else\n{\n  pred <- prediction(crs$pr, no.miss)\n}\nROCR::plot(performance(pred, \"sens\", \"spec\"), col=\"#00CCCCFF\", lty=4, add=TRUE)\n\n\n# Sensitivity\/Specificity Plot: requires the ROCR package\n\nlibrary(ROCR)\n\n# Generate Sensitivity\/Specificity Plot for glm model on PLoS One Excel Main Raw Datafile.csv [**train**].\n\ncrs$pr <- predict(crs$glm, \n   type    = \"response\",\n   newdata = crs$dataset[,c(crs$input, crs$target)])\n\n# Remove observations with missing target.\n\nno.miss   <- na.omit(crs$dataset[,c(crs$input, crs$target)]$Pneumoconiosis)\nmiss.list <- attr(no.miss, \"na.action\")\nattributes(no.miss) <- NULL\n\nif (length(miss.list))\n{\n  pred <- prediction(crs$pr[-miss.list], no.miss)\n} else\n{\n  pred <- prediction(crs$pr, no.miss)\n}\nROCR::plot(performance(pred, \"sens\", \"spec\"), col=\"#0000CCFF\", lty=5, add=TRUE)\n\n\n# Sensitivity\/Specificity Plot: requires the ROCR package\n\nlibrary(ROCR)\n\n# Generate Sensitivity\/Specificity Plot for nnet model on PLoS One Excel Main Raw Datafile.csv [**train**].\n\ncrs$pr <- predict(crs$nnet, newdata=crs$dataset[,c(crs$input, crs$target)])\n\n# Remove observations with missing target.\n\nno.miss   <- na.omit(crs$dataset[,c(crs$input, crs$target)]$Pneumoconiosis)\nmiss.list <- attr(no.miss, \"na.action\")\nattributes(no.miss) <- NULL\n\nif (length(miss.list))\n{\n  pred <- prediction(crs$pr[-miss.list], no.miss)\n} else\n{\n  pred <- prediction(crs$pr, no.miss)\n}\nROCR::plot(performance(pred, \"sens\", \"spec\"), col=\"#CC00CCFF\", lty=6, add=TRUE)\n\n\n# Add a legend to the plot.\n\nlegend(\"bottomleft\", c(\"rpart\",\"xgb\",\"rf\",\"ksvm\",\"glm\",\"nnet\"), col=rainbow(6, 1, .8), lty=1:6, title=\"Models\", inset=c(0.05, 0.05))\n\n# Add decorations to the plot.\n\ntitle(main=\"Sensitivity\/Specificity (tpr\/tnr)  PLoS One Excel Main Raw Datafile.csv [**train**]\",\n    sub=paste(\"Rattle\", format(Sys.time(), \"%Y-%b-%d %H:%M:%S\"), Sys.info()[\"user\"]))\ngrid()","command":"R console","os_name":"","os_version":""}}],"cases":null,"data":null,"section":null,"section_color":"#94EBFF"},{"id":709406,"guid":"CFBBF4E0326811E9BEFCE953CA63C7FA","previous_id":709326,"previous_guid":"BD6004B0325B11E9BEFCE953CA63C7FA","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"DA95FCF9F1324E7AA93A2D69F3E789E4","order_id":1,"type_id":6,"title":"Section","source":{"title":"Cpoy the R script of six machine learning algorithms on R consol."}},{"id":1054724,"guid":"E9F4160D9B8D4ABFA5023DB62E41D527","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><\/div>"}},{"id":1054725,"guid":"D4E5D350326811E9BEFCE953CA63C7FA","order_id":2,"type_id":15,"title":"command","source":{"name":"library(rattle)   # Access the weather dataset and utilities.\nlibrary(magrittr) # Utilise %>% and %<>% pipeline operators.\n\nbuilding <- TRUE\nscoring  <- ! building\n\n# A pre-defined value is used to reset the random seed \n# so that results are repeatable.\n\ncrv$seed <- 42 \n\n# Load a dataset from file.\n\nfname     <- \"file:\/\/\/C:\/r\/PLoS One Excel Main Raw Datafile.csv\" \ncrs$dataset <- read.csv(fname,\n\t\t\tna.strings=c(\".\", \"NA\", \"\", \"?\"),\n\t\t\tstrip.white=TRUE, encoding=\"UTF-8\")\n\n\n# Action the user selections from the Data tab. \n\n# The following variable selections have been noted.\n\ncrs$input     <- c(\"Age\", \"Sex\", \"CEA\", \"SMRP\", \"Fibulin3\",\n                   \"OhdG\")\n\ncrs$numeric   <- c(\"Age\", \"Sex\", \"CEA\", \"SMRP\", \"Fibulin3\",\n                   \"OhdG\")\n\ncrs$categoric <- NULL\n\ncrs$target    <- \"Pneumoconiosis\"\ncrs$risk      <- NULL\ncrs$ident     <- NULL\ncrs$ignore    <- c(\"FeNO\", \"FVC\", \"FEV1\", \"Smoking\")\ncrs$weights   <- NULL\n\n#============================================================\n# Decision Tree \n\n# The 'rpart' package provides the 'rpart' function.\n\nlibrary(rpart, quietly=TRUE)\n\n# Reset the random number seed to obtain the same results each time.\n\nset.seed(crv$seed)\n\n# Build the Decision Tree model.\n\ncrs$rpart <- rpart(Pneumoconiosis ~ .,\n    data=crs$dataset[, c(crs$input, crs$target)],\n    method=\"class\",\n    parms=list(split=\"information\"),\n    control=rpart.control(usesurrogate=0, \n        maxsurrogate=0),\n    model=TRUE)\n\n# Generate a textual view of the Decision Tree model.\n\nprint(crs$rpart)\nprintcp(crs$rpart)\ncat(\"\\n\")\n\n#\n#============================================================\n# Extreme Boost \n\n# The `xgboost' package implements the extreme gradient boost algorithm.\n\n# Build the Extreme Boost model.\n\nset.seed(crv$seed)\n\ncrs$ada <- xgboost(Pneumoconiosis ~ .,\n  data              = crs$dataset[,c(crs$input, crs$target)],\n  max_depth         = 6,\n  eta               = 0.3, \n  num_parallel_tree = 1, \n  nthread           = 2, \n  nround            = 50,\n  metrics           = 'error',\n  objective         = 'binary:logistic')\n\n# Print the results of the modelling.\n\nprint(crs$ada)\n\ncat('\\nFinal iteration error rate:\\n')\nprint(round(crs$ada$evaluation_log[crs$ada$niter, ], 2))\n\ncat('\\nImportance\/Frequency of variables actually used:\\n')\nprint(crs$imp <- importance(crs$ada, crs$dataset[,c(crs$input, crs$target)]))\n\n\n#============================================================\n# Build a Random Forest model using the traditional approach.\n\nset.seed(crv$seed)\n\ncrs$rf <- randomForest::randomForest(as.factor(Pneumoconiosis) ~ .,\n  data=crs$dataset[, c(crs$input, crs$target)], \n  ntree=500,\n  mtry=2,\n  importance=TRUE,\n  na.action=randomForest::na.roughfix,\n  replace=FALSE)\n\n# Generate textual output of the 'Random Forest' model.\n\ncrs$rf\n\n# The `pROC' package implements various AUC functions.\n\n# Calculate the Area Under the Curve (AUC).\n\npROC::roc(crs$rf$y, as.numeric(crs$rf$predicted))\n\n# Calculate the AUC Confidence Interval.\n\npROC::ci.auc(crs$rf$y, as.numeric(crs$rf$predicted))FALSE\n\n# List the importance of the variables.\n\nrn <- round(randomForest::importance(crs$rf), 2)\nrn[order(rn[,3], decreasing=TRUE),]\n\n\n\n#============================================================\n# Support vector machine. \n\n# The 'kernlab' package provides the 'ksvm' function.\n\nlibrary(kernlab, quietly=TRUE)\n\n# Build a Support Vector Machine model.\n\nset.seed(crv$seed)\ncrs$ksvm <- ksvm(as.factor(Pneumoconiosis) ~ .,\n      data=crs$dataset[,c(crs$input, crs$target)],\n      kernel=\"rbfdot\",\n      prob.model=TRUE)\n\n# Generate a textual view of the SVM model.\n\ncrs$ksvm\n\n\n\n#============================================================\n# Regression model \n\n# Build a Regression model.\n\ncrs$glm <- glm(Pneumoconiosis ~ .,\n    data=crs$dataset[, c(crs$input, crs$target)],\n    family=binomial(link=\"logit\"))\n\n# Generate a textual view of the Linear model.\n\nprint(summary(crs$glm))\n\ncat(sprintf(\"Log likelihood: %.3f (%d df)\\n\",\n            logLik(crs$glm)[1],\n            attr(logLik(crs$glm), \"df\")))\n\ncat(sprintf(\"Null\/Residual deviance difference: %.3f (%d df)\\n\",\n            crs$glm$null.deviance-crs$glm$deviance,\n            crs$glm$df.null-crs$glm$df.residual))\n\ncat(sprintf(\"Chi-square p-value: %.8f\\n\",\n            dchisq(crs$glm$null.deviance-crs$glm$deviance,\n                   crs$glm$df.null-crs$glm$df.residual)))\n\ncat(sprintf(\"Pseudo R-Square (optimistic): %.8f\\n\",\n             cor(crs$glm$y, crs$glm$fitted.values)))\n\ncat('\\n==== ANOVA ====\\n\\n')\nprint(anova(crs$glm, test=\"Chisq\"))\ncat(\"\\n\")\n\n\n\n#============================================================\n# Neural Network \n\n# Build a neural network model using the nnet package.\n\nlibrary(nnet, quietly=TRUE)\n\n# Build the NNet model.\n\nset.seed(199)\ncrs$nnet <- nnet(as.factor(Pneumoconiosis) ~ .,\n    data=crs$dataset[,c(crs$input, crs$target)],\n    size=10, skip=TRUE, MaxNWts=10000, trace=FALSE, maxit=100)\n\n# Print the results of the modelling.\n\ncat(sprintf(\"A %s network with %d weights.\\n\",\n    paste(crs$nnet$n, collapse=\"-\"),\n    length(crs$nnet$wts)))\ncat(sprintf(\"Inputs: %s.\\n\",\n    paste(crs$nnet$coefnames, collapse=\", \")))\ncat(sprintf(\"Output: %s.\\n\",\n    names(attr(crs$nnet$terms, \"dataClasses\"))[1]))\ncat(sprintf(\"Sum of Squares Residuals: %.4f.\\n\",\n    sum(residuals(crs$nnet) ^ 2)))\ncat(\"\\n\")\nprint(summary(crs$nnet))\ncat('\\n')\n\n\n\n#============================================================\n# Evaluate model performance on the training dataset. \n\n# Sensitivity\/Specificity Plot: requires the ROCR package\n\nlibrary(ROCR)\n\n# Generate Sensitivity\/Specificity Plot for rpart model on PLoS One Excel Main Raw Datafile.csv [**train**].\n\ncrs$pr <- predict(crs$rpart, newdata=crs$dataset[,c(crs$input, crs$target)])[,2]\n\n# Remove observations with missing target.\n\nno.miss   <- na.omit(crs$dataset[,c(crs$input, crs$target)]$Pneumoconiosis)\nmiss.list <- attr(no.miss, \"na.action\")\nattributes(no.miss) <- NULL\n\nif (length(miss.list))\n{\n  pred <- prediction(crs$pr[-miss.list], no.miss)\n} else\n{\n  pred <- prediction(crs$pr, no.miss)\n}\nROCR::plot(performance(pred, \"sens\", \"spec\"), col=\"#CC0000FF\", lty=1, add=FALSE)\n\n\n# Sensitivity\/Specificity Plot: requires the ROCR package\n\nlibrary(ROCR)\n\n# Generate Sensitivity\/Specificity Plot for xgb model on PLoS One Excel Main Raw Datafile.csv [**train**].\n\ncrs$pr <- predict(crs$ada, crs$dataset[,c(crs$input, crs$target)])\n\n# Remove observations with missing target.\n\nno.miss   <- na.omit(crs$dataset[,c(crs$input, crs$target)]$Pneumoconiosis)\nmiss.list <- attr(no.miss, \"na.action\")\nattributes(no.miss) <- NULL\n\nif (length(miss.list))\n{\n  pred <- prediction(crs$pr[-miss.list], no.miss)\n} else\n{\n  pred <- prediction(crs$pr, no.miss)\n}\nROCR::plot(performance(pred, \"sens\", \"spec\"), col=\"#CCCC00FF\", lty=2, add=TRUE)\n\n\n# Sensitivity\/Specificity Plot: requires the ROCR package\n\nlibrary(ROCR)\n\n# Generate Sensitivity\/Specificity Plot for rf model on PLoS One Excel Main Raw Datafile.csv [**train**].\n\ncrs$pr <- predict(crs$rf, newdata=na.omit(crs$dataset[,c(crs$input, crs$target)]),\n    type    = \"prob\")[,2]\n\n# Remove observations with missing target.\n\nno.miss   <- na.omit(na.omit(crs$dataset[,c(crs$input, crs$target)])$Pneumoconiosis)\nmiss.list <- attr(no.miss, \"na.action\")\nattributes(no.miss) <- NULL\n\nif (length(miss.list))\n{\n  pred <- prediction(crs$pr[-miss.list], no.miss)\n} else\n{\n  pred <- prediction(crs$pr, no.miss)\n}\nROCR::plot(performance(pred, \"sens\", \"spec\"), col=\"#00CC00FF\", lty=3, add=TRUE)\n\n\n# Sensitivity\/Specificity Plot: requires the ROCR package\n\nlibrary(ROCR)\n\n# Generate Sensitivity\/Specificity Plot for ksvm model on PLoS One Excel Main Raw Datafile.csv [**train**].\n\ncrs$pr <- kernlab::predict(crs$ksvm, newdata=na.omit(crs$dataset[,c(crs$input, crs$target)]),\n    type    = \"probabilities\")[,2]\n\n# Remove observations with missing target.\n\nno.miss   <- na.omit(na.omit(crs$dataset[,c(crs$input, crs$target)])$Pneumoconiosis)\nmiss.list <- attr(no.miss, \"na.action\")\nattributes(no.miss) <- NULL\n\nif (length(miss.list))\n{\n  pred <- prediction(crs$pr[-miss.list], no.miss)\n} else\n{\n  pred <- prediction(crs$pr, no.miss)\n}\nROCR::plot(performance(pred, \"sens\", \"spec\"), col=\"#00CCCCFF\", lty=4, add=TRUE)\n\n\n# Sensitivity\/Specificity Plot: requires the ROCR package\n\nlibrary(ROCR)\n\n# Generate Sensitivity\/Specificity Plot for glm model on PLoS One Excel Main Raw Datafile.csv [**train**].\n\ncrs$pr <- predict(crs$glm, \n   type    = \"response\",\n   newdata = crs$dataset[,c(crs$input, crs$target)])\n\n# Remove observations with missing target.\n\nno.miss   <- na.omit(crs$dataset[,c(crs$input, crs$target)]$Pneumoconiosis)\nmiss.list <- attr(no.miss, \"na.action\")\nattributes(no.miss) <- NULL\n\nif (length(miss.list))\n{\n  pred <- prediction(crs$pr[-miss.list], no.miss)\n} else\n{\n  pred <- prediction(crs$pr, no.miss)\n}\nROCR::plot(performance(pred, \"sens\", \"spec\"), col=\"#0000CCFF\", lty=5, add=TRUE)\n\n\n# Sensitivity\/Specificity Plot: requires the ROCR package\n\nlibrary(ROCR)\n\n# Generate Sensitivity\/Specificity Plot for nnet model on PLoS One Excel Main Raw Datafile.csv [**train**].\n\ncrs$pr <- predict(crs$nnet, newdata=crs$dataset[,c(crs$input, crs$target)])\n\n# Remove observations with missing target.\n\nno.miss   <- na.omit(crs$dataset[,c(crs$input, crs$target)]$Pneumoconiosis)\nmiss.list <- attr(no.miss, \"na.action\")\nattributes(no.miss) <- NULL\n\nif (length(miss.list))\n{\n  pred <- prediction(crs$pr[-miss.list], no.miss)\n} else\n{\n  pred <- prediction(crs$pr, no.miss)\n}\nROCR::plot(performance(pred, \"sens\", \"spec\"), col=\"#CC00CCFF\", lty=6, add=TRUE)\n\n\n# Add a legend to the plot.\n\nlegend(\"bottomleft\", c(\"rpart\",\"xgb\",\"rf\",\"ksvm\",\"glm\",\"nnet\"), col=rainbow(6, 1, .8), lty=1:6, title=\"Models\", inset=c(0.05, 0.05))\n\n# Add decorations to the plot.\n\ntitle(main=\"Sensitivity\/Specificity (tpr\/tnr)  PLoS One Excel Main Raw Datafile.csv [**train**]\",\n    sub=paste(\"Rattle\", format(Sys.time(), \"%Y-%b-%d %H:%M:%S\"), Sys.info()[\"user\"]))\ngrid()","command":"","os_name":"","os_version":""}}],"cases":null,"data":null,"section":null,"section_color":"#94EBFF"}],"materials":[],"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span style = \"font-weight:bold;\">Prediction of pneumoconiosis by serum and urinary biomarkers in workers exposed to asbestos-contaminated minerals<\/span><\/div><div class = \"text-block\">PLOS One<\/div><\/div>","changed_on":1554480364}