{"id":28640,"title":"Stranded Transcript Count Table Generation from Long Reads","title_html":"Stranded Transcript Count Table Generation from Long Reads","image":{"source":"https:\/\/www.protocols.io\/img\/default_protocol.png","placeholder":"https:\/\/www.protocols.io\/img\/default_protocol.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.778hrrw","doi_status":2,"uri":"stranded-transcript-count-table-generation-from-lo-778hrrw","type_id":1,"published_on":1571090283,"parent_protocols":[],"parent_collections":[],"version_id":8,"created_on":1571090198,"categories":null,"creator":{"name":"David A. Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","affiliations":[{"affiliation":"Malaghan Institute of Medical Research (NZ)","url":"http:\/\/www.malaghan.org.nz\/","is_default":1}],"username":"david-eccles","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg"},"badges":[{"id":3,"image":{"source":"\/img\/badges\/silver.svg","placeholder":"\/img\/badges\/silver.svg"},"name":"Power author!"},{"id":6,"image":{"source":"\/img\/badges\/socialbutterfly.svg","placeholder":"\/img\/badges\/socialbutterfly.svg"},"name":"Social butterfly"}],"research_interests":null,"blocked_by_you":false,"blocked_you":false},"journal":null,"journal_name":null,"journal_link":null,"article_citation":null,"public":1,"has_versions":1,"link":null,"total_collections":0,"number_of_steps":12,"authors":[{"name":"David Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","affiliations":[],"username":"david-eccles","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg"},"badges":[],"research_interests":null,"blocked_by_you":false,"blocked_you":false}],"versions":[],"groups":[],"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"can_be_copied":1,"can_remove_fork":0,"forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":0,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"guid":"D59D7FF763B5486BAA2CEA8374FEB480","steps":[{"id":825666,"guid":"258F8C73E8C34156B31E99A38416A931","previous_id":825669,"previous_guid":"31E0040B85714CE6A58F5C15EB073AB3","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"1F1A769E77CF4D2CA211380A12F5013C","order_id":1,"type_id":6,"title":"Section","source":{"title":"Index Preparation"}},{"id":1054724,"guid":"4BF5B5F9E10248F6802F147677B82BCD","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Prepare transcript index (see Guidelines for data sources)<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">lastdb Mus_musculus.GRCm38.cds.all.fa <(zcat Mus_musculus.GRCm38.cds.all.fa.gz)<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#94EBFF","critical":null,"critical_id":null,"duration":0},{"id":825667,"guid":"CFB6D62FD5FD45978D18668517C543EC","previous_id":825666,"previous_guid":"258F8C73E8C34156B31E99A38416A931","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"0EDB510F36B843E4A1CF813F22FD1D3E","order_id":1,"type_id":6,"title":"Section","source":{"title":"Transcriptome Mapping"}},{"id":1054724,"guid":"F99CC7EF847D481AB0A7DA0101F447E1","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Reads are mapped to the transcriptome with LAST.<\/div><div class = \"text-block\"><span>The results of that mapping can be piped through <\/span><span style = \"font-style:italic;\">last-map-probs<\/span><span> to exclude unlikely hits, then through '<\/span><span style = \"font-style:italic;\">maf-convert -n tab'<\/span><span> to convert to a one-line-per-mapping CSV format. This CSV format is further processed to make sure that there is only one mapping per transcript-read pair.<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">mkdir -p mapped<\/div><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo \"** ${bc} **\";<\/div><div class = \"text-block\">  lastal -Q 1 -P 10 Mus_musculus.GRCm38.cds.all.fa <(pv oriented\/${bc}_reads_dirAdjusted.fq.gz | zcat) | \\<\/div><div class = \"text-block\">    last-map-probs | maf-convert -n tab | cut -f 2,7,10 | sort | \\<\/div><div class = \"text-block\">    uniq > mapped\/trnMapping_LAST_${bc}_vs_Mmus_transcriptome.txt.gz;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#84CE84","critical":null,"critical_id":null,"duration":0},{"id":825668,"guid":"023A328BE5CE4C7EB9F222E16F38D95A","previous_id":825677,"previous_guid":"31DEDC4626C3466DA78B6ADD25E7474E","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"D5CAB3C1EADB4515AB2475B34D742CFE","order_id":1,"type_id":6,"title":"Section","source":{"title":"Annotation and Result generation"}},{"id":1054724,"guid":"2FF91E09AAC840138EFA65FF3606F8A9","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Transcript counts are merged with ensembl gene annotation, then converted into wide format (one line per transcript) using an R script.<\/div><div class = \"text-block\">The transcript annotation in this case is from ensembl BioMart (see Guidelines for more details).<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">#!\/usr\/bin\/env Rscript<\/div><div class = \"text-block\">library(dplyr);<\/div><div class = \"text-block\">library(tidyr);<\/div><div class = \"text-block\">## load ensemble transcript metadata (including gene name)<\/div><div class = \"text-block\">ensembl.df <- as.tbl(read.delim('ensembl_mm10_geneFeatureLocations.txt.gz',                          <\/div><div class = \"text-block\">  col.names=c('transcript','Description','Start','End',<\/div><div class = \"text-block\">              'Strand','Gene','Chr'),<\/div><div class = \"text-block\">  stringsAsFactors=FALSE));<\/div><div class = \"text-block\">ensembl.df$Description <- sub(' \\\\[.*$','',ensembl.df$Description);<\/div><div class = \"text-block\">ensembl.df$Description <- sub('^(.{50}).+$','\\\\1...',ensembl.df$Description);<\/div><div class = \"text-block\">ensembl.df[,1:7] <- ensembl.df[,c(1,7,5,3,4,2,6)];<\/div><div class = \"text-block\">colnames(ensembl.df)[1:7] <- colnames(ensembl.df)[c(1,7,5,3,4,2,6)];<\/div><div class = \"text-block\">options(scipen=15); ## don't show scientific notation for large positions<\/div><div class = \"text-block\">## load used barcode identifiers<\/div><div class = \"text-block\">bcNames <- read.table(\"barcode_counts.txt\", stringsAsFactors=FALSE)[,2];<\/div><div class = \"text-block\">## load count data into 'narrow' array (one line per count)<\/div><div class = \"text-block\">trn.counts <- tibble(); for(bc in bcNames){<\/div><div class = \"text-block\">  trn.counts <-<\/div><div class = \"text-block\">    bind_rows(trn.counts,<\/div><div class = \"text-block\">      as.tbl(read.table(<\/div><div class = \"text-block\">        sprintf('mapped\/trnCounts_LAST_%s_vs_Mmus_transcriptome.txt.gz', bc),<\/div><div class = \"text-block\">        col.names=c('count','barcode','transcript','dir'),<\/div><div class = \"text-block\">        stringsAsFactors=FALSE)));<\/div><div class = \"text-block\">}<\/div><div class = \"text-block\">## remove revision number from transcript names (if present)<\/div><div class = \"text-block\">trn.counts$transcript <- sub('\\\\.[0-9]+$','',trn.counts$transcript);<\/div><div class = \"text-block\">## convert to wide format (one line per transcript)<\/div><div class = \"text-block\">trn.counts.wide <- spread(trn.counts, barcode, count) %>%<\/div><div class = \"text-block\">  mutate(dir = c('+'='fwd', '-'='rev')[dir]);<\/div><div class = \"text-block\">for(bd in colnames(trn.counts.wide[,-1])){<\/div><div class = \"text-block\">  trn.counts.wide[[bd]] <- replace_na(trn.counts.wide[[bd]],0);<\/div><div class = \"text-block\">}<\/div><div class = \"text-block\">## merge ensembl metadata with transcript counts<\/div><div class = \"text-block\">gene.counts.wide <- inner_join(ensembl.df, trn.counts.wide, by='transcript');<\/div><div class = \"text-block\">gene.counts.wide <- gene.counts.wide[order(-rowSums(gene.counts.wide[,-(1:8)])),];<\/div><div class = \"text-block\">## write result out to a file<\/div><div class = \"text-block\">write.csv(gene.counts.wide, file='wide_transcript_counts_LAST.csv', <\/div><div class = \"text-block\">  row.names=FALSE);<\/div><\/div><\/code><\/pre><\/div><\/div>"}},{"id":1054725,"guid":"02C0C1202B2211E9A10E9FC59ECBFD74","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/bcvaa.r","placeholder":"https:\/\/www.protocols.io\/img\/extensions\/r.png","original_name":"count_analysis.r"}}],"cases":[],"data":null,"section":null,"section_color":"#FFED92","critical":null,"critical_id":null,"duration":0},{"id":825669,"guid":"31E0040B85714CE6A58F5C15EB073AB3","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"A20BEC156BEB438790ABE0A6DC43E341","order_id":1,"type_id":6,"title":"Section","source":{"title":"Demultiplex Reads    "}},{"id":1054724,"guid":"7F7A570C24B74B1F8CBCB568237BC2BE","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Demultiplex and orient reads as per the protocol <\/div><div class = \"text-block\"><a href=\"https:\/\/dx.doi.org\/10.17504\/protocols.io.57hg9j6\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Preparing Reads for Stranded Mapping<\/span><\/a><\/div><div class = \"text-block\"><span>. It is expected that these demultiplexed reads will be split up in the current directory, and coupled with a '<\/span><span style = \"font-style:italic;\">barcode_counts.txt<\/span><span>' file. If that's the case, the following should work:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do ls oriented\/${bc}_reads_dirAdjusted.fq.gz;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Example expected output:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">oriented\/BC03_reads_dirAdjusted.fastq.gz<\/div><div class = \"text-block\">oriented\/BC04_reads_dirAdjusted.fastq.gz<\/div><div class = \"text-block\">oriented\/BC05_reads_dirAdjusted.fastq.gz<\/div><div class = \"text-block\">oriented\/BC06_reads_dirAdjusted.fastq.gz<\/div><div class = \"text-block\">oriented\/BC07_reads_dirAdjusted.fastq.gz<\/div><div class = \"text-block\">oriented\/BC08_reads_dirAdjusted.fastq.gz<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span>If the '<\/span><span style = \"font-style:italic;\">barcode_counts.txt<\/span><span>' file is not present, this error will appear:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">awk: fatal: cannot open file `barcode_counts.txt' for reading (No such file or directory)<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">If one or more of the oriented read files is missing, it will look something like this:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">oriented\/BC03_reads_dirAdjusted.fastq.gz<\/div><div class = \"text-block\">oriented\/BC04_reads_dirAdjusted.fastq.gz<\/div><div class = \"text-block\">ls: cannot access 'oriented\/BC05_reads_dirAdjusted.fastq.gz':<\/div><div class = \"text-block\">  No such file or directory<\/div><div class = \"text-block\">ls: cannot access 'oriented\/BC06_reads_dirAdjusted.fastq.gz':<\/div><div class = \"text-block\">  No such file or directory<\/div><div class = \"text-block\">oriented\/BC07_reads_dirAdjusted.fastq.gz<\/div><div class = \"text-block\">oriented\/BC08_reads_dirAdjusted.fastq.gz<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#A492FF","critical":null,"critical_id":null,"duration":0},{"id":825670,"guid":"AD06EE4B291C4A33AB7476B18D1108FF","previous_id":825671,"previous_guid":"BBDF150F6AE543D7902F147E4134F221","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"9576786CB148431E867C6BB1A7BC3D6A","order_id":1,"type_id":6,"title":"Section","source":{"title":"Orienting Reads"}},{"id":1054724,"guid":"4BC8230A26364B9C833B7DB1115678EA","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Map the reads to the adapter sequences. In this case it's important that the direction of mapping is also recorded, so the <\/span><span style = \"font-style:italic;\">cut<\/span><span> command selects three fields (query name [7], target name [2], mapping direction [10]):<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo \"** ${bc} **\";<\/div><div class = \"text-block\">  lastal -Q 1 -P10 adapter_seqs.fa <(pv reads_${bc}.fastq.gz) | \\<\/div><div class = \"text-block\">    maf-convert -n tab | cut -f 2,7,10 | uniq | \\<\/div><div class = \"text-block\">    gzip > adapter_assignments_${bc}.txt.gz<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#94EBFF","critical":null,"critical_id":null,"duration":0},{"id":825671,"guid":"BBDF150F6AE543D7902F147E4134F221","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"4618C150E9904DD7BDBBB02A49F8CE36","order_id":1,"type_id":6,"title":"Section","source":{"title":"Adapter Mapping"}},{"id":1054724,"guid":"311A57240C1146C5928CE98915C588CF","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Prepare the LAST index for the adapter file. This will generate seven additional files of the form <index name>.XXX:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">lastdb adapter_seqs.fa adapter_seqs.fa<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":null,"critical":null,"critical_id":null,"duration":0},{"id":825672,"guid":"817AEE335EE7445B8AF332AD5AD1051F","previous_id":825670,"previous_guid":"AD06EE4B291C4A33AB7476B18D1108FF","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"F91370A88CAB4633BE258A6FC9846D43","order_id":1,"type_id":6,"title":"Section","source":{"title":"Orienting Reads"}},{"id":1054724,"guid":"38D0B7275D804356B06ECBFA8A7CF86D","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Reads are filtered into two groups (and one group-by-omission) based on the mapped direction of the strand-switch primer, then reverse-complemented (if necessary) to match the orientation of the original RNA strand. I use my <\/div><div class = \"text-block\"><a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-fetch.pl\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">fastx-fetch.pl<\/span><\/a><\/div><div class = \"text-block\"> and <\/div><div class = \"text-block\"><a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-rc.pl\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">fastx-rc.pl<\/span><\/a><\/div><div class = \"text-block\"> scripts for this.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">mkdir -p oriented<\/div><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo \"** ${bc} **\";<\/div><div class = \"text-block\">  fastx-fetch.pl -i <(zgrep 'SSP' adapter_assignments_${bc}.txt.gz | awk '{if($3 == \"+\"){print $2}}') <(pv reads_${bc}.fastq.gz) | \\<\/div><div class = \"text-block\">    gzip > oriented\/${bc}_reads_fwd.fastq.gz<\/div><div class = \"text-block\">  fastx-fetch.pl -i <(zgrep 'SSP' adapter_assignments_${bc}.txt.gz | awk '{if($3 == \"-\"){print $2}}') <(pv reads_${bc}.fastq.gz) | \\<\/div><div class = \"text-block\">    fastx-rc.pl | gzip > oriented\/${bc}_reads_rev.fastq.gz<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><\/div>"}},{"id":1054725,"guid":"7AB8B1A03BB311E99B905DCA0E5F54D4","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/bdwsa.pl","placeholder":"\/img\/extensions\/file.png","original_name":"fastx-fetch.pl"}},{"id":1054726,"guid":"83CD85E03BB311E99B905DCA0E5F54D4","order_id":3,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/bdwta.pl","placeholder":"\/img\/extensions\/file.png","original_name":"fastx-rc.pl"}}],"cases":[],"data":null,"section":null,"section_color":null,"critical":null,"critical_id":null,"duration":0},{"id":825673,"guid":"F7BEF6A68FD54207824FA37C0D2ABFD6","previous_id":825672,"previous_guid":"817AEE335EE7445B8AF332AD5AD1051F","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"0B94ADCA44B54310973C43768338A4EC","order_id":1,"type_id":6,"title":"Section","source":{"title":"Orienting Reads"}},{"id":1054724,"guid":"EFA6F482ED9A445C936F6DBDE4BBF602","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Forward and reverse-oriented sequences are combined together to form a single group of RNA-oriented reads.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo \"** ${bc} **\";<\/div><div class = \"text-block\">  pv oriented\/${bc}_reads_fwd.fastq.gz oriented\/${bc}_reads_rev.fastq.gz | \\<\/div><div class = \"text-block\">    zcat | gzip > oriented\/${bc}_reads_dirAdjusted.fastq.gz<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":null,"critical":null,"critical_id":null,"duration":0},{"id":825674,"guid":"EF79453EE1B7446F83CCE7EC586B6A1F","previous_id":825673,"previous_guid":"F7BEF6A68FD54207824FA37C0D2ABFD6","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"BB83DABCBCDF429D80597D3D9E101F4F","order_id":1,"type_id":6,"title":"Section","source":{"title":"Transcriptome mapping"}},{"id":1054724,"guid":"6038029FE8B649E6BE17544DF24F0FE6","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Reads are mapped to the transcriptome with LAST.<\/div><div class = \"text-block\"><span>The results of that mapping are piped through <\/span><span style = \"font-style:italic;\">last-map-probs<\/span><span> to exclude unlikely hits, then through maf-convert to convert to a one-line-per-mapping tab-separated format using the same fields as with the adapter mapping (query name [7], target name [2], mapping direction [10]). <\/span><\/div><div class = \"text-block\">This format is further processed to make sure that there is only one mapping per transcript-read pair, and then aggregated to sum up counts per transcript.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">mkdir -p mapped<\/div><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo \"** ${bc} **\";<\/div><div class = \"text-block\">  lastal -Q 1 -P 10 Mus_musculus.GRCm38.cds.all.fa <(pv oriented\/${bc}_reads_dirAdjusted.fastq.gz | zcat) | \\<\/div><div class = \"text-block\">    last-map-probs | maf-convert -n tab | cut -f 2,7,10 | \\<\/div><div class = \"text-block\">    sort | uniq | awk -F'\\t' -v \"bc=${bc}\" '{print bc,$1,$3}' | \\<\/div><div class = \"text-block\">    sort | uniq -c | \\<\/div><div class = \"text-block\">      gzip > mapped\/trnCounts_LAST_${bc}_vs_Mmus_transcriptome.txt.gz;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#84CE84","critical":null,"critical_id":null,"duration":0},{"id":825675,"guid":"D7AFE63C4DB14FFEAAC62891DC9532A4","previous_id":825674,"previous_guid":"EF79453EE1B7446F83CCE7EC586B6A1F","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"E040AB0F8C1344829857B8CF47296FF4","order_id":1,"type_id":6,"title":"Section","source":{"title":"Annotation and Result Generation"}},{"id":1054724,"guid":"8FB37D0AA49D4203B0F2C98A77F2D5D0","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Transcript counts are merged with ensembl gene annotation, then converted into wide format (one line per transcript) using an R script.<\/div><div class = \"text-block\">The transcript annotation in this case is from ensembl BioMart (see Guidelines for more details).<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">#!\/usr\/bin\/env Rscript<\/div><div class = \"text-block\">library(dplyr);<\/div><div class = \"text-block\">library(tidyr);<\/div><div class = \"text-block\">## load used barcode identifiers<\/div><div class = \"text-block\">bcNames <- read.table(\"barcode_counts.txt\", stringsAsFactors=FALSE)[,2];<\/div><div class = \"text-block\">## load count data into \"narrow\" array (one line per count)<\/div><div class = \"text-block\">trn.counts <- tibble();<\/div><div class = \"text-block\">for(bc in bcNames){<\/div><div class = \"text-block\">    trn.counts <-<\/div><div class = \"text-block\">        bind_rows(trn.counts,<\/div><div class = \"text-block\">                  as.tbl(read.table(<\/div><div class = \"text-block\">                      sprintf(\"mapped\/trnCounts_LAST_%s_vs_Mmus_transcriptome.txt.gz\", bc),<\/div><div class = \"text-block\">                      col.names=c(\"count\",\"barcode\",\"transcript\",\"dir\"),<\/div><div class = \"text-block\">                      stringsAsFactors=FALSE)));<\/div><div class = \"text-block\">}<\/div><div class = \"text-block\">## remove revision number from transcript names (if present)<\/div><div class = \"text-block\">trn.counts$transcript <- sub(\"\\\\.[0-9]+$\",\"\",trn.counts$transcript);<\/div><div class = \"text-block\">## convert to wide format (one line per transcript)<\/div><div class = \"text-block\">trn.counts.wide <- spread(trn.counts, barcode, count) %>%<\/div><div class = \"text-block\">    mutate(dir = c(\"+\"=\"fwd\", \"-\"=\"rev\")[dir]);<\/div><div class = \"text-block\">for(bd in colnames(trn.counts.wide[,-1])){<\/div><div class = \"text-block\">    trn.counts.wide[[bd]] <- replace_na(trn.counts.wide[[bd]],0);<\/div><div class = \"text-block\">}<\/div><div class = \"text-block\">## load ensemble transcript metadata (including gene name)<\/div><div class = \"text-block\">ensembl.df <- as.tbl(read.delim(\"ensembl_mm10_geneFeatureLocations.txt.gz\",<\/div><div class = \"text-block\">                         col.names=c(\"transcript\",\"Description\",\"Start\",\"End\",<\/div><div class = \"text-block\">                                     \"Strand\",\"Gene\",\"Chr\"),<\/div><div class = \"text-block\">                         stringsAsFactors=FALSE));<\/div><div class = \"text-block\">ensembl.df$Description <- sub(\" \\\\[.*$\",\"\",ensembl.df$Description);<\/div><div class = \"text-block\">ensembl.df$Description <- sub(\"^(.{50}).+$\",\"\\\\1...\",ensembl.df$Description);<\/div><div class = \"text-block\">ensembl.df[,1:7] <- ensembl.df[,c(1,7,5,3,4,2,6)];<\/div><div class = \"text-block\">colnames(ensembl.df)[1:7] <- colnames(ensembl.df)[c(1,7,5,3,4,2,6)];<\/div><div class = \"text-block\">options(scipen=15); ## don't show scientific notation for large positions<\/div><div class = \"text-block\">## merge ensembl metadata with transcript counts<\/div><div class = \"text-block\">gene.counts.wide <- inner_join(ensembl.df, trn.counts.wide, by=\"transcript\");<\/div><div class = \"text-block\">gene.counts.wide <- gene.counts.wide[order(-rowSums(gene.counts.wide[,-(1:8)])),];<\/div><div class = \"text-block\">bcNames <- colnames(gene.counts.wide[,-(1:8)]);<\/div><div class = \"text-block\">## ignore columns with extremely low read counts<\/div><div class = \"text-block\">bcNames <- bcNames[colSums(gene.counts.wide[,bcNames]) > 10];<\/div><div class = \"text-block\">## write result out to a file<\/div><div class = \"text-block\">write.csv(gene.counts.wide, file=\"wide_transcript_counts_LAST.csv\",<\/div><div class = \"text-block\">          row.names=FALSE);<\/div><\/div><\/code><\/pre><\/div><\/div>"}},{"id":1054725,"guid":"382DBA903BD311E99B905DCA0E5F54D4","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/bdw9a.r","placeholder":"https:\/\/www.protocols.io\/img\/extensions\/r.png","original_name":"count_analysis.r"}}],"cases":[],"data":null,"section":null,"section_color":"#FFED92","critical":null,"critical_id":null,"duration":0},{"id":825676,"guid":"1CFEBD5D868A455499BDD5A796F670CF","previous_id":825668,"previous_guid":"023A328BE5CE4C7EB9F222E16F38D95A","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"A5D55609676F4A5987EB9FD7EFF4263B","order_id":1,"type_id":6,"title":"Section","source":{"title":"Downstream Workflows"}},{"id":1054724,"guid":"72487A2928FB4544A17D849DAA1B204A","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">A downstream workflow is still <\/div><div class = \"text-block\"><a href=\"https:\/\/support.bioconductor.org\/p\/120764\/\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">in development<\/span><\/a><\/div><div class = \"text-block\">. I have had reasonable succes doing transcript-level differential expression analysis using <\/div><div class = \"text-block\"><a href=\"https:\/\/bioconductor.org\/packages\/release\/bioc\/html\/DESeq2.html\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">DESeq2<\/span><\/a><\/div><div class = \"text-block\">.<\/div><div class = \"text-block\"><span>I would like to emphasise that batch effects should be considered for nanopore sequencing, given how frequently the technology changes. Make sure that at least the sequencing <\/span><span style = \"font-style:italic;\">library<\/span><span> (i.e. samples prepared in tandem on the same day from the same kit) is added into the statistical model, and try to make sure that sequencing libraries are fairly heterogeneous - replicates from a sample with skewed transcript distributions could influence the outcome of statistical tests.<\/span><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#EA9F6C","critical":null,"critical_id":null,"duration":0},{"id":825677,"guid":"31DEDC4626C3466DA78B6ADD25E7474E","previous_id":825667,"previous_guid":"CFB6D62FD5FD45978D18668517C543EC","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"8C95E6B3A5914B8386E35D4B63B30410","order_id":1,"type_id":6,"title":"Section","source":{"title":"Transcriptome Mapping"}},{"id":1054724,"guid":"366AB83E18704F62AA590C51CFF49BD0","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">The result is then aggregated to sum up counts per transcript:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo \"** ${bc} **\";<\/div><div class = \"text-block\">  zcat mapped\/trnMapping_LAST_${bc}_vs_Mmus_transcriptome.txt.gz | \\<\/div><div class = \"text-block\">    awk -F'\\t' -v \"bc=${bc}\" '{print bc,$1,$3}' | sort | uniq -c | \\<\/div><div class = \"text-block\">    gzip > mapped\/trnCounts_LAST_${bc}_vs_Mmus_transcriptome.txt.gz;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Note: I've split this up into two steps (compared to previous versions of this protocol) so that an intermediate count of the total number of mapped transcripts per barcode can be done:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo -n \"${bc} \";<\/div><div class = \"text-block\">  zcat mapped\/trnMapping_LAST_${bc}_vs_Mmus_transcriptome.txt.gz | \\<\/div><div class = \"text-block\">    awk '{print $2}' | sort | uniq | wc -l;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#84CE84","critical":null,"critical_id":null,"duration":0}],"document":null,"materials":[],"description":"<div class = \"text-blocks\"><div class = \"text-block\">This protocol is for comparing different samples at the transcript level, using long reads that are mapped to transcripts.<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Input(s)<\/span><span>: demultiplexed and oriented fastq files (see protocol <\/span><a href=\"https:\/\/dx.doi.org\/10.17504\/protocols.io.57hg9j6\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Preparing Reads for Stranded Mapping<\/span><\/a><span>), transcript reference fasta file, annotation file<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Output(s):<\/span><span> transcript table, sorted by differential coverage, annotated with gene name \/ description \/ location<\/span><\/div><\/div>","changed_on":1571090283}