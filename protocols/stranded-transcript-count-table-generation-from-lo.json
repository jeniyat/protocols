{"uri":"stranded-transcript-count-table-generation-from-lo-smuec6w","version_id":"0","protocol_name":"Stranded Transcript Count Table Generation from Long Reads","protocol_name_html":"Stranded Transcript Count Table Generation from Long Reads","is_prepublished":"0","can_edit":"0","parent_id":null,"api_version":"1","is_new_mode":"0","last_modified":"1534398997","type_id":"1","link":null,"fork_id":"13498","public_fork_note":"Adapted to be more generic for arbitrary numbers of barcodes, simpler forward\/reverse mapping","number_of_steps":"16","has_versions":"0","first_published_date":"1534398997","publish_date":"2018-08-16 05:56:37","documents":null,"have_protocol_in_step":"0","is_protocol_in_step":"0","vendor_name":"Contributed by users","vendor_link":"https:\/\/www.protocols.io","vendor_logo":"\/img\/vendors\/1.png","mod_mins":"5","mod_secs":"3","description":"<p>This protocol is for comparing two different samples at the transcript level, using long reads that are mapped to transcripts.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input(s)<\/strong>: stranded fastq files (see steps 1-8 of <a href=\"https:\/\/dx.doi.org\/10.17504\/protocols.io.n8ddhs6\" target=\"_blank\" rel=\"noopener noreferrer\">Stranded Mapping from Long Reads<\/a>), transcript reference fasta file, annotation file<\/p>\n<p>\u00a0<\/p>\n<p><strong>Output(s):<\/strong> transcript table, sorted by differential coverage, annotated with gene name \/ description \/ location<\/p>","is_bookmarked":"0","can_reassign":"1","before_start":"<p>Obtain a transcript fasta file, and an annotation file. For the mouse genome, I use the following files:<\/p>\n<p>\u00a0<\/p>\n<ol>\n<li>Transcript [CDS] sequences from <a href=\"http:\/\/asia.ensembl.org\/Mus_musculus\/Info\/Index\" target=\"_blank\" rel=\"noopener noreferrer\">Ensembl<\/a>; <a href=\"ftp:\/\/ftp.ensembl.org\/pub\/release-92\/fasta\/mus_musculus\/cds\/Mus_musculus.GRCm38.cds.all.fa.gz\" target=\"_blank\" rel=\"noopener noreferrer\">this file<\/a> is the most current at the time this protocol was created.<\/li>\n<li>Annotation file obtained from <a href=\"http:\/\/asia.ensembl.org\/biomart\/martview\" target=\"_blank\" rel=\"noopener noreferrer\">Ensembl BioMart<\/a> (Ensembl Genes -&gt; Mouse Genes) as a compressed TSV file with the following attribute columns:\n<ul>\n<li>\n<div>Transcript stable ID<\/div>\n<\/li>\n<li>\n<div>Gene description<\/div>\n<\/li>\n<li>\n<div>Gene start (bp)<\/div>\n<\/li>\n<li>\n<div>Gene end (bp)<\/div>\n<\/li>\n<li>\n<div>Strand<\/div>\n<\/li>\n<li>\n<div>Gene name<\/div>\n<\/li>\n<li>\n<div>Chromosome\/scaffold name<\/div>\n<\/li>\n<\/ul>\n<\/li>\n<\/ol>","has_guidelines":"0","materials":[],"warning":null,"version_class":"14740","public":"1","is_owner":"1","is_original_owner":"1","created_on":"1534293387","protocol_affiliation":"Malaghan Institute of Medical Research (NZ)","affiliation":"Malaghan Institute of Medical Research (NZ)","doi":"dx.doi.org\/10.17504\/protocols.io.smuec6w","doi_status":"2","changed_fork_steps":null,"profile_url":"DavidEccles-y2138443y2","protocol_img":"https:\/\/www.protocols.io\/img\/default_protocol.png","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","full_name":"David Eccles","created_by":"David Eccles","private_link":"7A14816C823250DF632609CF67FE6E99","original_img":"1","username":"david-eccles","is_retracted":"0","retraction_reason":null,"plos_id":null,"manuscript_citation":null,"journal_name":null,"is_donations_disabled":"0","is_donations_disabled_by_user":"9","item_record_id":340305,"fork_info":[{"protocol_id":"13498","protocol_name":"Transcript Coverage Analysis from Long Reads","protocol_name_html":"Transcript Coverage Analysis from Long Reads","uri":"transcript-coverage-analysis-from-long-reads-re2d3ge","first_name":"David","last_name":"Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","affiliation_url":"http:\/\/www.malaghan.org.nz\/","username":"david-eccles","is_public":"1"}],"compare_forks":[],"protocols":[],"groups":[{"group_id":"269","group_uri":"awesome-DNA-from-all-kingdoms-of-life","group_name":"MinION user group for high molecular weight DNA extraction from all kingdoms","group_logo":"https:\/\/s3.amazonaws.com\/pr-journal\/ftfb5nw.jpg","requested_uid":null,"request_flag":null,"my_request":"0"}],"number_of_shared_runs":[],"ownership_history":[],"keywords":"","transfer_to_user":[],"sub_transfer":false,"is_transfer_pending":false,"number_of_bookmarks":"1","collections":[],"tags":[{"tag_id":"454","tag_name":"bioinformatics"},{"tag_id":"643","tag_name":"long read sequencing"},{"tag_id":"893","tag_name":"cDNA"},{"tag_id":"2065","tag_name":"nanopore"},{"tag_id":"2213","tag_name":"differential expression"}],"archived":0,"sub_authors":[],"sub_protocols_number":0,"can_edit_shared":0,"shared_runs":[],"is_shared_run":0,"is_shared":1,"is_original_available":1,"banner":null,"contact_badges":[{"badge_id":"2","badge_image":"\/img\/badges\/bronze.svg","badge_description":"Author!"},{"badge_id":"6","badge_image":"\/img\/badges\/socialbutterfly.svg","badge_description":"Social butterfly"}],"number_of_comments":0,"is_locked":0,"is_locked_by":false,"authors":"David Eccles","authors_list":[{"name":"David Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","username":"david-eccles","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg"}],"user":{"profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","username":"david-eccles","full_name":"David Eccles","created_by":"David Eccles"},"access":{"can_view":"1","can_remove":"0","can_add":"0","can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":"0","can_move":"1","can_transfer":"1","can_download":"1","is_locked":"0"},"is_contact_suspended":0,"guidelines":null,"status_id":"2","is_research":"1","status_info":"We are still developing and optimizing this protocol","steps":[{"id":"654989","is_changed":1,"original_id":"641740","is_skipped":"0","is_checked":"0","guid":"D19D172A343F490981CB8586A93C1992","previous_guid":null,"previous_id":null,"last_modified":"1534395243","components":[{"component_id":"1175797","previous_id":0,"original_id":"1141828","guid":"C54709FB872C4E01A771D71FCEF44C12","previous_guid":null,"component_type_id":"6","data_id":null,"data":"Index Preparation","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Index Preparation"},"is_project":0},{"component_id":"1175798","previous_id":"1175797","original_id":"1141829","guid":"3E9ED91CCBA74D029E9B9A7B5C06FC55","previous_guid":"C54709FB872C4E01A771D71FCEF44C12","component_type_id":"1","data_id":null,"data":"<p>Prepare transcript index (see Guidelines for data sources)<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Prepare transcript index (see Guidelines for data sources)<\/p>"},"is_project":0},{"component_id":"1175799","previous_id":"1175798","original_id":"1141830","guid":"87636BADCF764755BAF6988F48CEA831","previous_guid":"3E9ED91CCBA74D029E9B9A7B5C06FC55","component_type_id":"8","data_id":"326","data":"","order_id":"2","name":"Software package","data_by_id":"1","type_id":"8","source_data":{"id":"326","name":"LAST","developer":"Martin Frith","repository":"http:\/\/last.cbrc.jp\/last\/","link":"http:\/\/last.cbrc.jp\/","os_name":"Debian GNU\/Linux","os_version":"","version":"","can_edit":"1"},"is_project":0},{"component_id":"1175800","previous_id":"1175799","original_id":"1141831","guid":"E304F196733A4881B8199D50DA623452","previous_guid":"87636BADCF764755BAF6988F48CEA831","component_type_id":"15","data_id":"4653","data":"","order_id":"3","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"lastdb Mus_musculus.GRCm38.cds.all.fa <(zcat Mus_musculus.GRCm38.cds.all.fa.gz)","description":"Create the transcriptome index from the transcriptome fasta file using lastdb. An anonymous pipe is used \"<()\" to avoid the need to decompress the file for index generation.","os_name":"","os_version":"","can_edit":"1"},"is_project":0}],"available_protocols":["13498"]},{"id":"654990","is_changed":1,"original_id":"641741","is_skipped":"0","is_checked":"0","guid":"F6D28FA15C0241719566A507F2DBC2D8","previous_guid":"CAA1B2A880FD42E39ADCC58505022802","previous_id":"655010","last_modified":"1534307818","components":[{"component_id":"1175801","previous_id":0,"original_id":"1141832","guid":"ED7BEA1A452A41B3B7BA7930123DF025","previous_guid":null,"component_type_id":"6","data_id":null,"data":"Transcriptome Mapping","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Transcriptome Mapping"},"is_project":0},{"component_id":"1175802","previous_id":"1175801","original_id":"1141833","guid":"C7AD89C8E4DA44E2A522B87AFBE4A3D9","previous_guid":"ED7BEA1A452A41B3B7BA7930123DF025","component_type_id":"1","data_id":null,"data":"<p>Reads are mapped to the transcriptome with LAST.<\/p>\n<p>\u00a0<\/p>\n<p>The results of that mapping can be piped through <em>last-map-probs<\/em> to exclude unlikely hits, then through <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/maf_bcsplit.pl\" target=\"_blank\" rel=\"noopener noreferrer\">maf_bcsplit.pl<\/a> to convert to a one-line-per-mapping CSV format. This CSV format is further processed to make sure that there is only one mapping per transcript-read pair, and then aggregated to sum up counts per transcript.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Reads are mapped to the transcriptome with LAST.<\/p>\n<p>\u00a0<\/p>\n<p>The results of that mapping can be piped through <em>last-map-probs<\/em> to exclude unlikely hits, then through <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/maf_bcsplit.pl\" target=\"_blank\" rel=\"noopener noreferrer\">maf_bcsplit.pl<\/a> to convert to a one-line-per-mapping CSV format. This CSV format is further processed to make sure that there is only one mapping per transcript-read pair, and then aggregated to sum up counts per transcript.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"1175803","previous_id":"1175802","original_id":"1141834","guid":"1D49F437F38741A18A5C571F98D49126","previous_guid":"C7AD89C8E4DA44E2A522B87AFBE4A3D9","component_type_id":"15","data_id":"4654","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"mkdir -p mapped\ncat used_barcodes.txt | while read bc\n  do echo \"** ${bc} **\";\n  lastal -P 10 Mus_musculus.GRCm38.cds.all.fa <(pv demultiplexed\/${bc}\/${bc}_reads_dirAdjusted.fasta.gz | zcat) | \\\n    last-map-probs | ~\/scripts\/maf_bcsplit.pl | tail -n +2 | \\\n    awk -F',' '{print $1,$2,$3}' | sort | uniq | \\\n    awk -v \"bc=${bc}\" '{print bc,$2,$3}' | sort | uniq -c | gzip > mapped\/trnCounts_LAST_${bc}_vs_Mmus_transcriptome.txt.gz;\ndone","description":"LAST mapping; probable hit filtering, read counting, and conversion to count file","os_name":"","os_version":"","can_edit":"1"},"is_project":0}],"available_protocols":["13498"]},{"id":"654991","is_changed":1,"original_id":"641742","is_skipped":"0","is_checked":"0","guid":"3B50331551B74D748F3C20F7F7F983DE","previous_guid":"F6D28FA15C0241719566A507F2DBC2D8","previous_id":"654990","last_modified":"1534398843","components":[{"component_id":"1175804","previous_id":0,"original_id":"1141835","guid":"E3C63ADE36964918A7E58BB98B59C44C","previous_guid":null,"component_type_id":"1","data_id":null,"data":"<p>Transcript counts are merged with ensembl gene annotation, then converted into wide format (one line per transcript) using an R script.<\/p>\n<p>\u00a0<\/p>\n<p>The transcript annotation in this case is from ensembl BioMart (see Guidelines for more details).<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-java\"><code>#!\/usr\/bin\/Rscript\n\nlibrary(dplyr);\nlibrary(tidyr);\n\n## load ensemble transcript metadata (including gene name)\nensembl.df &lt;- as.tbl(read.delim('ensembl_mm10_geneFeatureLocations.txt.gz',\n                         col.names=c('transcript','Description','Start','End',\n                                     'Strand','Gene','Chr'),\n                         stringsAsFactors=FALSE));\nensembl.df$Description &lt;- sub(' \\\\[.*$','',ensembl.df$Description);\nensembl.df$Description &lt;- sub('^(.{50}).+$','\\\\1...',ensembl.df$Description);\nensembl.df[,1:7] &lt;- ensembl.df[,c(1,7,5,3,4,2,6)];\ncolnames(ensembl.df)[1:7] &lt;- colnames(ensembl.df)[c(1,7,5,3,4,2,6)];\noptions(scipen=15); ## don't show scientific notation for large positions\n\n## load used barcode identifiers\nbcNames &lt;- readLines('used_barcodes.txt');\n\n## load count data into 'narrow' array (one line per count)\ntrn.counts &lt;- tibble();\nfor(bc in bcNames){\n    trn.counts &lt;-\n        bind_rows(trn.counts,\n                  as.tbl(read.table(\n                      sprintf('mapped\/trnCounts_LAST_%s_vs_Mmus_transcriptome.txt.gz', bc),\n                      col.names=c('count','barcode','transcript','dir'),\n                      stringsAsFactors=FALSE)));\n}\n\n## remove revision number from transcript names (if present)\ntrn.counts$transcript &lt;- sub('\\\\.[0-9]+$','',trn.counts$transcript);\n\n## convert to wide format (one line per transcript)\ntrn.counts.wide &lt;- spread(trn.counts, barcode, count) %&gt;%\n    mutate(dir = c('+'='fwd', '-'='rev')[dir]);\nfor(bd in colnames(trn.counts.wide[,-1])){\n    trn.counts.wide[[bd]] &lt;- replace_na(trn.counts.wide[[bd]],0);\n}\n\n## merge ensembl metadata with transcript counts\ngene.counts.wide &lt;- inner_join(ensembl.df, trn.counts.wide, by='transcript');\ngene.counts.wide &lt;- gene.counts.wide[order(-rowSums(gene.counts.wide[,-(1:8)])),];\n\n## write result out to a file\nwrite.csv(gene.counts.wide, file='wide_transcript_counts_LAST.csv', row.names=FALSE);<\/code><\/pre>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Transcript counts are merged with ensembl gene annotation, then converted into wide format (one line per transcript) using an R script.<\/p>\n<p>\u00a0<\/p>\n<p>The transcript annotation in this case is from ensembl BioMart (see Guidelines for more details).<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-java\"><code>#!\/usr\/bin\/Rscript\n\nlibrary(dplyr);\nlibrary(tidyr);\n\n## load ensemble transcript metadata (including gene name)\nensembl.df &lt;- as.tbl(read.delim('ensembl_mm10_geneFeatureLocations.txt.gz',\n                         col.names=c('transcript','Description','Start','End',\n                                     'Strand','Gene','Chr'),\n                         stringsAsFactors=FALSE));\nensembl.df$Description &lt;- sub(' \\\\[.*$','',ensembl.df$Description);\nensembl.df$Description &lt;- sub('^(.{50}).+$','\\\\1...',ensembl.df$Description);\nensembl.df[,1:7] &lt;- ensembl.df[,c(1,7,5,3,4,2,6)];\ncolnames(ensembl.df)[1:7] &lt;- colnames(ensembl.df)[c(1,7,5,3,4,2,6)];\noptions(scipen=15); ## don't show scientific notation for large positions\n\n## load used barcode identifiers\nbcNames &lt;- readLines('used_barcodes.txt');\n\n## load count data into 'narrow' array (one line per count)\ntrn.counts &lt;- tibble();\nfor(bc in bcNames){\n    trn.counts &lt;-\n        bind_rows(trn.counts,\n                  as.tbl(read.table(\n                      sprintf('mapped\/trnCounts_LAST_%s_vs_Mmus_transcriptome.txt.gz', bc),\n                      col.names=c('count','barcode','transcript','dir'),\n                      stringsAsFactors=FALSE)));\n}\n\n## remove revision number from transcript names (if present)\ntrn.counts$transcript &lt;- sub('\\\\.[0-9]+$','',trn.counts$transcript);\n\n## convert to wide format (one line per transcript)\ntrn.counts.wide &lt;- spread(trn.counts, barcode, count) %&gt;%\n    mutate(dir = c('+'='fwd', '-'='rev')[dir]);\nfor(bd in colnames(trn.counts.wide[,-1])){\n    trn.counts.wide[[bd]] &lt;- replace_na(trn.counts.wide[[bd]],0);\n}\n\n## merge ensembl metadata with transcript counts\ngene.counts.wide &lt;- inner_join(ensembl.df, trn.counts.wide, by='transcript');\ngene.counts.wide &lt;- gene.counts.wide[order(-rowSums(gene.counts.wide[,-(1:8)])),];\n\n## write result out to a file\nwrite.csv(gene.counts.wide, file='wide_transcript_counts_LAST.csv', row.names=FALSE);<\/code><\/pre>"},"is_project":0},{"component_id":"1175805","previous_id":"1175804","original_id":"1141836","guid":"16ACCB5372E64A8E848140D2D344CE01","previous_guid":"E3C63ADE36964918A7E58BB98B59C44C","component_type_id":"6","data_id":null,"data":"Annotation and Result generation","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Annotation and Result generation"},"is_project":0}],"available_protocols":["13498"]},{"id":"654998","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"0B501C09F7ED48C8B6366AAE5B4A0EFF","previous_guid":"9F69821C0AAD4614BD3412DB145A66D9","previous_id":"655001","last_modified":"1534295821","components":[{"component_id":"1175819","previous_id":0,"original_id":"0","guid":"EB196F59DE724469B72CC3F80A4BBF0D","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Read Correction","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Read Correction"},"is_project":0},{"component_id":"1175818","previous_id":"1175819","original_id":"0","guid":"13828ECED6494FC1A2785B3AACE96BC8","previous_guid":"EB196F59DE724469B72CC3F80A4BBF0D","component_type_id":"1","data_id":null,"data":"<p>Correct collated reads with canu. To make sure that all reads are considered, the genomeSize parameter should be set to about 1\/20 of the total number of uncorrected bases.<\/p>\n<p><br \/><br \/><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Correct collated reads with canu. To make sure that all reads are considered, the genomeSize parameter should be set to about 1\/20 of the total number of uncorrected bases.<\/p>\n<p><br \/><br \/><\/p>"},"is_project":0},{"component_id":"1175820","previous_id":"1175818","original_id":"0","guid":"EAA5ADE9C36146808915BCEB49CD2377","previous_guid":"13828ECED6494FC1A2785B3AACE96BC8","component_type_id":"15","data_id":"4655","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"canu -correct overlapper=minimap genomeSize=400M \\\n  minReadLength=100 minOverlapLength=30 -p canu_corrected -d canu_corrected -nanopore-raw .\/called_pass.fastq.gz \\\n  .\/called_fail.fastq.gz","description":"Correct Reads with canu (both passed and failed sequences), using minimap as the mapper","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"654999","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"78D6BD6605C240159D388BC79D0224CB","previous_guid":"D19D172A343F490981CB8586A93C1992","previous_id":"654989","last_modified":"1534297228","components":[{"component_id":"1175822","previous_id":0,"original_id":"0","guid":"3FF085E8CFCC49E79BFC743B3E391FE4","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Index Preparation","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Index Preparation"},"is_project":0},{"component_id":"1175821","previous_id":"1175822","original_id":"0","guid":"4ED2991F46CF490CA251B6057E38747B","previous_guid":"3FF085E8CFCC49E79BFC743B3E391FE4","component_type_id":"1","data_id":null,"data":"<p>\u00a0Prepare barcode adapter index<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>\u00a0Prepare barcode adapter index<\/p>"},"is_project":0},{"component_id":"1175844","previous_id":"1175821","original_id":"0","guid":"28F814BDC359420680822CA0554E768A","previous_guid":"4ED2991F46CF490CA251B6057E38747B","component_type_id":"23","data_id":"27956","data":"","order_id":"2","name":"File","data_by_id":"1","type_id":"23","source_data":{"media_url":"https:\/\/s3.amazonaws.com\/pr-journal\/5jwjpt6.fa","original_name":"barcode_base.fa","file_id":"27956","thumb_id":null,"thumb_url":"https:\/\/s3.amazonaws.com\/pr-journal\/5jwjpt6.fa","icon":"https:\/\/www.protocols.io\/img\/extensions\/file.png"},"is_project":0},{"component_id":"1175824","previous_id":"1175844","original_id":"0","guid":"E3D219B085454B6997AB3309B048EE32","previous_guid":"28F814BDC359420680822CA0554E768A","component_type_id":"15","data_id":"4656","data":"","order_id":"3","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"lastdb -uNEAR -R01 PCR_barcode_base.fa PCR_barcode_base.fa","description":"Index the barcode adapter file","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"655000","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"EAF8FB400665488DAD68DF16C8D1735A","previous_guid":"78D6BD6605C240159D388BC79D0224CB","previous_id":"654999","last_modified":"1534294190","components":[{"component_id":"1175826","previous_id":0,"original_id":"0","guid":"A78E60A73A394EE89F6C10D5DD039BC9","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Index Preparation","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Index Preparation"},"is_project":0},{"component_id":"1175825","previous_id":"1175826","original_id":"0","guid":"42090E9961794E9185795B0F83F1E782","previous_guid":"A78E60A73A394EE89F6C10D5DD039BC9","component_type_id":"1","data_id":null,"data":"<p>Prepare cDNA adapter index<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Prepare cDNA adapter index<\/p>"},"is_project":0},{"component_id":"1175827","previous_id":"1175825","original_id":"0","guid":"20D39CF346E04724A9F99A8C5B8D8DD1","previous_guid":"42090E9961794E9185795B0F83F1E782","component_type_id":"23","data_id":"27955","data":"","order_id":"2","name":"File","data_by_id":"1","type_id":"23","source_data":{"media_url":"https:\/\/s3.amazonaws.com\/pr-journal\/5jvjpt6.fa","original_name":"adapter_seqs.fa","file_id":"27955","thumb_id":null,"thumb_url":"https:\/\/s3.amazonaws.com\/pr-journal\/5jvjpt6.fa","icon":"https:\/\/www.protocols.io\/img\/extensions\/file.png"},"is_project":0},{"component_id":"1175828","previous_id":"1175827","original_id":"0","guid":"2A437929C3014D14881B56F894C6349A","previous_guid":"20D39CF346E04724A9F99A8C5B8D8DD1","component_type_id":"15","data_id":"4657","data":"","order_id":"3","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"lastdb -uNEAR -R01 adapter_seqs.fa adapter_seqs.fa","description":"Index the VNP and strand switch adapter file","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"655001","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"9F69821C0AAD4614BD3412DB145A66D9","previous_guid":"EAF8FB400665488DAD68DF16C8D1735A","previous_id":"655000","last_modified":"1534295430","components":[{"component_id":"1175829","previous_id":0,"original_id":"0","guid":"28DDDCE0D47B41BF882674478D5CC277","previous_guid":null,"component_type_id":"1","data_id":null,"data":"<p>Collate basecalled reads<\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Collate basecalled reads<\/p>"},"is_project":0},{"component_id":"1175830","previous_id":"1175829","original_id":"0","guid":"4C5B3BEA945F4683B090699B40D46CC9","previous_guid":"28DDDCE0D47B41BF882674478D5CC277","component_type_id":"6","data_id":"0","data":"Read Correction","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Read Correction"},"is_project":0},{"component_id":"1175831","previous_id":"1175830","original_id":"0","guid":"CD4D2DA7463B4FEDAB2833F3497D3136","previous_guid":"4C5B3BEA945F4683B090699B40D46CC9","component_type_id":"15","data_id":"4658","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"pv workspace\/fail\/*\/*.fastq | gzip > called_fail.fastq.gz\npv workspace\/pass\/*\/*.fastq | gzip > called_pass.fastq.gz","description":"Collate basecalled reads into separate files for pass and fail (but all barcodes thrown together)","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"655002","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"820BEDF359244B228FB84E6C0FFD74CE","previous_guid":"0B501C09F7ED48C8B6366AAE5B4A0EFF","previous_id":"654998","last_modified":"1534296638","components":[{"component_id":"1175833","previous_id":0,"original_id":"0","guid":"8DDED2AECF644BFF807333E6BEF40B5B","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Read Correction","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Read Correction"},"is_project":0},{"component_id":"1175832","previous_id":"1175833","original_id":"0","guid":"C85AE117D6C146D3B986BBE4A3B11854","previous_guid":"8DDED2AECF644BFF807333E6BEF40B5B","component_type_id":"1","data_id":null,"data":"<p>Identify corrected reads using <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-length.pl\" target=\"_blank\" rel=\"noopener noreferrer\">fastx-length.pl<\/a><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Identify corrected reads using <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-length.pl\" target=\"_blank\" rel=\"noopener noreferrer\">fastx-length.pl<\/a><\/p>"},"is_project":0},{"component_id":"1175834","previous_id":"1175832","original_id":"0","guid":"AE4A8FA8F5A441F586B834CC623E9AFA","previous_guid":"C85AE117D6C146D3B986BBE4A3B11854","component_type_id":"15","data_id":"4659","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"pv canu_corrected\/canu_corrected.correctedReads.fasta.gz | \\\n  fastx-length.pl | awk '{print $2}' | gzip > names_corrected_all.txt.gz","description":"create list of corrected sequence lengths","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"655003","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"D226D03966424B3B8E43134EE1084884","previous_guid":"820BEDF359244B228FB84E6C0FFD74CE","previous_id":"655002","last_modified":"1534296690","components":[{"component_id":"1175836","previous_id":0,"original_id":"0","guid":"50E45D8C5484493C87AF23DDE7332DC3","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Read Correction","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Read Correction"},"is_project":0},{"component_id":"1175835","previous_id":"1175836","original_id":"0","guid":"E7F655BB4DE54B3186ED36FFBE37853C","previous_guid":"50E45D8C5484493C87AF23DDE7332DC3","component_type_id":"1","data_id":null,"data":"<p>Extract uncorrected reads using <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-fetch.pl\" target=\"_blank\" rel=\"noopener noreferrer\">fastx-fetch.pl<\/a><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Extract uncorrected reads using <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-fetch.pl\" target=\"_blank\" rel=\"noopener noreferrer\">fastx-fetch.pl<\/a><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"1175837","previous_id":"1175835","original_id":"0","guid":"0E5E7F4A8F2440478C9FCB02E0EFE5D9","previous_guid":"E7F655BB4DE54B3186ED36FFBE37853C","component_type_id":"15","data_id":"4660","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"pv called_pass.fastq.gz called_fail.fastq.gz | \\\n  fastx-fetch.pl -v -i names_corrected_all.txt.gz | gzip > uncorrected_all.fastq.gz","description":"filter\/extract uncorrected reads","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"655004","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"2ACC7815670C40AC86C6A054D882F3E2","previous_guid":"D226D03966424B3B8E43134EE1084884","previous_id":"655003","last_modified":"1534302560","components":[{"component_id":"1175839","previous_id":0,"original_id":"0","guid":"7B1D44EDA2E442DCA3A7ACDA7F788AFF","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Read Correction","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Read Correction"},"is_project":0},{"component_id":"1175838","previous_id":"1175839","original_id":"0","guid":"F9A0F6617416466788F2D4DC5F81B980","previous_guid":"7B1D44EDA2E442DCA3A7ACDA7F788AFF","component_type_id":"1","data_id":null,"data":"<p>Join corrected and uncorrected reads. The uncorrected reads are converted to fasta format with <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastq2fasta.pl\" target=\"_blank\" rel=\"noopener noreferrer\">fastq2fasta.pl<\/a> to make the joined file formats consistent.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Join corrected and uncorrected reads. The uncorrected reads are converted to fasta format with <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastq2fasta.pl\" target=\"_blank\" rel=\"noopener noreferrer\">fastq2fasta.pl<\/a> to make the joined file formats consistent.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"1175840","previous_id":"1175838","original_id":"0","guid":"C44CA3302120480FB900C33144F5612D","previous_guid":"F9A0F6617416466788F2D4DC5F81B980","component_type_id":"15","data_id":"4661","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"pv uncorrected_all.fastq.gz | zcat | fastq2fasta.pl | gzip > uncorrected_all.fasta.gz\npv uncorrected_all.fasta.gz canu_corrected\/canu_corrected.correctedReads.fasta.gz | zcat | \\\n  gzip > uncorrected_corrected_all.fasta.gz","description":"Concatenate corrected reads to uncorrected reads","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"655005","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"42F50954C98647C8B6FB28E9F73ECECB","previous_guid":"2ACC7815670C40AC86C6A054D882F3E2","previous_id":"655004","last_modified":"1534301687","components":[{"component_id":"1175842","previous_id":0,"original_id":"0","guid":"59A6A6E5B73C4D6684A2955EDA752438","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Demultiplexing","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Demultiplexing"},"is_project":0},{"component_id":"1175841","previous_id":"1175842","original_id":"0","guid":"2CEFFF3AA8E94E32994CA9E66EC5F366","previous_guid":"59A6A6E5B73C4D6684A2955EDA752438","component_type_id":"1","data_id":null,"data":"<p>Map to barcode sequences to generate CSV file of assignments. The corrected and uncorrected reads are mapped separately to give the uncorrected reads the best chance of mapping with '-Q 1'; the corrected reads are in FASTA format, so the corrected mapping does not use quality scores.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Map to barcode sequences to generate CSV file of assignments. The corrected and uncorrected reads are mapped separately to give the uncorrected reads the best chance of mapping with '-Q 1'; the corrected reads are in FASTA format, so the corrected mapping does not use quality scores.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"1175843","previous_id":"1175841","original_id":"0","guid":"1BE340B507954245B19866692C00ACFB","previous_guid":"2CEFFF3AA8E94E32994CA9E66EC5F366","component_type_id":"15","data_id":"4662","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"(lastal -P 10 barcode_base.fa <(pv canu_corrected\/canu_corrected.correctedReads.fasta.gz | zcat);\nlastal -P 10 -Q 1 barcode_base.fa <(pv uncorrected_all.fastq.gz | zcat)) | \\\n  maf_bcsplit.pl | gzip > barcode_assignments_all.csv.gz","description":"Map to barcode sequences (excluding adapters)","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"655006","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"86A5EF9108AD4420A6A9FC58F0EF0AE9","previous_guid":"42F50954C98647C8B6FB28E9F73ECECB","previous_id":"655005","last_modified":"1534299652","components":[{"component_id":"1175846","previous_id":0,"original_id":"0","guid":"4B33816EAF9B41C2954A66B48AA6E83A","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Demultiplexing","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Demultiplexing"},"is_project":0},{"component_id":"1175845","previous_id":"1175846","original_id":"0","guid":"F228ADA2A7944D6BBFF70DCEEE4A9815","previous_guid":"4B33816EAF9B41C2954A66B48AA6E83A","component_type_id":"1","data_id":null,"data":"<p>Map to inner cDNA sequences to generate CSV file of assignments. The corrected and uncorrected reads are mapped separately because the corrected reads are in FASTA format.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Map to inner cDNA sequences to generate CSV file of assignments. The corrected and uncorrected reads are mapped separately because the corrected reads are in FASTA format.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"1175847","previous_id":"1175845","original_id":"0","guid":"AB4C5AF465274A03931C3E5544831C46","previous_guid":"F228ADA2A7944D6BBFF70DCEEE4A9815","component_type_id":"15","data_id":"4663","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"(lastal -P 10 adapter_seqs.fa <(pv canu_corrected\/canu_corrected.correctedReads.fasta.gz | zcat);\nlastal -P 10 -Q 1 adapter_seqs.fa <(pv uncorrected_all.fastq.gz | zcat)) | \\\n  maf_bcsplit.pl | gzip > adapter_assignments_all.csv.gz","description":"Map to cDNA adapter sequences","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"655007","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"082F1215FB2C465EBCD61C395BAB7069","previous_guid":"86A5EF9108AD4420A6A9FC58F0EF0AE9","previous_id":"655006","last_modified":"1534300856","components":[{"component_id":"1175849","previous_id":0,"original_id":"0","guid":"2925936328C24400B1F5EBAFFD617FDC","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Demultiplexing","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Demultiplexing"},"is_project":0},{"component_id":"1175848","previous_id":"1175849","original_id":"0","guid":"6FEC768CEE33405EA2835FB888FD312F","previous_guid":"2925936328C24400B1F5EBAFFD617FDC","component_type_id":"1","data_id":null,"data":"<p>Create 'wide' table indicating barcode\/adapter assignments. This R script creates files 'barcode-adapter_assignments_ideal.csv.gz' and 'barcode-adapter_assignments_valid.csv.gz'.<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-javascript\"><code>#!\/usr\/bin\/Rscript\nbc.df &lt;- read.csv('barcode_assignments_all.csv.gz');\nad.df &lt;- read.csv('adapter_assignments_all.csv.gz');\n\nlibrary(dplyr);\nlibrary(tidyr);\n\n## Create table of adapter additions\nad.tbl &lt;- group_by(ad.df, query, target, dir) %&gt;% summarise() %&gt;%\n    unite(tdir, target, dir, sep='.') %&gt;% mutate(present=TRUE) %&gt;%\n    spread(tdir, present);\n\n## collapse multiple query\/target pairs into one\nbc.tbl &lt;- group_by(bc.df, query, target) %&gt;% summarise(dir=paste(unique(dir), collapse='\/'));\nbc.wide &lt;- spread(bc.tbl, target, dir);\n\n## identify reads with a unique barcode\nbc.unique.tbl &lt;- group_by(bc.tbl, query) %&gt;% summarise(n = n()) %&gt;%\n    filter(n == 1) %&gt;% select(-n) %&gt;% left_join(bc.tbl, by='query') %&gt;%\n    left_join(ad.tbl, by='query', copy=TRUE);\n\nbc.unique.tbl$`ONT_SSP.-`[is.na(bc.unique.tbl$`ONT_SSP.-`)] &lt;- FALSE;\nbc.unique.tbl$`ONT_SSP.+`[is.na(bc.unique.tbl$`ONT_SSP.+`)] &lt;- FALSE;\nbc.unique.tbl$`ONT_VNP.-`[is.na(bc.unique.tbl$`ONT_VNP.-`)] &lt;- FALSE;\nbc.unique.tbl$`ONT_VNP.+`[is.na(bc.unique.tbl$`ONT_VNP.+`)] &lt;- FALSE;\n\ncolnames(bc.unique.tbl) &lt;- c('query','target','bcDir','SSPrev','SSPfwd','VNPrev','VNPfwd');\n\n## read is considerd 'valid' (for now) if at least one primer matches\nbc.valid.tbl &lt;- filter(bc.unique.tbl, (SSPrev | VNPfwd | VNPrev | SSPfwd));\n## ideal reads have forward and reverse cDNA adapters in opposing orientations\nbc.ideal.tbl &lt;- filter(bc.unique.tbl, ((SSPrev &amp; !SSPfwd &amp; VNPfwd &amp; !VNPrev) | (!SSPrev &amp; SSPfwd &amp; !VNPfwd &amp; VNPrev)));\n\nwrite.csv(bc.ideal.tbl, row.names=FALSE, file=gzfile('barcode-adapter_assignments_ideal.csv.gz'), quote=FALSE);\nwrite.csv(bc.valid.tbl, row.names=FALSE, file=gzfile('barcode-adapter_assignments_valid.csv.gz'), quote=FALSE);<\/code><\/pre>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Create 'wide' table indicating barcode\/adapter assignments. This R script creates files 'barcode-adapter_assignments_ideal.csv.gz' and 'barcode-adapter_assignments_valid.csv.gz'.<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-javascript\"><code>#!\/usr\/bin\/Rscript\nbc.df &lt;- read.csv('barcode_assignments_all.csv.gz');\nad.df &lt;- read.csv('adapter_assignments_all.csv.gz');\n\nlibrary(dplyr);\nlibrary(tidyr);\n\n## Create table of adapter additions\nad.tbl &lt;- group_by(ad.df, query, target, dir) %&gt;% summarise() %&gt;%\n    unite(tdir, target, dir, sep='.') %&gt;% mutate(present=TRUE) %&gt;%\n    spread(tdir, present);\n\n## collapse multiple query\/target pairs into one\nbc.tbl &lt;- group_by(bc.df, query, target) %&gt;% summarise(dir=paste(unique(dir), collapse='\/'));\nbc.wide &lt;- spread(bc.tbl, target, dir);\n\n## identify reads with a unique barcode\nbc.unique.tbl &lt;- group_by(bc.tbl, query) %&gt;% summarise(n = n()) %&gt;%\n    filter(n == 1) %&gt;% select(-n) %&gt;% left_join(bc.tbl, by='query') %&gt;%\n    left_join(ad.tbl, by='query', copy=TRUE);\n\nbc.unique.tbl$`ONT_SSP.-`[is.na(bc.unique.tbl$`ONT_SSP.-`)] &lt;- FALSE;\nbc.unique.tbl$`ONT_SSP.+`[is.na(bc.unique.tbl$`ONT_SSP.+`)] &lt;- FALSE;\nbc.unique.tbl$`ONT_VNP.-`[is.na(bc.unique.tbl$`ONT_VNP.-`)] &lt;- FALSE;\nbc.unique.tbl$`ONT_VNP.+`[is.na(bc.unique.tbl$`ONT_VNP.+`)] &lt;- FALSE;\n\ncolnames(bc.unique.tbl) &lt;- c('query','target','bcDir','SSPrev','SSPfwd','VNPrev','VNPfwd');\n\n## read is considerd 'valid' (for now) if at least one primer matches\nbc.valid.tbl &lt;- filter(bc.unique.tbl, (SSPrev | VNPfwd | VNPrev | SSPfwd));\n## ideal reads have forward and reverse cDNA adapters in opposing orientations\nbc.ideal.tbl &lt;- filter(bc.unique.tbl, ((SSPrev &amp; !SSPfwd &amp; VNPfwd &amp; !VNPrev) | (!SSPrev &amp; SSPfwd &amp; !VNPfwd &amp; VNPrev)));\n\nwrite.csv(bc.ideal.tbl, row.names=FALSE, file=gzfile('barcode-adapter_assignments_ideal.csv.gz'), quote=FALSE);\nwrite.csv(bc.valid.tbl, row.names=FALSE, file=gzfile('barcode-adapter_assignments_valid.csv.gz'), quote=FALSE);<\/code><\/pre>"},"is_project":0}]},{"id":"655008","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"BE2EE751A39E4AFCA147FEFFBFB929C5","previous_guid":"712B860FA8FA46C6879CBEF07E676D97","previous_id":"655009","last_modified":"1534303944","components":[{"component_id":"1175851","previous_id":0,"original_id":"0","guid":"E7E2599367B644A3B16068408B14A4AE","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Demultiplexing","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Demultiplexing"},"is_project":0},{"component_id":"1175850","previous_id":"1175851","original_id":"0","guid":"9F4FFDF5FC8045ACA4B9941DDD4738E7","previous_guid":"E7E2599367B644A3B16068408B14A4AE","component_type_id":"1","data_id":null,"data":"<p>Demultiplex valid reads by barcodes using <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-fetch.pl\" target=\"_blank\" rel=\"noopener noreferrer\">fastx-fetch.pl<\/a><\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Demultiplex valid reads by barcodes using <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-fetch.pl\" target=\"_blank\" rel=\"noopener noreferrer\">fastx-fetch.pl<\/a><\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"1175855","previous_id":"1175850","original_id":"0","guid":"CB235EC918C24C028210943B93EDEBFF","previous_guid":"9F4FFDF5FC8045ACA4B9941DDD4738E7","component_type_id":"15","data_id":"4665","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"cat used_barcodes.txt | while read bc\n  do echo \"** ${bc} **\"\n  mkdir -p demultiplexed\/${bc};\n  pv uncorrected_corrected_all.fasta.gz |  \\\n    ~\/scripts\/fastx-fetch.pl -i <(zgrep ${bc} barcode-adapter_assignments_ideal.csv.gz | awk -F',' '{print $1}')  | \\\n  gzip > demultiplexed\/${bc}\/${bc}_reads_all.fasta.gz;\ndone","description":"Demultiplex valid reads by barcode","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"655009","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"712B860FA8FA46C6879CBEF07E676D97","previous_guid":"082F1215FB2C465EBCD61C395BAB7069","previous_id":"655007","last_modified":"1534303601","components":[{"component_id":"1175853","previous_id":0,"original_id":"0","guid":"5BD8916F53F14F9C85F8EE890039224A","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Demultiplexing","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Demultiplexing"},"is_project":0},{"component_id":"1175852","previous_id":"1175853","original_id":"0","guid":"BB2ABCF62C244D7F8EBDCC02BD1C78F8","previous_guid":"5BD8916F53F14F9C85F8EE890039224A","component_type_id":"1","data_id":null,"data":"<p>Create a list of used barcodes<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Create a list of used barcodes<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"1175854","previous_id":"1175852","original_id":"0","guid":"6FB2412B0A5C47769F402468F427DE1B","previous_guid":"BB2ABCF62C244D7F8EBDCC02BD1C78F8","component_type_id":"15","data_id":"4664","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"zcat barcode-adapter_assignments_ideal.csv.gz | tail -n +2 | awk -F',' '{print $2}' | sort | uniq > used_barcodes.txt","description":"Create a list of used barcodes","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"655010","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"CAA1B2A880FD42E39ADCC58505022802","previous_guid":"BE2EE751A39E4AFCA147FEFFBFB929C5","previous_id":"655008","last_modified":"1534306188","components":[{"component_id":"1175857","previous_id":0,"original_id":"0","guid":"263E98A8465E466BB865CCC5F8E3B3D2","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Demultiplexing","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Demultiplexing"},"is_project":0},{"component_id":"1175856","previous_id":"1175857","original_id":"0","guid":"D20653437B404F5E9D718F84D41B5FB2","previous_guid":"263E98A8465E466BB865CCC5F8E3B3D2","component_type_id":"1","data_id":null,"data":"<p>Demultiplex barcode-demultiplexed reads by SSP direction.<\/p>\n<p>\u00a0<\/p>\n<p>Note that the last four values in the 'wide' table refer to the reverse and forward mappings of the SSP and VNP primers respectively). The reverse reads are reverse-complemented with <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-rc.pl\" target=\"_blank\" rel=\"noopener noreferrer\">fastx-rc.pl<\/a>, followed by a final concatenation to simplify the subsequent alignment steps.<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Demultiplex barcode-demultiplexed reads by SSP direction.<\/p>\n<p>\u00a0<\/p>\n<p>Note that the last four values in the 'wide' table refer to the reverse and forward mappings of the SSP and VNP primers respectively). The reverse reads are reverse-complemented with <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-rc.pl\" target=\"_blank\" rel=\"noopener noreferrer\">fastx-rc.pl<\/a>, followed by a final concatenation to simplify the subsequent alignment steps.<\/p>"},"is_project":0},{"component_id":"1175858","previous_id":"1175856","original_id":"0","guid":"E8CDB81E3D4A4413A1E50DFF363E5369","previous_guid":"D20653437B404F5E9D718F84D41B5FB2","component_type_id":"15","data_id":"4666","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"cat used_barcodes.txt | while read bc\n  do echo \"** ${bc}\/fwd **\";\n  pv demultiplexed\/${bc}\/${bc}_reads_all.fasta.gz |  \\\n    ~\/scripts\/fastx-fetch.pl -i <(zgrep 'FALSE,TRUE,TRUE,FALSE$' barcode-adapter_assignments_ideal.csv.gz | awk -F',' '{print $1}')  | \\\n  gzip > demultiplexed\/${bc}\/${bc}_reads_fwd.fasta.gz;\n  echo \"** ${bc}\/rev **\";\n  pv demultiplexed\/${bc}\/${bc}_reads_all.fasta.gz |  \\\n    ~\/scripts\/fastx-fetch.pl -i <(zgrep 'TRUE,FALSE,FALSE,TRUE$' barcode-adapter_assignments_ideal.csv.gz | awk -F',' '{print $1}')  | \\\n  fastx-rc.pl | gzip > demultiplexed\/${bc}\/${bc}_reads_rev.fasta.gz;\n  pv demultiplexed\/${bc}\/${bc}_reads_fwd.fasta.gz demultiplexed\/${bc}\/${bc}_reads_rev.fasta.gz | zcat | \\\n    gzip > demultiplexed\/${bc}\/${bc}_reads_dirAdjusted.fasta.gz\ndone","description":"demultiplex demultiplexed reads by direction","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]}]}