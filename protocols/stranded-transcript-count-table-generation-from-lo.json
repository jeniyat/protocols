{"id":20092,"title":"Stranded Transcript Count Table Generation from Long Reads","title_html":"Stranded Transcript Count Table Generation from Long Reads","image":{"source":"https:\/\/www.protocols.io\/img\/default_protocol.png","placeholder":"https:\/\/www.protocols.io\/img\/default_protocol.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.xu4fnyw","doi_status":2,"uri":"stranded-transcript-count-table-generation-from-lo-xu4fnyw","type_id":1,"published_on":1549580521,"version_id":2,"created_on":1549499193,"categories":null,"creator":{"name":"David Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","username":"david-eccles","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg"},"badges":[{"id":3,"image":{"source":"\/img\/badges\/silver.svg","placeholder":"\/img\/badges\/silver.svg"},"name":"Power author!"},{"id":6,"image":{"source":"\/img\/badges\/socialbutterfly.svg","placeholder":"\/img\/badges\/socialbutterfly.svg"},"name":"Social butterfly"}],"research_interests":null},"journal":null,"journal_name":null,"journal_link":null,"public":1,"has_versions":1,"link":null,"number_of_steps":9,"authors":[{"name":"David Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","username":"david-eccles","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg"},"badges":[],"research_interests":null}],"versions":[],"groups":[],"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"forks_count":{"private":0,"public":0},"steps":[{"id":705691,"guid":"20C395DC96064530B751644599EFF292","previous_id":706374,"previous_guid":"949B8F702A6F11E9A10E9FC59ECBFD74","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"78177849CC884F9EA989A3AF1A03E539","order_id":1,"type_id":6,"title":"Section","source":{"title":"Index Preparation"}},{"id":1054724,"guid":"9CD3F92C8CE74CC58A72A620E05FB086","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Prepare transcript index (see Guidelines for data sources)<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">lastdb Mus_musculus.GRCm38.cds.all.fa <(zcat Mus_musculus.GRCm38.cds.all.fa.gz)<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":705692,"guid":"2472138EC2A742B59C9C59F3A7DF111D","previous_id":705706,"previous_guid":"87E53A6469C74C12976D3F537336AAFB","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"21C4BA4B95574C3B8301CAD339794D17","order_id":1,"type_id":6,"title":"Section","source":{"title":"Transcriptome Mapping"}},{"id":1054724,"guid":"25F1E9B816E14129BC913C34AB392606","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Reads are mapped to the transcriptome with LAST.<\/div><div class = \"text-block\"><span>The results of that mapping can be piped through <\/span><span style = \"font-style:italic;\">last-map-probs<\/span><span> to exclude unlikely hits, then through '<\/span><span style = \"font-style:italic;\">maf-convert -n tab'<\/span><span> to convert to a one-line-per-mapping CSV format. This CSV format is further processed to make sure that there is only one mapping per transcript-read pair, and then aggregated to sum up counts per transcript.<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">mkdir -p mapped<\/div><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo \"** ${bc} **\";<\/div><div class = \"text-block\">  lastal -Q 1 -P 10 Mus_musculus.GRCm38.cds.all.fa <(pv demultiplexed\/${bc}\/${bc}_reads_dirAdjusted.fastq.gz | zcat) | \\<\/div><div class = \"text-block\">    last-map-probs | maf-convert -n tab | cut -f 2,7,10 | sort | uniq | \\<\/div><div class = \"text-block\">    awk -F'\\t' -v \"bc=${bc}\" '{print bc,$1,$3}' | sort | uniq -c | gzip > mapped\/trnCounts_LAST_${bc}_vs_Mmus_transcriptome.txt.gz;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":705693,"guid":"83FF8EFD179447468EEC612E3083C375","previous_id":705692,"previous_guid":"2472138EC2A742B59C9C59F3A7DF111D","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"4F9706EE9F3A483CB9A31F4B5BE3F92B","order_id":1,"type_id":6,"title":"Section","source":{"title":"Annotation and Result generation"}},{"id":1054724,"guid":"BAC1B6BBB9474B42B279ED75B4C70723","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Transcript counts are merged with ensembl gene annotation, then converted into wide format (one line per transcript) using an R script.<\/div><div class = \"text-block\">The transcript annotation in this case is from ensembl BioMart (see Guidelines for more details).<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">barcode_counts.txt#!\/usr\/bin\/env Rscript<\/div><div class = \"text-block\">library(dplyr);<\/div><div class = \"text-block\">library(tidyr);<\/div><div class = \"text-block\">## load ensemble transcript metadata (including gene name)<\/div><div class = \"text-block\">ensembl.df <- as.tbl(read.delim('ensembl_mm10_geneFeatureLocations.txt.gz',                          <\/div><div class = \"text-block\">  col.names=c('transcript','Description','Start','End',<\/div><div class = \"text-block\">              'Strand','Gene','Chr'),<\/div><div class = \"text-block\">  stringsAsFactors=FALSE));<\/div><div class = \"text-block\">ensembl.df$Description <- sub(' \\\\[.*$','',ensembl.df$Description);<\/div><div class = \"text-block\">ensembl.df$Description <- sub('^(.{50}).+$','\\\\1...',ensembl.df$Description);<\/div><div class = \"text-block\">ensembl.df[,1:7] <- ensembl.df[,c(1,7,5,3,4,2,6)];<\/div><div class = \"text-block\">colnames(ensembl.df)[1:7] <- colnames(ensembl.df)[c(1,7,5,3,4,2,6)];<\/div><div class = \"text-block\">options(scipen=15); ## don't show scientific notation for large positions<\/div><div class = \"text-block\">## load used barcode identifiers<\/div><div class = \"text-block\">bcNames <- read.table(\"barcode_counts.txt\", stringsAsFactors=FALSE)[,2];<\/div><div class = \"text-block\">## load count data into 'narrow' array (one line per count)<\/div><div class = \"text-block\">trn.counts <- tibble(); for(bc in bcNames){<\/div><div class = \"text-block\">  trn.counts <-<\/div><div class = \"text-block\">    bind_rows(trn.counts,<\/div><div class = \"text-block\">      as.tbl(read.table(<\/div><div class = \"text-block\">        sprintf('mapped\/trnCounts_LAST_%s_vs_Mmus_transcriptome.txt.gz', bc),<\/div><div class = \"text-block\">        col.names=c('count','barcode','transcript','dir'),<\/div><div class = \"text-block\">        stringsAsFactors=FALSE)));<\/div><div class = \"text-block\">}<\/div><div class = \"text-block\">## remove revision number from transcript names (if present)<\/div><div class = \"text-block\">trn.counts$transcript <- sub('\\\\.[0-9]+$','',trn.counts$transcript);<\/div><div class = \"text-block\">## convert to wide format (one line per transcript)<\/div><div class = \"text-block\">trn.counts.wide <- spread(trn.counts, barcode, count) %>%<\/div><div class = \"text-block\">  mutate(dir = c('+'='fwd', '-'='rev')[dir]);<\/div><div class = \"text-block\">for(bd in colnames(trn.counts.wide[,-1])){<\/div><div class = \"text-block\">  trn.counts.wide[[bd]] <- replace_na(trn.counts.wide[[bd]],0);<\/div><div class = \"text-block\">}<\/div><div class = \"text-block\">## merge ensembl metadata with transcript counts<\/div><div class = \"text-block\">gene.counts.wide <- inner_join(ensembl.df, trn.counts.wide, by='transcript');<\/div><div class = \"text-block\">gene.counts.wide <- gene.counts.wide[order(-rowSums(gene.counts.wide[,-(1:8)])),];<\/div><div class = \"text-block\">## write result out to a file<\/div><div class = \"text-block\">write.csv(gene.counts.wide, file='wide_transcript_counts_LAST.csv', <\/div><div class = \"text-block\">  row.names=FALSE);<\/div><\/div><\/code><\/pre><\/div><\/div>"}},{"id":1054725,"guid":"02C0C1202B2211E9A10E9FC59ECBFD74","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/bcvaa.r","placeholder":"https:\/\/www.protocols.io\/img\/extensions\/r.png","original_name":"count_analysis.r"}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":705696,"guid":"2626FBC077B5419D9A2759D0FC3BBA54","previous_id":705691,"previous_guid":"20C395DC96064530B751644599EFF292","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"2CC8D9F802E04DA7B60891CB96570BB7","order_id":1,"type_id":6,"title":"Section","source":{"title":"Index Preparation"}},{"id":1054724,"guid":"902DEA16FDCB4235B3BC2142DC7EBE0D","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Prepare cDNA adapter index<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">lastdb -uNEAR -R01 adapter_seqs.fa adapter_seqs.fa<\/div><\/div><\/code><\/pre><\/div><\/div>"}},{"id":1054725,"guid":"20D39CF346E04724A9F99A8C5B8D8DD1","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/5jvjpt6.fa","placeholder":"https:\/\/stage.protocols.io\/img\/extensions\/file.png","original_name":"adapter_seqs.fa"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":705702,"guid":"A8FACF541B7544129C24CA4EE8C2A4B6","previous_id":705696,"previous_guid":"2626FBC077B5419D9A2759D0FC3BBA54","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"51F7B2E5373B4BA98F3E7AA563B2EB92","order_id":1,"type_id":6,"title":"Section","source":{"title":"Read Orientation"}},{"id":1054724,"guid":"FA44EB64A1CA4AEA9DF2CBF353BB7CD9","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Map <\/span><span style = \"font-style:italic;\">demultiplexed reads<\/span><span> to adapter sequences to generate tab-separated file of adapter assignments:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">mkdir mapped<\/div><div class = \"text-block\">(for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do lastal -Q 1 -P 10 adapter_seqs.fa <(pv reads_${bc}.fastq.gz) | \\<\/div><div class = \"text-block\">    maf-convert -n tab | cut -f 2,7,10 | perl -pe \"s\/^\/${bc}\\t\/\";<\/div><div class = \"text-block\"> done) | gzip > adapter_assignments_all.tsv.gz<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":705703,"guid":"731B82E254974D9F9CBD1B782E9426A5","previous_id":705702,"previous_guid":"A8FACF541B7544129C24CA4EE8C2A4B6","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"D9BC5F330E634C278FDB4F9EA4AA0D68","order_id":1,"type_id":6,"title":"Section","source":{"title":"Read Orientation"}},{"id":1054724,"guid":"A8B726FED2D54EE69F638A9AA145D720","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Create 'wide' table indicating adapter assignments. This R script creates files 'adapter_assignments_ideal.csv.gz' and 'adapter_assignments_valid.csv.gz'.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">#!\/usr\/bin\/env Rscript<\/div><div class = \"text-block\">ad.df <- read.delim('adapter_assignments_all.tsv.gz',<\/div><div class = \"text-block\">                    header=FALSE, col.names = c(\"bc\",\"target\",\"query\",\"dir\"),<\/div><div class = \"text-block\">                    stringsAsFactors=FALSE);<\/div><div class = \"text-block\">library(dplyr);<\/div><div class = \"text-block\">library(tidyr);<\/div><div class = \"text-block\">## Create table of adapter additions<\/div><div class = \"text-block\">ad.tbl <- group_by(ad.df, query, bc, target, dir) %>%<\/div><div class = \"text-block\">     summarise() %>%<\/div><div class = \"text-block\">     unite(tdir, target, dir, sep='.') %>% mutate(present=TRUE) %>%<\/div><div class = \"text-block\">    spread(tdir, present, fill=FALSE);<\/div><div class = \"text-block\">## Clean up adapter names<\/div><div class = \"text-block\">colnames(ad.tbl) <- sub(\"\\\\.\\\\-\",\"rev\",colnames(ad.tbl));<\/div><div class = \"text-block\">colnames(ad.tbl) <- sub(\"\\\\.\\\\+\",\"fwd\",colnames(ad.tbl));<\/div><div class = \"text-block\">colnames(ad.tbl) <- sub(\"^ONT_\",\"\",colnames(ad.tbl));<\/div><div class = \"text-block\">## read is considered 'valid' if there is only one SSP primer match<\/div><div class = \"text-block\">ad.valid.tbl <- filter(ad.tbl, (SSPrev | SSPfwd), !(SSPfwd & SSPrev));<\/div><div class = \"text-block\">## read is considered 'ideal' if VNP is in the reverse direction as SSP<\/div><div class = \"text-block\">ad.ideal.tbl <- filter(ad.valid.tbl, (SSPrev & VNPfwd) | (SSPfwd & VNPrev), !(VNPrev & VNPfwd));<\/div><div class = \"text-block\">write.csv(ad.ideal.tbl, row.names=FALSE,<\/div><div class = \"text-block\">  file=gzfile('barcode-adapter_assignments_ideal.csv.gz'), quote=FALSE);<\/div><div class = \"text-block\">write.csv(ad.valid.tbl, row.names=FALSE,<\/div><div class = \"text-block\">  file=gzfile('barcode-adapter_assignments_valid.csv.gz'), quote=FALSE);<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":705706,"guid":"87E53A6469C74C12976D3F537336AAFB","previous_id":705703,"previous_guid":"731B82E254974D9F9CBD1B782E9426A5","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"34EA9B47C9934D0ABD8B5956FCFFF078","order_id":1,"type_id":6,"title":"Section","source":{"title":"Read Orientation"}},{"id":1054724,"guid":"C4727559AB84427685B3D9A2F124DB51","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Demultiplex barcode-demultiplexed reads by SSP direction.<\/div><div class = \"text-block\">Note that the last four values in the 'wide' table refer to the reverse and forward mappings of the SSP and VNP primers respectively). The reverse reads are reverse-complemented with <\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">fastx-rc.pl<\/span><\/a><\/div><div class = \"text-block\">, followed by a final concatenation to simplify the subsequent alignment steps.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">   do echo \"** ${bc}\/fwd **\";<\/div><div class = \"text-block\">   mkdir -p demultiplexed\/${bc};<\/div><div class = \"text-block\">   pv reads_${bc}.fastq.gz | \\<\/div><div class = \"text-block\">     ~\/scripts\/fastx-fetch.pl -i <(zgrep 'FALSE,TRUE,TRUE,FALSE$' barcode-adapter_assignments_ideal.csv.gz | awk -F',' '{print $1}')  | \\<\/div><div class = \"text-block\">  gzip > demultiplexed\/${bc}\/${bc}_reads_fwd.fastq.gz;<\/div><div class = \"text-block\">   echo \"** ${bc}\/rev **\";<\/div><div class = \"text-block\">   pv reads_${bc}.fastq.gz | \\<\/div><div class = \"text-block\">     ~\/scripts\/fastx-fetch.pl -i <(zgrep 'TRUE,FALSE,FALSE,TRUE$' barcode-adapter_assignments_ideal.csv.gz | awk -F',' '{print $1}')  | \\<\/div><div class = \"text-block\">  fastx-rc.pl | gzip > demultiplexed\/${bc}\/${bc}_reads_rev.fastq.gz;<\/div><div class = \"text-block\">   pv demultiplexed\/${bc}\/${bc}_reads_fwd.fastq.gz demultiplexed\/${bc}\/${bc}_reads_rev.fastq.gz | zcat | \\<\/div><div class = \"text-block\">    gzip > demultiplexed\/${bc}\/${bc}_reads_dirAdjusted.fastq.gz;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":705808,"guid":"61D42BD02ADB11E9B5A45F4829486A7F","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"19972E7A8B744308B482D49D4F1893AD","order_id":1,"type_id":6,"title":"Section","source":{"title":"Barcode Demultiplexing"}},{"id":1054724,"guid":"557E29F5274F4BC8A5878672EE2F0ED0","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Demultiplex reads as per protocol <\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Demultiplexing Nanopore reads with LAST<\/span><\/a><\/div><div class = \"text-block\">.<\/div><div class = \"text-block\">If this has been done, then the following command should produce output without errors:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt); do ls reads_${bc}.fastq.gz; done<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Example output:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">reads_BC03.fastq.gz<\/div><div class = \"text-block\">reads_BC04.fastq.gz<\/div><div class = \"text-block\">reads_BC05.fastq.gz<\/div><div class = \"text-block\">reads_BC06.fastq.gz<\/div><div class = \"text-block\">reads_BC07.fastq.gz<\/div><div class = \"text-block\">reads_BC08.fastq.gz<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span>If the <\/span><span style = \"font-style:italic;\">barcode_counts.txt<\/span><span> file is missing, the output will look like this:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">awk: fatal: cannot open file `barcode_counts.txt' for reading (No such file or directory)<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">If one or more of the barcode-demultiplexed files are missing, the output will look something like this:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">reads_BC03.fastq.gz<\/div><div class = \"text-block\">reads_BC04.fastq.gz<\/div><div class = \"text-block\">reads_BC05.fastq.gz<\/div><div class = \"text-block\">ls: cannot access 'reads_BC06.fastq.gz': No such file or directory<\/div><div class = \"text-block\">ls: cannot access 'reads_BC07.fastq.gz': No such file or directory<\/div><div class = \"text-block\">reads_BC08.fastq.gz<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":706374,"guid":"949B8F702A6F11E9A10E9FC59ECBFD74","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"22CBF020554B49BDB3E16E49F6099231","order_id":1,"type_id":6,"title":"Section","source":{"title":"Demultiplex Reads    "}},{"id":1054724,"guid":"7ABE62A8A729453CBFB8168C530DDFDA","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Demultiplex reads as per the protocol <\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Demultiplexing Nanopore reads with LAST<\/span><\/a><\/div><div class = \"text-block\"><span>. It is expected that these demultiplexed reads will be split up in the current directory, and coupled with a '<\/span><span style = \"font-style:italic;\">barcode_counts.txt<\/span><span>' file. If that's the case, the following should work:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do ls reads_${bc}.fastq.gz;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Example expected output:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">reads_BC03.fastq.gz<\/div><div class = \"text-block\">reads_BC04.fastq.gz<\/div><div class = \"text-block\">reads_BC05.fastq.gz<\/div><div class = \"text-block\">reads_BC06.fastq.gz<\/div><div class = \"text-block\">reads_BC07.fastq.gz<\/div><div class = \"text-block\">reads_BC08.fastq.gz<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span>If the '<\/span><span style = \"font-style:italic;\">barcode_counts.txt<\/span><span>' file is not present, this error will appear:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">awk: fatal: cannot open file `barcode_counts.txt' for reading (No such file or directory)<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">If one or more of the demultiplexed read files is missing, it will look something like this:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">reads_BC03.fastq.gz<\/div><div class = \"text-block\">reads_BC04.fastq.gz<\/div><div class = \"text-block\">ls: cannot access 'reads_BC05.fastq.gz': No such file or directory<\/div><div class = \"text-block\">ls: cannot access 'reads_BC06.fastq.gz': No such file or directory<\/div><div class = \"text-block\">reads_BC07.fastq.gz<\/div><div class = \"text-block\">reads_BC08.fastq.gz<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#94EBFF"}],"materials":[],"description":"<div class = \"text-blocks\"><div class = \"text-block\">This protocol is for comparing different samples at the transcript level, using long reads that are mapped to transcripts.<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Input(s)<\/span><span>: demultiplexed fastq files (see protocol <\/span><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Demultiplexing Nanopore reads with LAST<\/span><\/a><span>), transcript reference fasta file, annotation file<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Output(s):<\/span><span> transcript table, sorted by differential coverage, annotated with gene name \/ description \/ location<\/span><\/div><\/div>","changed_on":1549580521}