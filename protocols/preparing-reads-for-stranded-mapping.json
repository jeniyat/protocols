{"id":28533,"title":"Preparing Reads for Stranded Mapping","title_html":"Preparing Reads for Stranded Mapping","image":{"source":"https:\/\/www.protocols.io\/img\/default_protocol.png","placeholder":"https:\/\/www.protocols.io\/img\/default_protocol.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.74vhqw6","doi_status":2,"uri":"preparing-reads-for-stranded-mapping-74vhqw6","type_id":1,"published_on":1570744484,"parent_protocols":[],"parent_collections":[],"version_id":5,"created_on":1570743763,"categories":null,"creator":{"name":"David A. Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","affiliations":[{"affiliation":"Malaghan Institute of Medical Research (NZ)","url":"http:\/\/www.malaghan.org.nz\/","is_default":1}],"username":"david-eccles","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg"},"badges":[{"id":3,"image":{"source":"\/img\/badges\/silver.svg","placeholder":"\/img\/badges\/silver.svg"},"name":"Power author!"},{"id":6,"image":{"source":"\/img\/badges\/socialbutterfly.svg","placeholder":"\/img\/badges\/socialbutterfly.svg"},"name":"Social butterfly"}],"research_interests":null,"blocked_by_you":false,"blocked_you":false},"journal":null,"journal_name":null,"journal_link":null,"article_citation":null,"public":1,"has_versions":1,"link":null,"total_collections":0,"number_of_steps":16,"authors":[{"name":"David A. Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","affiliations":[],"username":"david-eccles","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg"},"badges":[],"research_interests":null,"blocked_by_you":false,"blocked_you":false}],"versions":[],"groups":[],"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"can_be_copied":1,"can_remove_fork":1,"forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":0,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"guid":"A16AB90276C044A79B191220A923D278","steps":[{"id":824562,"guid":"9FBF25BB74BA4FC58844489A9A4B4209","previous_id":824570,"previous_guid":"747510DC4CA24FA9B81822778EA4987C","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"6C9B0E404E5D4FCB90DA4F8F8B1F110E","order_id":1,"type_id":6,"title":"Section","source":{"title":"Index Preparation"}},{"id":1054724,"guid":"D840E5F3C20A4820A919EF774C6057D8","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Prepare transcript index (see Guidelines for data sources)<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">lastdb Mus_musculus.GRCm38.cds.all.fa <(zcat Mus_musculus.GRCm38.cds.all.fa.gz)<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#A492FF","critical":null,"critical_id":null,"duration":0},{"id":824563,"guid":"FF1DEDE1181C4BA88212B98F155B310B","previous_id":824568,"previous_guid":"E9EEC252934B47F0ABDA2132D8113FAB","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"9D2226F0DC764F5A8043B893EDE23D62","order_id":1,"type_id":6,"title":"Section","source":{"title":"Transcriptome Mapping"}},{"id":1054724,"guid":"9E9AB3436386460FA6D7A0A6AACA71A6","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Reads are mapped to the transcriptome with LAST.<\/div><div class = \"text-block\"><span>The results of that mapping can be piped through <\/span><span style = \"font-style:italic;\">last-map-probs<\/span><span> to exclude unlikely hits, then through '<\/span><span style = \"font-style:italic;\">maf-convert -n tab'<\/span><span> to convert to a one-line-per-mapping CSV format. This CSV format is further processed to make sure that there is only one mapping per transcript-read pair, and then aggregated to sum up counts per transcript.<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">mkdir -p mapped<\/div><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo \"** ${bc} **\";<\/div><div class = \"text-block\">  lastal -Q 1 -P 10 Mus_musculus.GRCm38.cds.all.fa <(pv demultiplexed\/${bc}\/${bc}_reads_dirAdjusted.fastq.gz | zcat) | \\<\/div><div class = \"text-block\">    last-map-probs | maf-convert -n tab | cut -f 2,7,10 | sort | uniq | \\<\/div><div class = \"text-block\">    awk -F'\\t' -v \"bc=${bc}\" '{print bc,$1,$3}' | sort | uniq -c | gzip > mapped\/trnCounts_LAST_${bc}_vs_Mmus_transcriptome.txt.gz;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":null,"critical":null,"critical_id":null,"duration":0},{"id":824564,"guid":"67248E3A317D42FAA18F01EB214F26B5","previous_id":824563,"previous_guid":"FF1DEDE1181C4BA88212B98F155B310B","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"7645A33A937541CAA1D447CC95190432","order_id":1,"type_id":6,"title":"Section","source":{"title":"Annotation and Result generation"}},{"id":1054724,"guid":"75B8793F07E14393BB4D14C5D9820B68","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Transcript counts are merged with ensembl gene annotation, then converted into wide format (one line per transcript) using an R script.<\/div><div class = \"text-block\">The transcript annotation in this case is from ensembl BioMart (see Guidelines for more details).<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">barcode_counts.txt#!\/usr\/bin\/env Rscript<\/div><div class = \"text-block\">library(dplyr);<\/div><div class = \"text-block\">library(tidyr);<\/div><div class = \"text-block\">## load ensemble transcript metadata (including gene name)<\/div><div class = \"text-block\">ensembl.df <- as.tbl(read.delim('ensembl_mm10_geneFeatureLocations.txt.gz',                          <\/div><div class = \"text-block\">  col.names=c('transcript','Description','Start','End',<\/div><div class = \"text-block\">              'Strand','Gene','Chr'),<\/div><div class = \"text-block\">  stringsAsFactors=FALSE));<\/div><div class = \"text-block\">ensembl.df$Description <- sub(' \\\\[.*$','',ensembl.df$Description);<\/div><div class = \"text-block\">ensembl.df$Description <- sub('^(.{50}).+$','\\\\1...',ensembl.df$Description);<\/div><div class = \"text-block\">ensembl.df[,1:7] <- ensembl.df[,c(1,7,5,3,4,2,6)];<\/div><div class = \"text-block\">colnames(ensembl.df)[1:7] <- colnames(ensembl.df)[c(1,7,5,3,4,2,6)];<\/div><div class = \"text-block\">options(scipen=15); ## don't show scientific notation for large positions<\/div><div class = \"text-block\">## load used barcode identifiers<\/div><div class = \"text-block\">bcNames <- read.table(\"barcode_counts.txt\", stringsAsFactors=FALSE)[,2];<\/div><div class = \"text-block\">## load count data into 'narrow' array (one line per count)<\/div><div class = \"text-block\">trn.counts <- tibble(); for(bc in bcNames){<\/div><div class = \"text-block\">  trn.counts <-<\/div><div class = \"text-block\">    bind_rows(trn.counts,<\/div><div class = \"text-block\">      as.tbl(read.table(<\/div><div class = \"text-block\">        sprintf('mapped\/trnCounts_LAST_%s_vs_Mmus_transcriptome.txt.gz', bc),<\/div><div class = \"text-block\">        col.names=c('count','barcode','transcript','dir'),<\/div><div class = \"text-block\">        stringsAsFactors=FALSE)));<\/div><div class = \"text-block\">}<\/div><div class = \"text-block\">## remove revision number from transcript names (if present)<\/div><div class = \"text-block\">trn.counts$transcript <- sub('\\\\.[0-9]+$','',trn.counts$transcript);<\/div><div class = \"text-block\">## convert to wide format (one line per transcript)<\/div><div class = \"text-block\">trn.counts.wide <- spread(trn.counts, barcode, count) %>%<\/div><div class = \"text-block\">  mutate(dir = c('+'='fwd', '-'='rev')[dir]);<\/div><div class = \"text-block\">for(bd in colnames(trn.counts.wide[,-1])){<\/div><div class = \"text-block\">  trn.counts.wide[[bd]] <- replace_na(trn.counts.wide[[bd]],0);<\/div><div class = \"text-block\">}<\/div><div class = \"text-block\">## merge ensembl metadata with transcript counts<\/div><div class = \"text-block\">gene.counts.wide <- inner_join(ensembl.df, trn.counts.wide, by='transcript');<\/div><div class = \"text-block\">gene.counts.wide <- gene.counts.wide[order(-rowSums(gene.counts.wide[,-(1:8)])),];<\/div><div class = \"text-block\">## write result out to a file<\/div><div class = \"text-block\">write.csv(gene.counts.wide, file='wide_transcript_counts_LAST.csv', <\/div><div class = \"text-block\">  row.names=FALSE);<\/div><\/div><\/code><\/pre><\/div><\/div>"}},{"id":1054725,"guid":"02C0C1202B2211E9A10E9FC59ECBFD74","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/bcvaa.r","placeholder":"https:\/\/www.protocols.io\/img\/extensions\/r.png","original_name":"count_analysis.r"}}],"cases":[],"data":null,"section":null,"section_color":null,"critical":null,"critical_id":null,"duration":0},{"id":824565,"guid":"D3DDEC31825C4757955FA94EE1527BFB","previous_id":824562,"previous_guid":"9FBF25BB74BA4FC58844489A9A4B4209","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"4818293D66BC4B6895E90EE2ABF1B643","order_id":1,"type_id":6,"title":"Section","source":{"title":"Index Preparation"}},{"id":1054724,"guid":"6EA41FF038E74C9EBA652DD62992BFB3","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Prepare cDNA adapter index<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">lastdb -uNEAR -R01 adapter_seqs.fa adapter_seqs.fa<\/div><\/div><\/code><\/pre><\/div><\/div>"}},{"id":1054725,"guid":"20D39CF346E04724A9F99A8C5B8D8DD1","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/5jvjpt6.fa","placeholder":"https:\/\/stage.protocols.io\/img\/extensions\/file.png","original_name":"adapter_seqs.fa"}}],"cases":[],"data":null,"section":null,"section_color":"#A492FF","critical":null,"critical_id":null,"duration":0},{"id":824566,"guid":"F04D4D1928BB46BD84250C4B9C20C9C6","previous_id":824565,"previous_guid":"D3DDEC31825C4757955FA94EE1527BFB","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"6C910027855B4555B963989E2AAB2038","order_id":1,"type_id":6,"title":"Section","source":{"title":"Read Orientation"}},{"id":1054724,"guid":"4182E4AF3F54428DB1046E6423075B87","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Map <\/span><span style = \"font-style:italic;\">demultiplexed reads<\/span><span> to adapter sequences to generate tab-separated file of adapter assignments:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">mkdir mapped<\/div><div class = \"text-block\">(for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do lastal -Q 1 -P 10 adapter_seqs.fa <(pv reads_${bc}.fastq.gz) | \\<\/div><div class = \"text-block\">    maf-convert -n tab | cut -f 2,7,10 | perl -pe \"s\/^\/${bc}\\t\/\";<\/div><div class = \"text-block\"> done) | gzip > adapter_assignments_all.tsv.gz<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#A492FF","critical":null,"critical_id":null,"duration":0},{"id":824567,"guid":"C6072E41910242FE8E88BDDE186317CA","previous_id":824566,"previous_guid":"F04D4D1928BB46BD84250C4B9C20C9C6","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"C13C2A5942E4480B93FA27F64EC3FABF","order_id":1,"type_id":6,"title":"Section","source":{"title":"Read Orientation"}},{"id":1054724,"guid":"5088E7E47B0F40E4B8BC601AB1C3AC1E","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Create 'wide' table indicating adapter assignments. This R script creates files 'adapter_assignments_ideal.csv.gz' and 'adapter_assignments_valid.csv.gz'.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">#!\/usr\/bin\/env Rscript<\/div><div class = \"text-block\">ad.df <- read.delim('adapter_assignments_all.tsv.gz',<\/div><div class = \"text-block\">                    header=FALSE, col.names = c(\"bc\",\"target\",\"query\",\"dir\"),<\/div><div class = \"text-block\">                    stringsAsFactors=FALSE);<\/div><div class = \"text-block\">library(dplyr);<\/div><div class = \"text-block\">library(tidyr);<\/div><div class = \"text-block\">## Create table of adapter additions<\/div><div class = \"text-block\">ad.tbl <- group_by(ad.df, query, bc, target, dir) %>%<\/div><div class = \"text-block\">     summarise() %>%<\/div><div class = \"text-block\">     unite(tdir, target, dir, sep='.') %>% mutate(present=TRUE) %>%<\/div><div class = \"text-block\">    spread(tdir, present, fill=FALSE);<\/div><div class = \"text-block\">## Clean up adapter names<\/div><div class = \"text-block\">colnames(ad.tbl) <- sub(\"\\\\.\\\\-\",\"rev\",colnames(ad.tbl));<\/div><div class = \"text-block\">colnames(ad.tbl) <- sub(\"\\\\.\\\\+\",\"fwd\",colnames(ad.tbl));<\/div><div class = \"text-block\">colnames(ad.tbl) <- sub(\"^ONT_\",\"\",colnames(ad.tbl));<\/div><div class = \"text-block\">## read is considered 'valid' if there is only one SSP primer match<\/div><div class = \"text-block\">ad.valid.tbl <- filter(ad.tbl, (SSPrev | SSPfwd), !(SSPfwd & SSPrev));<\/div><div class = \"text-block\">## read is considered 'ideal' if VNP is in the reverse direction as SSP<\/div><div class = \"text-block\">ad.ideal.tbl <- filter(ad.valid.tbl, (SSPrev & VNPfwd) | (SSPfwd & VNPrev), !(VNPrev & VNPfwd));<\/div><div class = \"text-block\">write.csv(ad.ideal.tbl, row.names=FALSE,<\/div><div class = \"text-block\">  file=gzfile('barcode-adapter_assignments_ideal.csv.gz'), quote=FALSE);<\/div><div class = \"text-block\">write.csv(ad.valid.tbl, row.names=FALSE,<\/div><div class = \"text-block\">  file=gzfile('barcode-adapter_assignments_valid.csv.gz'), quote=FALSE);<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#A492FF","critical":null,"critical_id":null,"duration":0},{"id":824568,"guid":"E9EEC252934B47F0ABDA2132D8113FAB","previous_id":824567,"previous_guid":"C6072E41910242FE8E88BDDE186317CA","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"189C1B2539A24733AF064D7036B3D276","order_id":1,"type_id":6,"title":"Section","source":{"title":"Read Orientation"}},{"id":1054724,"guid":"1A77306AA066426ABFC68F976B2FE248","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Demultiplex barcode-demultiplexed reads by SSP direction.<\/div><div class = \"text-block\">Note that the last four values in the 'wide' table refer to the reverse and forward mappings of the SSP and VNP primers respectively). The reverse reads are reverse-complemented with <\/div><div class = \"text-block\"><a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-rc.pl\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">fastx-rc.pl<\/span><\/a><\/div><div class = \"text-block\">, followed by a final concatenation to simplify the subsequent alignment steps.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">   do echo \"** ${bc}\/fwd **\";<\/div><div class = \"text-block\">   mkdir -p demultiplexed\/${bc};<\/div><div class = \"text-block\">   pv reads_${bc}.fastq.gz | \\<\/div><div class = \"text-block\">     ~\/scripts\/fastx-fetch.pl -i <(zgrep 'FALSE,TRUE,TRUE,FALSE$' barcode-adapter_assignments_ideal.csv.gz | awk -F',' '{print $1}')  | \\<\/div><div class = \"text-block\">  gzip > demultiplexed\/${bc}\/${bc}_reads_fwd.fastq.gz;<\/div><div class = \"text-block\">   echo \"** ${bc}\/rev **\";<\/div><div class = \"text-block\">   pv reads_${bc}.fastq.gz | \\<\/div><div class = \"text-block\">     ~\/scripts\/fastx-fetch.pl -i <(zgrep 'TRUE,FALSE,FALSE,TRUE$' barcode-adapter_assignments_ideal.csv.gz | awk -F',' '{print $1}')  | \\<\/div><div class = \"text-block\">  fastx-rc.pl | gzip > demultiplexed\/${bc}\/${bc}_reads_rev.fastq.gz;<\/div><div class = \"text-block\">   pv demultiplexed\/${bc}\/${bc}_reads_fwd.fastq.gz demultiplexed\/${bc}\/${bc}_reads_rev.fastq.gz | zcat | \\<\/div><div class = \"text-block\">    gzip > demultiplexed\/${bc}\/${bc}_reads_dirAdjusted.fastq.gz;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#A492FF","critical":null,"critical_id":null,"duration":0},{"id":824569,"guid":"E52CDF4B71D64DAB8CCDCF59381B9B54","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"05AAE30EBB6F4D68BD377DF520825306","order_id":1,"type_id":6,"title":"Section","source":{"title":"Barcode Demultiplexing"}},{"id":1054724,"guid":"D97CD7C5689D4805B70E79D092FBFC43","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Demultiplex reads as per protocol <\/div><div class = \"text-block\"><a href=\"https:\/\/dx.doi.org\/10.17504\/protocols.io.55dg826\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Demultiplexing Nanopore reads with LAST<\/span><\/a><\/div><div class = \"text-block\">.<\/div><div class = \"text-block\">If this has been done, then the following command should produce output without errors:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do ls demultiplexed\/reads_${bc}.fq.gz;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Example output:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">demultiplexed\/reads_BC03.fq.gz<\/div><div class = \"text-block\">demultiplexed\/reads_BC04.fq.gz<\/div><div class = \"text-block\">demultiplexed\/reads_BC05.fq.gz<\/div><div class = \"text-block\">demultiplexed\/reads_BC06.fq.gz<\/div><div class = \"text-block\">demultiplexed\/reads_BC07.fq.gz<\/div><div class = \"text-block\">demultiplexed\/reads_BC08.fq.gz<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span>If the <\/span><span style = \"font-style:italic;\">barcode_counts.txt<\/span><span> file is missing, the output will look like this:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">awk: fatal: cannot open file `barcode_counts.txt' for reading (No such file or directory)<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">If one or more of the barcode-demultiplexed files are missing, the output will look something like this:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">demultiplexed\/reads_BC03.fq.gz<\/div><div class = \"text-block\">demultiplexed\/reads_BC04.fq.gz<\/div><div class = \"text-block\">demultiplexed\/reads_BC05.fq.gz<\/div><div class = \"text-block\">ls: cannot access 'demultiplexed\/reads_BC06.fq.gz': No such file or directory<\/div><div class = \"text-block\">ls: cannot access 'demultiplexed\/reads_BC07.fq.gz': No such file or directory<\/div><div class = \"text-block\">demultiplexed\/reads_BC08.fq.gz<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#A492FF","critical":null,"critical_id":null,"duration":0},{"id":824570,"guid":"747510DC4CA24FA9B81822778EA4987C","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"E12DDE42B224469197CE080CE40DCA3D","order_id":1,"type_id":6,"title":"Section","source":{"title":"Demultiplex Reads    "}},{"id":1054724,"guid":"AFF3E96A5E4F45CDAC35F9602D20DFBF","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Demultiplex reads as per the protocol <\/div><div class = \"text-block\"><a href=\"https:\/\/dx.doi.org\/10.17504\/protocols.io.xj3fkqn\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Demultiplexing Nanopore reads with LAST<\/span><\/a><\/div><div class = \"text-block\"><span>. It is expected that these demultiplexed reads will be split up in the current directory, and coupled with a '<\/span><span style = \"font-style:italic;\">barcode_counts.txt<\/span><span>' file. If that's the case, the following should work:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do ls reads_${bc}.fastq.gz;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Example expected output:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">reads_BC03.fastq.gz<\/div><div class = \"text-block\">reads_BC04.fastq.gz<\/div><div class = \"text-block\">reads_BC05.fastq.gz<\/div><div class = \"text-block\">reads_BC06.fastq.gz<\/div><div class = \"text-block\">reads_BC07.fastq.gz<\/div><div class = \"text-block\">reads_BC08.fastq.gz<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span>If the '<\/span><span style = \"font-style:italic;\">barcode_counts.txt<\/span><span>' file is not present, this error will appear:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">awk: fatal: cannot open file `barcode_counts.txt' for reading (No such file or directory)<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">If one or more of the demultiplexed read files is missing, it will look something like this:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">reads_BC03.fastq.gz<\/div><div class = \"text-block\">reads_BC04.fastq.gz<\/div><div class = \"text-block\">ls: cannot access 'reads_BC05.fastq.gz': No such file or directory<\/div><div class = \"text-block\">ls: cannot access 'reads_BC06.fastq.gz': No such file or directory<\/div><div class = \"text-block\">reads_BC07.fastq.gz<\/div><div class = \"text-block\">reads_BC08.fastq.gz<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#94EBFF","critical":null,"critical_id":null,"duration":0},{"id":824571,"guid":"292C6A768CD54A448B23F9C287607D42","previous_id":824573,"previous_guid":"D50FF1F00EBE47E483E926814D668BD1","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"5A15DF19E355472EAB605FDE291AA347","order_id":1,"type_id":6,"title":"Section","source":{"title":"Orienting Reads"}},{"id":1054724,"guid":"F4F63FB6127D4089A8492D304627DE38","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Map the reads to the adapter sequences using the previously defined substitution matrix. In this case it's important that the direction of mapping is also recorded, so the <\/span><span style = \"font-style:italic;\">cut<\/span><span> command selects three fields (query name [7], target name [2], mapping direction [10]):<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo \"** ${bc} **\";<\/div><div class = \"text-block\">  lastal -Q 1 -P10 -p bc.mat adapter_seqs.fa <(pv demultiplexed\/reads_${bc}.fq.gz) | \\<\/div><div class = \"text-block\">    maf-convert -n tab | cut -f 2,7,10 | uniq | \\<\/div><div class = \"text-block\">    gzip > demultiplexed\/adapter_assignments_${bc}.txt.gz<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#84CE84","critical":null,"critical_id":null,"duration":0},{"id":824572,"guid":"4C7F516E8E5C4D6BAB504E81DE5D0647","previous_id":824569,"previous_guid":"E52CDF4B71D64DAB8CCDCF59381B9B54","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"0DB3B4FAF4474900A238CC421EF0CF7E","order_id":1,"type_id":6,"title":"Section","source":{"title":"Index Preparation"}},{"id":1054724,"guid":"F6654FDDDD1F477EAB1DB3FECC981333","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Prepare a FASTA file containing adapter sequences (see attached FASTA file).<\/div><\/div>"}},{"id":1054725,"guid":"9B6D79D09C8411E9A33E8125D100B2D4","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/bkztw.fa","placeholder":"\/img\/extensions\/file.png","original_name":"adapter_seqs.fa"}}],"cases":[],"data":null,"section":null,"section_color":"#94EBFF","critical":null,"critical_id":null,"duration":0},{"id":824573,"guid":"D50FF1F00EBE47E483E926814D668BD1","previous_id":824577,"previous_guid":"0AC354F0EBA711E9AFCF176E7FCC0B79","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"B41C1144A55148AB9BE76BFDF49C56FE","order_id":1,"type_id":6,"title":"Section","source":{"title":"Index Preparation"}},{"id":1054724,"guid":"3AD1C0C0AC8342FBA8E624D0C866915F","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Prepare the LAST index for the adapter file. Following <\/div><div class = \"text-block\"><a href=\"https:\/\/github.com\/mcfrith\/last-rna\/blob\/master\/last-long-reads.md#option-1-prepare-a-genome-without-repeat-masking\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Martin Frith's recommendation<\/span><\/a><\/div><div class = \"text-block\">, the '-uNEAR' seeding scheme is used to slightly increase sensitivity. This will generate seven additional files of the form <index name>.XXX:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">lastdb -uNEAR adapter_seqs.fa adapter_seqs.fa<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#94EBFF","critical":null,"critical_id":null,"duration":0},{"id":824574,"guid":"9A1999CFACD94A1B97343A936CD9CAEC","previous_id":824571,"previous_guid":"292C6A768CD54A448B23F9C287607D42","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"E3814FD86E3B455EA1F64FD04422BFD4","order_id":1,"type_id":6,"title":"Section","source":{"title":"Orienting Reads"}},{"id":1054724,"guid":"787863B9A3414BC5BE48873D8AF02558","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>The adapter assignments are filtered through <\/span><span style = \"font-style:italic;\">uniq<\/span><span> in order to catch (and exclude) any reads with the strand-switch primer matching multiple times. To unpack the <\/span><span style = \"font-style:italic;\">uniq<\/span><span> pipe a little bit more, it skips the first field (adapter name), then matches up to 36 characters, retaining only lines that don't match any others. This catches a few more chimeric reads that were missed by the unique barcode filter in the previous protocol.<\/span><\/div><div class = \"text-block\">Reads are filtered into two groups (and one group-by-omission) based on the mapped direction of the strand-switch primer, then reverse-complemented (if necessary) to match the orientation of the original RNA strand. I use my <\/div><div class = \"text-block\"><a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-fetch.pl\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">fastx-fetch.pl<\/span><\/a><\/div><div class = \"text-block\"> and <\/div><div class = \"text-block\"><a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-rc.pl\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">fastx-rc.pl<\/span><\/a><\/div><div class = \"text-block\"> scripts for this.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">mkdir -p oriented<\/div><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\"> do echo \"** ${bc} **\";<\/div><div class = \"text-block\"> fastx-fetch.pl -i <(zgrep '^SSP' demultiplexed\/adapter_assignments_${bc}.txt.gz | \\<\/div><div class = \"text-block\">     sort | uniq -f 1 -w 36 -u | \\<\/div><div class = \"text-block\">     awk '{if($3 == \"+\"){print $2}}') <(pv demultiplexed\/reads_${bc}.fq.gz) | \\<\/div><div class = \"text-block\">   gzip > oriented\/${bc}_reads_fwd.fq.gz<\/div><div class = \"text-block\"> fastx-fetch.pl -i <(zgrep '^SSP' demultiplexed\/adapter_assignments_${bc}.txt.gz | \\<\/div><div class = \"text-block\">     sort | uniq -f 1 -w 36 -u | \\<\/div><div class = \"text-block\">     awk '{if($3 == \"-\"){print $2}}') <(pv demultiplexed\/reads_${bc}.fq.gz) | \\<\/div><div class = \"text-block\">   fastx-rc.pl | gzip > oriented\/${bc}_reads_rev.fq.gz<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><\/div>"}},{"id":1054725,"guid":"7AB8B1A03BB311E99B905DCA0E5F54D4","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/bdwsa.pl","placeholder":"\/img\/extensions\/file.png","original_name":"fastx-fetch.pl"}},{"id":1054726,"guid":"83CD85E03BB311E99B905DCA0E5F54D4","order_id":3,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/bdwta.pl","placeholder":"\/img\/extensions\/file.png","original_name":"fastx-rc.pl"}}],"cases":[],"data":null,"section":null,"section_color":"#84CE84","critical":null,"critical_id":null,"duration":0},{"id":824575,"guid":"92CAD30FCD694C10A655BD6B3B6638E9","previous_id":824574,"previous_guid":"9A1999CFACD94A1B97343A936CD9CAEC","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"0F96B63318C2445FBB9E9B3E4BA9A599","order_id":1,"type_id":6,"title":"Section","source":{"title":"Orienting Reads"}},{"id":1054724,"guid":"98CCF18DEBEF4B65A41AD6959D886A54","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Forward and reverse-oriented sequences are combined together to form a single group of RNA-oriented reads.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo \"** ${bc} **\";<\/div><div class = \"text-block\">  pv oriented\/${bc}_reads_fwd.fq.gz oriented\/${bc}_reads_rev.fq.gz | \\<\/div><div class = \"text-block\">    zcat | gzip > oriented\/${bc}_reads_dirAdjusted.fq.gz<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#84CE84","critical":null,"critical_id":null,"duration":0},{"id":824576,"guid":"00491C4094054DAE94AEB42D6E97F465","previous_id":824575,"previous_guid":"92CAD30FCD694C10A655BD6B3B6638E9","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"2A518E4F53FF48278BBAA7A0D65454C2","order_id":1,"type_id":6,"title":"Section","source":{"title":"Downstream Workflows"}},{"id":1054724,"guid":"4E0EE0294CF84762A07B90502AE95C32","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Following on from here, the oriented reads can be mapped to a genome (e.g. for visual confirmation of mapping), or to a transcriptome (e.g. for read counting):<\/div><div class = \"text-block\"><a href=\"https:\/\/dx.doi.org\/10.17504\/protocols.io.z9zf976\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Stranded Mapping from Oriented Long Reads<\/span><\/a><\/div><div class = \"text-block\"><a href=\"https:\/\/dx.doi.org\/10.17504\/protocols.io.435gyq6\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Stranded Transcript Count Table Generation from Long Reads<\/span><\/a><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#FFED92","critical":null,"critical_id":null,"duration":0},{"id":824577,"guid":"0AC354F0EBA711E9AFCF176E7FCC0B79","previous_id":824572,"previous_guid":"4C7F516E8E5C4D6BAB504E81DE5D0647","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"9961D5BCF03049899986950A51276146","order_id":1,"type_id":6,"title":"Section","source":{"title":"Index Preparation"}},{"id":1054724,"guid":"A058E2775CED4C6B98E444C26F73767B","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Prepare a substitution matrix for barcode mapping. The default substitution matrix is swayed too much by INDELs in the barcode sequences, so here's one that I've developed using a combination of trial & error and last-train:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">#last -Q 0\n#last -a 10\n#last -A 10\n#last -b 5\n#last -B 5\n#last -S 1\n# score matrix (query letters = columns, reference letters = rows):\n       A      C      G      T\nA      4    -24     -9    -24\nC    -24      5    -24    -14\nG     -9    -24      7    -24\nT    -24    -14    -24      8<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span> \n<\/span><span style = \"font-style:italic;\">[note: this is the same matrix as used for demultiplexing]<\/span><span style = \"font-style:italic;\">\n<\/span><\/div><\/div>"}},{"id":1054725,"guid":"32025430EBA711E9AFCF176E7FCC0B79","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/protocols-files.s3.amazonaws.com\/private\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/bsasjpt6.mat?X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJYFAX46LHRVQMGOA%2F20191010%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20191010T215353Z&X-Amz-SignedHeaders=host&X-Amz-Expires=604800&X-Amz-Signature=661fbe206a7205856f7e93970cb3f3f7738cc798798635ff85206d1d7128bd80","placeholder":"\/img\/extensions\/file.png","original_name":"bc.mat"}}],"cases":[],"data":null,"section":null,"section_color":"#94EBFF","critical":null,"critical_id":null,"duration":0}],"document":null,"materials":[],"description":"<div class = \"text-blocks\"><div class = \"text-block\">This protocol is for preparing long reads for stranded mapping, as an intermediate step for additional protocols:<\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\">Aligning strand-oriented sequences to a transcriptome for transcript \/ gene counting<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Aligning strand-oriented sequences to a genome for confirmatory QC<\/li><\/ul><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Input(s)<\/span><span>: demultiplexed fastq files (see protocol <\/span><a href=\"https:\/\/dx.doi.org\/10.17504\/protocols.io.55dg826\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Demultiplexing Nanopore reads with LAST<\/span><\/a><span>), adapter file (containing strand-sensitive adapter sequences)<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Output(s):<\/span><span> oriented read files, as gzipped fastq files<\/span><\/div><\/div>","changed_on":1570744484}