{"id":22388,"title":"Preparing Reads for Stranded Mapping","title_html":"Preparing Reads for Stranded Mapping","image":{"source":"https:\/\/www.protocols.io\/img\/default_protocol.png","placeholder":"https:\/\/www.protocols.io\/img\/default_protocol.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.z4uf8ww","doi_status":2,"uri":"preparing-reads-for-stranded-mapping-z4uf8ww","type_id":1,"published_on":1555454384,"version_id":0,"created_on":1555453879,"categories":null,"creator":{"name":"David A. Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","username":"david-eccles","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg"},"badges":[{"id":3,"image":{"source":"\/img\/badges\/silver.svg","placeholder":"\/img\/badges\/silver.svg"},"name":"Power author!"},{"id":6,"image":{"source":"\/img\/badges\/socialbutterfly.svg","placeholder":"\/img\/badges\/socialbutterfly.svg"},"name":"Social butterfly"}],"research_interests":null},"journal":null,"journal_name":null,"journal_link":null,"public":1,"has_versions":0,"link":null,"total_collections":0,"number_of_steps":14,"authors":[{"name":"David A. Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","username":"david-eccles","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg"},"badges":[],"research_interests":null}],"versions":[],"groups":[],"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":0,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"steps":[{"id":731381,"guid":"5C2F8DEC59444DA98A79C4981F7135D2","previous_id":731389,"previous_guid":"C95C8F8B2CEB4E7690B016D70C4246EF","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"69073CE6134E4B569105B7F196F18AAA","order_id":1,"type_id":6,"title":"Section","source":{"title":"Index Preparation"}},{"id":1054724,"guid":"DBFEC4EA99394EEC92A8744F1BC4E6A6","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Prepare transcript index (see Guidelines for data sources)<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">lastdb Mus_musculus.GRCm38.cds.all.fa <(zcat Mus_musculus.GRCm38.cds.all.fa.gz)<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":731382,"guid":"C4CDF825D4764175AB11EA3175FFF5B8","previous_id":731387,"previous_guid":"6B9CBF3551324768B1F5C1BE42B3B22A","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"C2441AACB16A4B08A0F64A8E4B60B78B","order_id":1,"type_id":6,"title":"Section","source":{"title":"Transcriptome Mapping"}},{"id":1054724,"guid":"D78768DAB3DC43E08D728F9B589873D6","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Reads are mapped to the transcriptome with LAST.<\/div><div class = \"text-block\"><span>The results of that mapping can be piped through <\/span><span style = \"font-style:italic;\">last-map-probs<\/span><span> to exclude unlikely hits, then through '<\/span><span style = \"font-style:italic;\">maf-convert -n tab'<\/span><span> to convert to a one-line-per-mapping CSV format. This CSV format is further processed to make sure that there is only one mapping per transcript-read pair, and then aggregated to sum up counts per transcript.<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">mkdir -p mapped<\/div><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo \"** ${bc} **\";<\/div><div class = \"text-block\">  lastal -Q 1 -P 10 Mus_musculus.GRCm38.cds.all.fa <(pv demultiplexed\/${bc}\/${bc}_reads_dirAdjusted.fastq.gz | zcat) | \\<\/div><div class = \"text-block\">    last-map-probs | maf-convert -n tab | cut -f 2,7,10 | sort | uniq | \\<\/div><div class = \"text-block\">    awk -F'\\t' -v \"bc=${bc}\" '{print bc,$1,$3}' | sort | uniq -c | gzip > mapped\/trnCounts_LAST_${bc}_vs_Mmus_transcriptome.txt.gz;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":731383,"guid":"0D93F53B7EA341DDA4C7894FC41BEFBB","previous_id":731382,"previous_guid":"C4CDF825D4764175AB11EA3175FFF5B8","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"B8EE88973B3749F492D19F60BA21042E","order_id":1,"type_id":6,"title":"Section","source":{"title":"Annotation and Result generation"}},{"id":1054724,"guid":"85AADF064DA24EB39CB79CD6CD50C247","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Transcript counts are merged with ensembl gene annotation, then converted into wide format (one line per transcript) using an R script.<\/div><div class = \"text-block\">The transcript annotation in this case is from ensembl BioMart (see Guidelines for more details).<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">barcode_counts.txt#!\/usr\/bin\/env Rscript<\/div><div class = \"text-block\">library(dplyr);<\/div><div class = \"text-block\">library(tidyr);<\/div><div class = \"text-block\">## load ensemble transcript metadata (including gene name)<\/div><div class = \"text-block\">ensembl.df <- as.tbl(read.delim('ensembl_mm10_geneFeatureLocations.txt.gz',                          <\/div><div class = \"text-block\">  col.names=c('transcript','Description','Start','End',<\/div><div class = \"text-block\">              'Strand','Gene','Chr'),<\/div><div class = \"text-block\">  stringsAsFactors=FALSE));<\/div><div class = \"text-block\">ensembl.df$Description <- sub(' \\\\[.*$','',ensembl.df$Description);<\/div><div class = \"text-block\">ensembl.df$Description <- sub('^(.{50}).+$','\\\\1...',ensembl.df$Description);<\/div><div class = \"text-block\">ensembl.df[,1:7] <- ensembl.df[,c(1,7,5,3,4,2,6)];<\/div><div class = \"text-block\">colnames(ensembl.df)[1:7] <- colnames(ensembl.df)[c(1,7,5,3,4,2,6)];<\/div><div class = \"text-block\">options(scipen=15); ## don't show scientific notation for large positions<\/div><div class = \"text-block\">## load used barcode identifiers<\/div><div class = \"text-block\">bcNames <- read.table(\"barcode_counts.txt\", stringsAsFactors=FALSE)[,2];<\/div><div class = \"text-block\">## load count data into 'narrow' array (one line per count)<\/div><div class = \"text-block\">trn.counts <- tibble(); for(bc in bcNames){<\/div><div class = \"text-block\">  trn.counts <-<\/div><div class = \"text-block\">    bind_rows(trn.counts,<\/div><div class = \"text-block\">      as.tbl(read.table(<\/div><div class = \"text-block\">        sprintf('mapped\/trnCounts_LAST_%s_vs_Mmus_transcriptome.txt.gz', bc),<\/div><div class = \"text-block\">        col.names=c('count','barcode','transcript','dir'),<\/div><div class = \"text-block\">        stringsAsFactors=FALSE)));<\/div><div class = \"text-block\">}<\/div><div class = \"text-block\">## remove revision number from transcript names (if present)<\/div><div class = \"text-block\">trn.counts$transcript <- sub('\\\\.[0-9]+$','',trn.counts$transcript);<\/div><div class = \"text-block\">## convert to wide format (one line per transcript)<\/div><div class = \"text-block\">trn.counts.wide <- spread(trn.counts, barcode, count) %>%<\/div><div class = \"text-block\">  mutate(dir = c('+'='fwd', '-'='rev')[dir]);<\/div><div class = \"text-block\">for(bd in colnames(trn.counts.wide[,-1])){<\/div><div class = \"text-block\">  trn.counts.wide[[bd]] <- replace_na(trn.counts.wide[[bd]],0);<\/div><div class = \"text-block\">}<\/div><div class = \"text-block\">## merge ensembl metadata with transcript counts<\/div><div class = \"text-block\">gene.counts.wide <- inner_join(ensembl.df, trn.counts.wide, by='transcript');<\/div><div class = \"text-block\">gene.counts.wide <- gene.counts.wide[order(-rowSums(gene.counts.wide[,-(1:8)])),];<\/div><div class = \"text-block\">## write result out to a file<\/div><div class = \"text-block\">write.csv(gene.counts.wide, file='wide_transcript_counts_LAST.csv', <\/div><div class = \"text-block\">  row.names=FALSE);<\/div><\/div><\/code><\/pre><\/div><\/div>"}},{"id":1054725,"guid":"02C0C1202B2211E9A10E9FC59ECBFD74","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/bcvaa.r","placeholder":"https:\/\/www.protocols.io\/img\/extensions\/r.png","original_name":"count_analysis.r"}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":731384,"guid":"1C9AFE6463344C0AA50DC40C5767CF4C","previous_id":731381,"previous_guid":"5C2F8DEC59444DA98A79C4981F7135D2","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"0B591877622248C9AAF116E814B30231","order_id":1,"type_id":6,"title":"Section","source":{"title":"Index Preparation"}},{"id":1054724,"guid":"BE47A431F08C4977A0047090D60BC3D6","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Prepare cDNA adapter index<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">lastdb -uNEAR -R01 adapter_seqs.fa adapter_seqs.fa<\/div><\/div><\/code><\/pre><\/div><\/div>"}},{"id":1054725,"guid":"20D39CF346E04724A9F99A8C5B8D8DD1","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/5jvjpt6.fa","placeholder":"https:\/\/stage.protocols.io\/img\/extensions\/file.png","original_name":"adapter_seqs.fa"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":731385,"guid":"C8A425F241454BBE90059BF29CA8CE56","previous_id":731384,"previous_guid":"1C9AFE6463344C0AA50DC40C5767CF4C","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"8F79A9CD8574443BBB5A2CCEA16156F7","order_id":1,"type_id":6,"title":"Section","source":{"title":"Read Orientation"}},{"id":1054724,"guid":"DD1F5083733C4CA1B7C806AF0B9C2290","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Map <\/span><span style = \"font-style:italic;\">demultiplexed reads<\/span><span> to adapter sequences to generate tab-separated file of adapter assignments:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">mkdir mapped<\/div><div class = \"text-block\">(for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do lastal -Q 1 -P 10 adapter_seqs.fa <(pv reads_${bc}.fastq.gz) | \\<\/div><div class = \"text-block\">    maf-convert -n tab | cut -f 2,7,10 | perl -pe \"s\/^\/${bc}\\t\/\";<\/div><div class = \"text-block\"> done) | gzip > adapter_assignments_all.tsv.gz<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":731386,"guid":"7EFE470E9AF74374B9EEF680DABD41E2","previous_id":731385,"previous_guid":"C8A425F241454BBE90059BF29CA8CE56","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"03CC7DD089A44173A555C94B33D17E79","order_id":1,"type_id":6,"title":"Section","source":{"title":"Read Orientation"}},{"id":1054724,"guid":"66B7D66363DC44A38A5773102E672659","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Create 'wide' table indicating adapter assignments. This R script creates files 'adapter_assignments_ideal.csv.gz' and 'adapter_assignments_valid.csv.gz'.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">#!\/usr\/bin\/env Rscript<\/div><div class = \"text-block\">ad.df <- read.delim('adapter_assignments_all.tsv.gz',<\/div><div class = \"text-block\">                    header=FALSE, col.names = c(\"bc\",\"target\",\"query\",\"dir\"),<\/div><div class = \"text-block\">                    stringsAsFactors=FALSE);<\/div><div class = \"text-block\">library(dplyr);<\/div><div class = \"text-block\">library(tidyr);<\/div><div class = \"text-block\">## Create table of adapter additions<\/div><div class = \"text-block\">ad.tbl <- group_by(ad.df, query, bc, target, dir) %>%<\/div><div class = \"text-block\">     summarise() %>%<\/div><div class = \"text-block\">     unite(tdir, target, dir, sep='.') %>% mutate(present=TRUE) %>%<\/div><div class = \"text-block\">    spread(tdir, present, fill=FALSE);<\/div><div class = \"text-block\">## Clean up adapter names<\/div><div class = \"text-block\">colnames(ad.tbl) <- sub(\"\\\\.\\\\-\",\"rev\",colnames(ad.tbl));<\/div><div class = \"text-block\">colnames(ad.tbl) <- sub(\"\\\\.\\\\+\",\"fwd\",colnames(ad.tbl));<\/div><div class = \"text-block\">colnames(ad.tbl) <- sub(\"^ONT_\",\"\",colnames(ad.tbl));<\/div><div class = \"text-block\">## read is considered 'valid' if there is only one SSP primer match<\/div><div class = \"text-block\">ad.valid.tbl <- filter(ad.tbl, (SSPrev | SSPfwd), !(SSPfwd & SSPrev));<\/div><div class = \"text-block\">## read is considered 'ideal' if VNP is in the reverse direction as SSP<\/div><div class = \"text-block\">ad.ideal.tbl <- filter(ad.valid.tbl, (SSPrev & VNPfwd) | (SSPfwd & VNPrev), !(VNPrev & VNPfwd));<\/div><div class = \"text-block\">write.csv(ad.ideal.tbl, row.names=FALSE,<\/div><div class = \"text-block\">  file=gzfile('barcode-adapter_assignments_ideal.csv.gz'), quote=FALSE);<\/div><div class = \"text-block\">write.csv(ad.valid.tbl, row.names=FALSE,<\/div><div class = \"text-block\">  file=gzfile('barcode-adapter_assignments_valid.csv.gz'), quote=FALSE);<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":731387,"guid":"6B9CBF3551324768B1F5C1BE42B3B22A","previous_id":731386,"previous_guid":"7EFE470E9AF74374B9EEF680DABD41E2","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"9B9ED34C77714C408B97DBF23CAD8789","order_id":1,"type_id":6,"title":"Section","source":{"title":"Read Orientation"}},{"id":1054724,"guid":"4BBC949A7D7E4D169957CB4ACC81F89E","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Demultiplex barcode-demultiplexed reads by SSP direction.<\/div><div class = \"text-block\">Note that the last four values in the 'wide' table refer to the reverse and forward mappings of the SSP and VNP primers respectively). The reverse reads are reverse-complemented with <\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">fastx-rc.pl<\/span><\/a><\/div><div class = \"text-block\">, followed by a final concatenation to simplify the subsequent alignment steps.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">   do echo \"** ${bc}\/fwd **\";<\/div><div class = \"text-block\">   mkdir -p demultiplexed\/${bc};<\/div><div class = \"text-block\">   pv reads_${bc}.fastq.gz | \\<\/div><div class = \"text-block\">     ~\/scripts\/fastx-fetch.pl -i <(zgrep 'FALSE,TRUE,TRUE,FALSE$' barcode-adapter_assignments_ideal.csv.gz | awk -F',' '{print $1}')  | \\<\/div><div class = \"text-block\">  gzip > demultiplexed\/${bc}\/${bc}_reads_fwd.fastq.gz;<\/div><div class = \"text-block\">   echo \"** ${bc}\/rev **\";<\/div><div class = \"text-block\">   pv reads_${bc}.fastq.gz | \\<\/div><div class = \"text-block\">     ~\/scripts\/fastx-fetch.pl -i <(zgrep 'TRUE,FALSE,FALSE,TRUE$' barcode-adapter_assignments_ideal.csv.gz | awk -F',' '{print $1}')  | \\<\/div><div class = \"text-block\">  fastx-rc.pl | gzip > demultiplexed\/${bc}\/${bc}_reads_rev.fastq.gz;<\/div><div class = \"text-block\">   pv demultiplexed\/${bc}\/${bc}_reads_fwd.fastq.gz demultiplexed\/${bc}\/${bc}_reads_rev.fastq.gz | zcat | \\<\/div><div class = \"text-block\">    gzip > demultiplexed\/${bc}\/${bc}_reads_dirAdjusted.fastq.gz;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":731388,"guid":"EA7DA5D4E9F04F24820D148ACBF4AED3","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"40781D69F3CA42E6BC3BAE45BF5BCE97","order_id":1,"type_id":6,"title":"Section","source":{"title":"Barcode Demultiplexing"}},{"id":1054724,"guid":"5D66918A86EE4051A4F6112A30108B1A","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Demultiplex reads as per protocol <\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Demultiplexing Nanopore reads with LAST<\/span><\/a><\/div><div class = \"text-block\">.<\/div><div class = \"text-block\">If this has been done, then the following command should produce output without errors:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt); do ls reads_${bc}.fastq.gz; done<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Example output:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">reads_BC03.fastq.gz<\/div><div class = \"text-block\">reads_BC04.fastq.gz<\/div><div class = \"text-block\">reads_BC05.fastq.gz<\/div><div class = \"text-block\">reads_BC06.fastq.gz<\/div><div class = \"text-block\">reads_BC07.fastq.gz<\/div><div class = \"text-block\">reads_BC08.fastq.gz<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span>If the <\/span><span style = \"font-style:italic;\">barcode_counts.txt<\/span><span> file is missing, the output will look like this:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">awk: fatal: cannot open file `barcode_counts.txt' for reading (No such file or directory)<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">If one or more of the barcode-demultiplexed files are missing, the output will look something like this:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">reads_BC03.fastq.gz<\/div><div class = \"text-block\">reads_BC04.fastq.gz<\/div><div class = \"text-block\">reads_BC05.fastq.gz<\/div><div class = \"text-block\">ls: cannot access 'reads_BC06.fastq.gz': No such file or directory<\/div><div class = \"text-block\">ls: cannot access 'reads_BC07.fastq.gz': No such file or directory<\/div><div class = \"text-block\">reads_BC08.fastq.gz<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#94EBFF"},{"id":731389,"guid":"C95C8F8B2CEB4E7690B016D70C4246EF","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"391BD449EF874C5E8423A3000C4D6932","order_id":1,"type_id":6,"title":"Section","source":{"title":"Demultiplex Reads    "}},{"id":1054724,"guid":"35F38390B87F47D1B83E5B3161AE7472","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Demultiplex reads as per the protocol <\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Demultiplexing Nanopore reads with LAST<\/span><\/a><\/div><div class = \"text-block\"><span>. It is expected that these demultiplexed reads will be split up in the current directory, and coupled with a '<\/span><span style = \"font-style:italic;\">barcode_counts.txt<\/span><span>' file. If that's the case, the following should work:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do ls reads_${bc}.fastq.gz;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Example expected output:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">reads_BC03.fastq.gz<\/div><div class = \"text-block\">reads_BC04.fastq.gz<\/div><div class = \"text-block\">reads_BC05.fastq.gz<\/div><div class = \"text-block\">reads_BC06.fastq.gz<\/div><div class = \"text-block\">reads_BC07.fastq.gz<\/div><div class = \"text-block\">reads_BC08.fastq.gz<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span>If the '<\/span><span style = \"font-style:italic;\">barcode_counts.txt<\/span><span>' file is not present, this error will appear:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">awk: fatal: cannot open file `barcode_counts.txt' for reading (No such file or directory)<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">If one or more of the demultiplexed read files is missing, it will look something like this:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">reads_BC03.fastq.gz<\/div><div class = \"text-block\">reads_BC04.fastq.gz<\/div><div class = \"text-block\">ls: cannot access 'reads_BC05.fastq.gz': No such file or directory<\/div><div class = \"text-block\">ls: cannot access 'reads_BC06.fastq.gz': No such file or directory<\/div><div class = \"text-block\">reads_BC07.fastq.gz<\/div><div class = \"text-block\">reads_BC08.fastq.gz<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#94EBFF"},{"id":731390,"guid":"5B207B5A168A45B68D0D7F4E558FF2FE","previous_id":731392,"previous_guid":"217985AB736A49F3AF3F3FDDF6D76FA7","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"C62B680B25DD414483B63E28D98AAB5F","order_id":1,"type_id":6,"title":"Section","source":{"title":"Orienting Reads"}},{"id":1054724,"guid":"41ED5A196C444D69ACEFD928A4CDAFA4","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Map the reads to the adapter sequences. In this case it's important that the direction of mapping is also recorded, so the <\/span><span style = \"font-style:italic;\">cut<\/span><span> command selects three fields (query name [7], target name [2], mapping direction [10]):<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo \"** ${bc} **\";<\/div><div class = \"text-block\">  lastal -Q 1 -P10 adapter_seqs.fa <(pv reads_${bc}.fastq.gz) | \\<\/div><div class = \"text-block\">    maf-convert -n tab | cut -f 2,7,10 | uniq | \\<\/div><div class = \"text-block\">    gzip > adapter_assignments_${bc}.txt.gz<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#94EBFF"},{"id":731391,"guid":"65D20190923A4EDD8C661D9A4AF79EF3","previous_id":731388,"previous_guid":"EA7DA5D4E9F04F24820D148ACBF4AED3","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"DFF7847C4AEE4E7B9CD1C251A7E0DF0D","order_id":1,"type_id":6,"title":"Section","source":{"title":"Adapter Mapping"}},{"id":1054724,"guid":"46B6DF4F38B14DCB98144C8AD87340FB","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Prepare a FASTA file containing adapter sequences (see attached FASTA file).<\/div><\/div>"}},{"id":1054725,"guid":"3D4ECA20609811E9A5B9E1D54721609E","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/bfxxjpt6.fa","placeholder":"\/img\/extensions\/file.png","original_name":"adapter_seqs.fa"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":731392,"guid":"217985AB736A49F3AF3F3FDDF6D76FA7","previous_id":731391,"previous_guid":"65D20190923A4EDD8C661D9A4AF79EF3","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"115B0392FF884F89AEA6C5C953D61A11","order_id":1,"type_id":6,"title":"Section","source":{"title":"Adapter Mapping"}},{"id":1054724,"guid":"34249AAE26EB48D0A74451A45FF16EDD","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Prepare the LAST index for the adapter file. This will generate seven additional files of the form <index name>.XXX:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">lastdb adapter_seqs.fa adapter_seqs.fa<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":731393,"guid":"39AEAFDAE89149948696A7CD05F8C9E7","previous_id":731390,"previous_guid":"5B207B5A168A45B68D0D7F4E558FF2FE","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"FCE27EAF60B640CD96D90E3B12A2DD02","order_id":1,"type_id":6,"title":"Section","source":{"title":"Orienting Reads"}},{"id":1054724,"guid":"762524A5B2E945B099E3BB4362CDEBED","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Reads are filtered into two groups (and one group-by-omission) based on the mapped direction of the strand-switch primer, then reverse-complemented (if necessary) to match the orientation of the original RNA strand. I use my <\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">fastx-fetch.pl<\/span><\/a><\/div><div class = \"text-block\"> and <\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">fastx-rc.pl<\/span><\/a><\/div><div class = \"text-block\"> scripts for this.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">mkdir -p oriented<\/div><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo \"** ${bc} **\";<\/div><div class = \"text-block\">  fastx-fetch.pl -i <(zgrep 'SSP' adapter_assignments_${bc}.txt.gz | awk '{if($3 == \"+\"){print $2}}') <(pv reads_${bc}.fastq.gz) | \\<\/div><div class = \"text-block\">    gzip > oriented\/${bc}_reads_fwd.fastq.gz<\/div><div class = \"text-block\">  fastx-fetch.pl -i <(zgrep 'SSP' adapter_assignments_${bc}.txt.gz | awk '{if($3 == \"-\"){print $2}}') <(pv reads_${bc}.fastq.gz) | \\<\/div><div class = \"text-block\">    fastx-rc.pl | gzip > oriented\/${bc}_reads_rev.fastq.gz<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><\/div>"}},{"id":1054725,"guid":"7AB8B1A03BB311E99B905DCA0E5F54D4","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/bdwsa.pl","placeholder":"\/img\/extensions\/file.png","original_name":"fastx-fetch.pl"}},{"id":1054726,"guid":"83CD85E03BB311E99B905DCA0E5F54D4","order_id":3,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/bdwta.pl","placeholder":"\/img\/extensions\/file.png","original_name":"fastx-rc.pl"}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":731394,"guid":"9B0D3F489F294885808D4741891C39FB","previous_id":731393,"previous_guid":"39AEAFDAE89149948696A7CD05F8C9E7","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"45A7C6513B6446AA93CB2858597D2FB1","order_id":1,"type_id":6,"title":"Section","source":{"title":"Orienting Reads"}},{"id":1054724,"guid":"6CCE5865232F4D52B8CC3A462BC3154C","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Forward and reverse-oriented sequences are combined together to form a single group of RNA-oriented reads.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo \"** ${bc} **\";<\/div><div class = \"text-block\">  pv oriented\/${bc}_reads_fwd.fastq.gz oriented\/${bc}_reads_rev.fastq.gz | \\<\/div><div class = \"text-block\">    zcat | gzip > oriented\/${bc}_reads_dirAdjusted.fastq.gz<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null}],"materials":[],"description":"<div class = \"text-blocks\"><div class = \"text-block\">This protocol is for preparing long reads for stranded mapping, as an intermediate step for additional protocols:<\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\">Aligning strand-oriented sequences to a transcriptome for transcript \/ gene counting<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Aligning strand-oriented sequences to a genome for confirmatory QC<\/li><\/ul><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Input(s)<\/span><span>: demultiplexed fastq files (see protocol <\/span><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Demultiplexing Nanopore reads with LAST<\/span><\/a><span>), adapter file (containing strand-sensitive adapter sequences)<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Output(s):<\/span><span> oriented read files, as gzipped fastq files<\/span><\/div><\/div>","changed_on":1555454384}