{"uri":"transcript-coverage-analysis-from-long-reads-retd3en","version_id":"0","protocol_name":"Transcript Coverage Analysis from Long Reads","protocol_name_html":"Transcript Coverage Analysis from Long Reads","is_prepublished":"0","can_edit":"0","parent_id":null,"api_version":"1","is_new_mode":"0","last_modified":"1530495933","type_id":"1","link":null,"fork_id":"","public_fork_note":"","number_of_steps":"9","has_versions":"1","first_published_date":"1530495933","publish_date":"2018-07-02 01:45:33","documents":null,"have_protocol_in_step":"0","is_protocol_in_step":"0","vendor_name":"Contributed by users","vendor_link":"https:\/\/www.protocols.io","vendor_logo":"\/img\/vendors\/1.png","mod_mins":"-1","mod_secs":"27","description":"<p>This protocol is for comparing two different samples at the transcript level, using long reads that are mapped to transcripts.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input(s)<\/strong>: stranded fastq files (see steps 1-8 of <a href=\"https:\/\/dx.doi.org\/10.17504\/protocols.io.n8ddhs6\" target=\"_blank\" rel=\"noopener noreferrer\">Stranded Mapping from Long Reads<\/a>), transcript reference fasta file, annotation file<\/p>\n<p>\u00a0<\/p>\n<p><strong>Output(s):<\/strong> transcript table, sorted by differential coverage, annotated with gene name \/ description \/ location<\/p>","is_bookmarked":"0","can_reassign":"1","before_start":"<p>Obtain a transcript fasta file, and an annotation file. For the mouse genome, I use the following files:<\/p>\n<p>\u00a0<\/p>\n<ol>\n<li>Transcript [CDS] sequences from <a href=\"http:\/\/asia.ensembl.org\/Mus_musculus\/Info\/Index\" target=\"_blank\" rel=\"noopener noreferrer\">Ensembl<\/a>; <a href=\"ftp:\/\/ftp.ensembl.org\/pub\/release-92\/fasta\/mus_musculus\/cds\/Mus_musculus.GRCm38.cds.all.fa.gz\" target=\"_blank\" rel=\"noopener noreferrer\">this file<\/a> is the most current at the time this protocol was created.<\/li>\n<li>Annotation file obtained from <a href=\"http:\/\/asia.ensembl.org\/biomart\/martview\" target=\"_blank\" rel=\"noopener noreferrer\">Ensembl BioMart<\/a> (Ensembl Genes -&gt; Mouse Genes) as a compressed TSV file with the following attribute columns:\n<ul>\n<li>\n<div>Transcript stable ID<\/div>\n<\/li>\n<li>\n<div>Gene description<\/div>\n<\/li>\n<li>\n<div>Gene start (bp)<\/div>\n<\/li>\n<li>\n<div>Gene end (bp)<\/div>\n<\/li>\n<li>\n<div>Strand<\/div>\n<\/li>\n<li>\n<div>Gene name<\/div>\n<\/li>\n<li>\n<div>Chromosome\/scaffold name<\/div>\n<\/li>\n<\/ul>\n<\/li>\n<\/ol>","has_guidelines":"0","materials":[],"warning":null,"version_class":"13491","public":"1","is_owner":"1","is_original_owner":"1","created_on":"1530491421","protocol_affiliation":"Malaghan Institute of Medical Research (NZ)","affiliation":"Malaghan Institute of Medical Research (NZ)","doi":"dx.doi.org\/10.17504\/protocols.io.retd3en","doi_status":"2","changed_fork_steps":null,"profile_url":"DavidEccles-y2138443y2","protocol_img":"https:\/\/www.protocols.io\/img\/default_protocol.png","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","full_name":"David Eccles","created_by":"David Eccles","private_link":"CAA6A8DED37B4827BAB9F748617D49D2","original_img":"1","username":"david-eccles","is_retracted":"0","retraction_reason":null,"plos_id":null,"manuscript_citation":null,"journal_name":null,"is_donations_disabled":"0","is_donations_disabled_by_user":"9","item_record_id":327565,"fork_info":[],"compare_forks":[],"protocols":[],"groups":[{"group_id":"269","group_uri":"awesome-DNA-from-all-kingdoms-of-life","group_name":"MinION user group for high molecular weight DNA extraction from all kingdoms","group_logo":"https:\/\/s3.amazonaws.com\/pr-journal\/ftfb5nw.jpg","requested_uid":null,"request_flag":null,"my_request":"0"}],"number_of_shared_runs":[],"ownership_history":[],"keywords":"","transfer_to_user":[],"sub_transfer":false,"is_transfer_pending":false,"number_of_bookmarks":"0","collections":[],"tags":[{"tag_id":"454","tag_name":"bioinformatics"},{"tag_id":"643","tag_name":"long read sequencing"},{"tag_id":"893","tag_name":"cDNA"},{"tag_id":"2065","tag_name":"nanopore"},{"tag_id":"2213","tag_name":"differential expression"}],"archived":0,"sub_authors":[],"sub_protocols_number":0,"can_edit_shared":0,"shared_runs":[],"is_shared_run":0,"is_shared":1,"banner":null,"contact_badges":[{"badge_id":"2","badge_image":"\/img\/badges\/bronze.svg","badge_description":"Author!"},{"badge_id":"6","badge_image":"\/img\/badges\/socialbutterfly.svg","badge_description":"Social butterfly"}],"number_of_comments":0,"is_locked":0,"is_locked_by":false,"authors":"David Eccles","authors_list":[{"name":"David Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","username":"david-eccles","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg"}],"user":{"profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","username":"david-eccles","full_name":"David Eccles","created_by":"David Eccles"},"access":{"can_view":"1","can_remove":"0","can_add":"0","can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":"0","can_move":"1","can_transfer":"1","can_download":"1","is_locked":"0"},"is_contact_suspended":0,"guidelines":null,"status_id":"2","is_research":"1","status_info":"We are still developing and optimizing this protocol","steps":[{"id":"641696","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"EE84355D8D034CB3855FD01B551C6E41","previous_guid":null,"previous_id":"0","last_modified":"1530493246","components":[{"component_id":"1141728","previous_id":0,"original_id":"0","guid":"4A2FD86C2289415D8031133C9263B5B0","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Transcriptome Mapping","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Transcriptome Mapping"},"is_project":0},{"component_id":"1141727","previous_id":"1141728","original_id":"0","guid":"080A66D41A604C25B2EF5D94C8CF79CB","previous_guid":"4A2FD86C2289415D8031133C9263B5B0","component_type_id":"1","data_id":null,"data":"","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":""},"is_project":0},{"component_id":"1141729","previous_id":"1141727","original_id":"0","guid":"E80408162A7241F4890E1C64A244B9B5","previous_guid":"080A66D41A604C25B2EF5D94C8CF79CB","component_type_id":"8","data_id":"326","data":"","order_id":"2","name":"Software package","data_by_id":"1","type_id":"8","source_data":{"id":"326","name":"LAST","developer":"Martin Frith","repository":"http:\/\/last.cbrc.jp\/last\/","link":"http:\/\/last.cbrc.jp\/","os_name":"Debian GNU\/Linux","os_version":"","version":"","can_edit":"1"},"is_project":0},{"component_id":"1141730","previous_id":"1141729","original_id":"0","guid":"DE921E84A3A447458D825EB078D9250E","previous_guid":"E80408162A7241F4890E1C64A244B9B5","component_type_id":"15","data_id":"4231","data":"","order_id":"3","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"lastdb Mus_musculus.GRCm38.cds.all.fa <(zcat Mus_musculus.GRCm38.cds.all.fa.gz)","description":"Create the transcriptome index from the transcriptome fasta file using lastdb. An anonymous pipe is used \"<()\" to avoid the need to decompress the file for index generation.","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"641697","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"F4B2CFB050F2429AA22A15A73106D694","previous_guid":"EE84355D8D034CB3855FD01B551C6E41","previous_id":"641696","last_modified":"1530494678","components":[{"component_id":"1141732","previous_id":0,"original_id":"0","guid":"6438B49875214ED499A2A4BF04E62A8F","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Transcriptome Mapping","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Transcriptome Mapping"},"is_project":0},{"component_id":"1141731","previous_id":"1141732","original_id":"0","guid":"CF8445AE5804437D864F9E248C7DC237","previous_guid":"6438B49875214ED499A2A4BF04E62A8F","component_type_id":"1","data_id":null,"data":"<p>Map the reads to the Mmus transcripts with LAST.<\/p>\n<p>\u00a0<\/p>\n<p>The results of that mapping can be piped through <em>last-map-probs<\/em> to exclude unlikely hits, then through my <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/maf_bcsplit.pl\" target=\"_blank\" rel=\"noopener noreferrer\">maf_bcsplit.pl<\/a> script to convert to a one-line-per-mapping CSV format. This CSV format is further processed to make sure that there is only one mapping per transcript-read pair, and then aggregated to sum up counts per transcript.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Map the reads to the Mmus transcripts with LAST.<\/p>\n<p>\u00a0<\/p>\n<p>The results of that mapping can be piped through <em>last-map-probs<\/em> to exclude unlikely hits, then through my <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/maf_bcsplit.pl\" target=\"_blank\" rel=\"noopener noreferrer\">maf_bcsplit.pl<\/a> script to convert to a one-line-per-mapping CSV format. This CSV format is further processed to make sure that there is only one mapping per transcript-read pair, and then aggregated to sum up counts per transcript.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"1141733","previous_id":"1141731","original_id":"0","guid":"6C089EB3B3D741828BB80C947E4E1122","previous_guid":"CF8445AE5804437D864F9E248C7DC237","component_type_id":"15","data_id":"4232","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"for id in \"fwd_4T1_BC06\" \"rev_4T1_BC06\" \"fwd_4T1_BC07\" \"rev_4T1_BC07\"\n  do lastal Mus_musculus.GRCm38.cds.all.fa <(pv ${id}.correctedReads.uniqueOnly.fasta.gz | zcat) | \\\n    last-map-probs | ~\/scripts\/maf_bcsplit.pl | awk -F',' '{print $1,$2,$3}' | sort | \\\n    uniq | awk '{print $2,$3}' | sort | uniq -c > trnCounts_LAST_${id}_vs_Mmus_transcriptome.txt\ndone","description":"LAST mapping; probable hit filtering, read counting, and conversion to count file","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"641700","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"60610D79FF6A4984B88AF21BD4A3959F","previous_guid":"F4B2CFB050F2429AA22A15A73106D694","previous_id":"641697","last_modified":"1530494884","components":[{"component_id":"1141740","previous_id":0,"original_id":"0","guid":"FA8F962DED084C7BA618A37A3233D4B2","previous_guid":null,"component_type_id":"1","data_id":null,"data":"<p>Transcript counts are converted into a narrow table (one line per transcript\/count\/barcode tuple) that includes strand direction and a barcode tag:<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-java\"><code>trnCounts &lt;- lapply(c(\"fwd_4T1_BC06\", \"rev_4T1_BC06\",\n                      \"fwd_4T1_BC07\", \"rev_4T1_BC07\"),\n                    function(x){\n                        res &lt;- read.table(sprintf((\"trnCounts_%s_vs_Mmus_transcriptome.txt\"),\n                                                  x), stringsAsFactors=FALSE,\n                                          col.names=c(\"Count\",\"Transcript\",\n                                                      \"Direction\"));\n                        if(grepl(\"rev\",x)){\n                            res$Direction = c(\"-\" = \"+\", \"+\" = \"-\")[res$Direction];\n                        }\n                        res$DB &lt;- paste0(sub(\"..._4T1_\",\"\",x), res$Direction);\n                        return(res);\n                    });\ntrnCounts &lt;- rbind(trnCounts[[1]],trnCounts[[2]],trnCounts[[3]],trnCounts[[4]]);<\/code><\/pre>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Transcript counts are converted into a narrow table (one line per transcript\/count\/barcode tuple) that includes strand direction and a barcode tag:<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-java\"><code>trnCounts &lt;- lapply(c(\"fwd_4T1_BC06\", \"rev_4T1_BC06\",\n                      \"fwd_4T1_BC07\", \"rev_4T1_BC07\"),\n                    function(x){\n                        res &lt;- read.table(sprintf((\"trnCounts_%s_vs_Mmus_transcriptome.txt\"),\n                                                  x), stringsAsFactors=FALSE,\n                                          col.names=c(\"Count\",\"Transcript\",\n                                                      \"Direction\"));\n                        if(grepl(\"rev\",x)){\n                            res$Direction = c(\"-\" = \"+\", \"+\" = \"-\")[res$Direction];\n                        }\n                        res$DB &lt;- paste0(sub(\"..._4T1_\",\"\",x), res$Direction);\n                        return(res);\n                    });\ntrnCounts &lt;- rbind(trnCounts[[1]],trnCounts[[2]],trnCounts[[3]],trnCounts[[4]]);<\/code><\/pre>"},"is_project":0},{"component_id":"1141741","previous_id":"1141740","original_id":"0","guid":"4D797CF44C9D4A0A8E06E6E3A86FFA3D","previous_guid":"FA8F962DED084C7BA618A37A3233D4B2","component_type_id":"6","data_id":"0","data":"Data Cleaning (R script)","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Data Cleaning (R script)"},"is_project":0}]},{"id":"641702","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"1ADF33EBB6954F5E8B68B03538AD7AC9","previous_guid":"60610D79FF6A4984B88AF21BD4A3959F","previous_id":"641700","last_modified":"1530494992","components":[{"component_id":"1141746","previous_id":0,"original_id":"0","guid":"19708794A37942B8AAAEDB00A3F48125","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Data Cleaning (R script)","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Data Cleaning (R script)"},"is_project":0},{"component_id":"1141745","previous_id":"1141746","original_id":"0","guid":"96B39C23172E4B30AD036E044A33A2D2","previous_guid":"19708794A37942B8AAAEDB00A3F48125","component_type_id":"1","data_id":null,"data":"<p>The transcript revision number (if any) is removed from the transcript ID:<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-java\"><code> trnCounts$Transcript &lt;- sub(\"\\\\.[0-9]+$\",\"\",trnCounts$Transcript);<\/code><\/pre>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>The transcript revision number (if any) is removed from the transcript ID:<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-java\"><code> trnCounts$Transcript &lt;- sub(\"\\\\.[0-9]+$\",\"\",trnCounts$Transcript);<\/code><\/pre>"},"is_project":0}]},{"id":"641703","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"2044AD4C418A4EE994EDE8833F454AE1","previous_guid":"1ADF33EBB6954F5E8B68B03538AD7AC9","previous_id":"641702","last_modified":"1530495072","components":[{"component_id":"1141749","previous_id":0,"original_id":"0","guid":"CBCA059DFE2F4B2DB98B6F4B011FD53A","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Data Cleaning (R script)","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Data Cleaning (R script)"},"is_project":0},{"component_id":"1141748","previous_id":"1141749","original_id":"0","guid":"E87C820055E24006BBCF3C1403E05692","previous_guid":"CBCA059DFE2F4B2DB98B6F4B011FD53A","component_type_id":"1","data_id":null,"data":"<p>The annotation file is loaded into memory:<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-java\"><code>ensembl.df &lt;- read.delim(\"ensembl_mm10_geneFeatureLocations.txt.gz\",\n                         col.names=c(\"Transcript\",\"Description\",\"Start\",\n                                     \"End\",\"Strand\",\"Gene\",\"Chr\"),\n                         stringsAsFactors=FALSE);<\/code><\/pre>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>The annotation file is loaded into memory:<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-java\"><code>ensembl.df &lt;- read.delim(\"ensembl_mm10_geneFeatureLocations.txt.gz\",\n                         col.names=c(\"Transcript\",\"Description\",\"Start\",\n                                     \"End\",\"Strand\",\"Gene\",\"Chr\"),\n                         stringsAsFactors=FALSE);<\/code><\/pre>"},"is_project":0}]},{"id":"641704","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"2D999F3A33FB4484A2EC31FD08824129","previous_guid":"2044AD4C418A4EE994EDE8833F454AE1","previous_id":"641703","last_modified":"1530495242","components":[{"component_id":"1141751","previous_id":0,"original_id":"0","guid":"620728399865458CB3860289045437F1","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Data Cleaning (R script)","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Data Cleaning (R script)"},"is_project":0},{"component_id":"1141750","previous_id":"1141751","original_id":"0","guid":"80B4F75CE2624DF5B9CC93DA5B8CA26D","previous_guid":"620728399865458CB3860289045437F1","component_type_id":"1","data_id":null,"data":"<p>The <em>dplyr<\/em> and <em>tidyr<\/em> packages are used to convert to a wide format, and pull the associated annotation from the ensembl annotation file:<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-java\"><code>library(dplyr);\nlibrary(tidyr);\n\ntrnCounts.wide &lt;- group_by(trnCounts, DB, Transcript) %&gt;%\n    summarise(Count = sum(Count)) %&gt;% spread(DB, Count) %&gt;% inner_join(ensembl.df, by=\"Transcript\");<\/code><\/pre>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>The <em>dplyr<\/em> and <em>tidyr<\/em> packages are used to convert to a wide format, and pull the associated annotation from the ensembl annotation file:<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-java\"><code>library(dplyr);\nlibrary(tidyr);\n\ntrnCounts.wide &lt;- group_by(trnCounts, DB, Transcript) %&gt;%\n    summarise(Count = sum(Count)) %&gt;% spread(DB, Count) %&gt;% inner_join(ensembl.df, by=\"Transcript\");<\/code><\/pre>"},"is_project":0}]},{"id":"641705","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"FA3CE403575046FA846AEA0B55A3485D","previous_guid":"2D999F3A33FB4484A2EC31FD08824129","previous_id":"641704","last_modified":"1530495312","components":[{"component_id":"1141753","previous_id":0,"original_id":"0","guid":"C20C36194E6946418A53CB41C95D072A","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Data Cleaning (R script)","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Data Cleaning (R script)"},"is_project":0},{"component_id":"1141752","previous_id":"1141753","original_id":"0","guid":"31E773B0F63343D28D3419B3D3FB597B","previous_guid":"C20C36194E6946418A53CB41C95D072A","component_type_id":"1","data_id":null,"data":"<p>Missing data is set to a count of zero to simplify subsequent computation:<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-java\"><code>trnCounts.wide$WTfwd &lt;- coalesce(trnCounts.wide$`BC06+`,0L);\ntrnCounts.wide$WTrev &lt;- coalesce(trnCounts.wide$`BC06-`,0L);\ntrnCounts.wide$\u03c10fwd &lt;- coalesce(trnCounts.wide$`BC07+`,0L);\ntrnCounts.wide$\u03c10rev &lt;- coalesce(trnCounts.wide$`BC07-`,0L);<\/code><\/pre>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Missing data is set to a count of zero to simplify subsequent computation:<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-java\"><code>trnCounts.wide$WTfwd &lt;- coalesce(trnCounts.wide$`BC06+`,0L);\ntrnCounts.wide$WTrev &lt;- coalesce(trnCounts.wide$`BC06-`,0L);\ntrnCounts.wide$\u03c10fwd &lt;- coalesce(trnCounts.wide$`BC07+`,0L);\ntrnCounts.wide$\u03c10rev &lt;- coalesce(trnCounts.wide$`BC07-`,0L);<\/code><\/pre>"},"is_project":0}]},{"id":"641706","is_changed":1,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"AC9F9DD92E384837A346C566B3730748","previous_guid":"FA3CE403575046FA846AEA0B55A3485D","previous_id":"641705","last_modified":"1530495829","components":[{"component_id":"1141755","previous_id":0,"original_id":"0","guid":"CC08DEECC72D4734BEA2BADFDE3862D3","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Differential coverage (R script)","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Differential coverage (R script)"},"is_project":0},{"component_id":"1141754","previous_id":"1141755","original_id":"0","guid":"D55282282DC342EFA67133DBD4681E7A","previous_guid":"CC08DEECC72D4734BEA2BADFDE3862D3","component_type_id":"1","data_id":null,"data":"<p>This was a pilot experiment with no replicate data (hence why I refer to this as 'differential coverage', rather than differential expression. I would usually use software with proper statistical modeling (such as <a href=\"https:\/\/bioconductor.org\/packages\/release\/bioc\/html\/DESeq2.html\" target=\"_blank\" rel=\"noopener noreferrer\">DESeq2<\/a>), but in this case I'm generating a quick rough-cut comparison using basic R.<\/p>\n<p>\u00a0<\/p>\n<p>I introduce a fudge factor to account for missing data, and use this factor in the calculation of differential coverage (as log2 fold change). The strand-specificity of the sequencing and transcript annotation allows this differential coverage to be determined for only those reads mapping in the correct direction. Results are rounded to 1 d.p. as an additional warning that these results have a low precision:<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-java\"><code>fcFudge &lt;- 5;\ntrnCounts.wide$DCov &lt;- round(ifelse(trnCounts.wide$Strand == 1,\n                              log2(trnCounts.wide$WTfwd+fcFudge)-log2(trnCounts.wide$\u03c10fwd+fcFudge),\n                              log2(trnCounts.wide$WTrev+fcFudge)-log2(trnCounts.wide$\u03c10rev+fcFudge)),1);\n<\/code><\/pre>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>This was a pilot experiment with no replicate data (hence why I refer to this as 'differential coverage', rather than differential expression. I would usually use software with proper statistical modeling (such as <a href=\"https:\/\/bioconductor.org\/packages\/release\/bioc\/html\/DESeq2.html\" target=\"_blank\" rel=\"noopener noreferrer\">DESeq2<\/a>), but in this case I'm generating a quick rough-cut comparison using basic R.<\/p>\n<p>\u00a0<\/p>\n<p>I introduce a fudge factor to account for missing data, and use this factor in the calculation of differential coverage (as log2 fold change). The strand-specificity of the sequencing and transcript annotation allows this differential coverage to be determined for only those reads mapping in the correct direction. Results are rounded to 1 d.p. as an additional warning that these results have a low precision:<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-java\"><code>fcFudge &lt;- 5;\ntrnCounts.wide$DCov &lt;- round(ifelse(trnCounts.wide$Strand == 1,\n                              log2(trnCounts.wide$WTfwd+fcFudge)-log2(trnCounts.wide$\u03c10fwd+fcFudge),\n                              log2(trnCounts.wide$WTrev+fcFudge)-log2(trnCounts.wide$\u03c10rev+fcFudge)),1);\n<\/code><\/pre>"},"is_project":0}],"available_protocols":["13498"]},{"id":"641707","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"626E7A309FBF4E8F81476ADC95629E88","previous_guid":"AC9F9DD92E384837A346C566B3730748","previous_id":"641706","last_modified":"1530495767","components":[{"component_id":"1141757","previous_id":0,"original_id":"0","guid":"27A57FDAF5D34D03B12FEEDC88B7131B","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Differential coverage (R script)","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Differential coverage (R script)"},"is_project":0},{"component_id":"1141756","previous_id":"1141757","original_id":"0","guid":"FB5CEA04ECDD482197B2F8C815A0CD5C","previous_guid":"27A57FDAF5D34D03B12FEEDC88B7131B","component_type_id":"1","data_id":null,"data":"<p>Finally, the resultant table is writtent out to a CSV file, ordered by the absolute value of the differential coverage statistic:<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-java\"><code>trnCounts.wide &lt;- arrange(trnCounts.wide, -abs(DCov));\n\nwrite.csv(trnCounts.wide[,c(\"Transcript\",\"WTfwd\",\"WTrev\",\"\u03c10fwd\",\"\u03c10rev\",\n\"DCov\",\"Gene\",\"Description\",\"Chr\",\"Start\",\"End\")],\nfile=\"wide_transcript_Counts_WTvs\u03c10.csv\", row.names=FALSE);<\/code><\/pre>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Finally, the resultant table is writtent out to a CSV file, ordered by the absolute value of the differential coverage statistic:<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-java\"><code>trnCounts.wide &lt;- arrange(trnCounts.wide, -abs(DCov));\n\nwrite.csv(trnCounts.wide[,c(\"Transcript\",\"WTfwd\",\"WTrev\",\"\u03c10fwd\",\"\u03c10rev\",\n\"DCov\",\"Gene\",\"Description\",\"Chr\",\"Start\",\"End\")],\nfile=\"wide_transcript_Counts_WTvs\u03c10.csv\", row.names=FALSE);<\/code><\/pre>"},"is_project":0}]}]}