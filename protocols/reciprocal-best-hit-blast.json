{"uri":"reciprocal-best-hit-blast-grnbv5e","version_id":"0","protocol_name":"Reciprocal Best Hit BLAST","protocol_name_html":"Reciprocal Best Hit BLAST","is_prepublished":"0","can_edit":"0","parent_id":null,"api_version":"2","is_new_mode":"1","last_modified":"1522216802","type_id":"1","link":"https:\/\/dx.doi.org\/10.1186\/s12862-017-0999-7","fork_id":"","public_fork_note":"","number_of_steps":"6","has_versions":"0","first_published_date":"1482143011","publish_date":"2016-12-19 10:23:31","documents":null,"have_protocol_in_step":"0","is_protocol_in_step":"1","vendor_name":"Contributed by users","vendor_link":"https:\/\/www.protocols.io","vendor_logo":"\/img\/vendors\/1.png","mod_mins":"-45","mod_secs":"1","description":"<p>This protocol describes the basic steps for a reciprocal best hit BLAST. It will show you how to\u00a0download sequences from NCBI, creating BLAST databases, and how to blast.<\/p>","is_bookmarked":"0","can_reassign":"1","before_start":"","has_guidelines":"1","materials":[],"warning":"","version_class":"4622","public":"1","is_owner":"1","is_original_owner":"1","created_on":"1481725873","protocol_affiliation":"Institute of Synthetic Microbiology Heinrich Heine University","affiliation":"Institute of Synthetic Microbiology Heinrich Heine University","doi":"dx.doi.org\/10.17504\/protocols.io.grnbv5e","doi_status":"2","changed_fork_steps":"","profile_url":"NicolasSchmelling-w2136443r2","protocol_img":"https:\/\/www.protocols.io\/img\/default_protocol.png","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/hamerye.jpg","full_name":"Nicolas Schmelling","created_by":"Nicolas Schmelling","private_link":"B95790966BB24D7308DC5F0C6C0E0FCB","original_img":"1","username":"nicolas-schmelling","is_retracted":"0","retraction_reason":null,"plos_id":null,"manuscript_citation":"Schmelling NM,  Lehmann R,  Chaudhury P,  Beck C,  Albers S,  Axmann IM,  Wiegard A, Minimal tool set for a prokaryotic circadian clock. BMC Evolutionary Biology  doi: <a target=\"_blank\" href=https:\/\/dx.doi.org\/10.1186\/s12862-017-0999-7\">10.1186\/s12862-017-0999-7<\/a> ","journal_name":"BMC Evolutionary Biology","is_donations_disabled":"0","is_donations_disabled_by_user":"9","item_record_id":231903,"fork_info":[],"compare_forks":[],"protocols":[],"groups":[{"group_id":"234","group_uri":"axmann-lab","group_name":"Axmann Lab","group_logo":"https:\/\/s3.amazonaws.com\/pr-journal\/qe9erye.png","requested_uid":null,"request_flag":null,"my_request":"1"}],"number_of_shared_runs":[],"ownership_history":[],"keywords":"reciprocal BLAST, bioinformatics, sequence similarity, NCBI, database","transfer_to_user":[],"sub_transfer":false,"is_transfer_pending":false,"number_of_bookmarks":"5","collections":[{"protocol_name":"Bioinformatic Protocols","protocol_name_html":"Bioinformatic Protocols","uri":"bioinformatic-protocols-gtfbwjn","username":"nicolas-schmelling","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/hamerye.jpg","protocol_img":"https:\/\/www.protocols.io\/img\/default_protocol.png","full_name":"Nicolas Schmelling"}],"tags":[{"tag_id":"142","tag_name":"blast"},{"tag_id":"453","tag_name":"reciprocal BLAST"},{"tag_id":"454","tag_name":"bioinformatics"},{"tag_id":"455","tag_name":"sequence similarity"},{"tag_id":"456","tag_name":"database"},{"tag_id":"457","tag_name":"NCBI"}],"archived":0,"sub_authors":[],"sub_protocols_number":0,"can_edit_shared":0,"shared_runs":[],"is_shared_run":0,"is_shared":1,"banner":null,"contact_badges":[{"badge_id":"1","badge_image":"\/img\/ambassador.svg","badge_description":"Ambassador"},{"badge_id":"4","badge_image":"\/img\/badges\/gold.svg","badge_description":"Gold power author!"},{"badge_id":"5","badge_image":"\/img\/badges\/earlyadopter.svg","badge_description":"Early adopter"},{"badge_id":"6","badge_image":"\/img\/badges\/socialbutterfly.svg","badge_description":"Social butterfly"}],"number_of_comments":1,"is_locked":0,"is_locked_by":false,"authors":"Nicolas Schmelling","authors_list":[{"name":"Nicolas Schmelling","affiliation":"Institute of Synthetic Microbiology Heinrich Heine University","username":null,"profile_image":null}],"user":{"profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/hamerye.jpg","username":"nicolas-schmelling","full_name":"Nicolas Schmelling","created_by":"Nicolas Schmelling"},"access":{"can_view":"1","can_remove":"0","can_add":"0","can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":"0","can_move":"1","can_transfer":"1","can_download":"1","is_locked":"0"},"is_contact_suspended":0,"guidelines":"<p>I recommend running this protocol in a docker container, so you don't have to worry about installation.<\/p>\n<p>\u00a0<\/p>\n<p>Use this docker container:\u00a0https:\/\/hub.docker.com\/r\/biodckr\/blast\/<\/p>","status_id":"1","is_research":"1","status_info":null,"steps":[{"id":"214749","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"887F847D0295421B840CBFDC682FCEF9","previous_guid":null,"previous_id":"0","last_modified":"1482142428","components":[{"component_id":"275277","previous_id":0,"original_id":"0","guid":"BDC443FBE6EA43C5B3C1990A37839712","previous_guid":null,"component_type_id":"1","data_id":"0","data":"<p>The first thing you need to do is to download the sequences of choice from the NCBI server. You need to decide whether you need the nucleotide or protein sequences. I recommend only downloading sequences from genomes that are labeled as <em>Complete<\/em> or<em> Chromosome<\/em> level to ensure a certain quality of the genome assembly.<\/p>\n<p>\u00a0<\/p>\n<p>The following commands will download all protein sequences from genome assemblies labeled as <em>Complete<\/em>\u00a0or<em>\u00a0Chromosome<\/em>, futher merge them into a single sequence FASTA file, and move them into the newly created <em>db<\/em> directory.<\/p>\n<p>\u00a0<\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>The first thing you need to do is to download the sequences of choice from the NCBI server. You need to decide whether you need the nucleotide or protein sequences. I recommend only downloading sequences from genomes that are labeled as <em>Complete<\/em> or<em> Chromosome<\/em> level to ensure a certain quality of the genome assembly.<\/p>\n<p>\u00a0<\/p>\n<p>The following commands will download all protein sequences from genome assemblies labeled as <em>Complete<\/em>\u00a0or<em>\u00a0Chromosome<\/em>, futher merge them into a single sequence FASTA file, and move them into the newly created <em>db<\/em> directory.<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"274299","previous_id":"275277","original_id":"0","guid":"CDEECAE1AE3C4DAB8DFDBD2B3DB849E9","previous_guid":"BDC443FBE6EA43C5B3C1990A37839712","component_type_id":"6","data_id":"0","data":"Download sequences from NCBI","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Download sequences from NCBI"},"is_project":0},{"component_id":"277123","previous_id":"274299","original_id":"0","guid":"8E70F4E65E774B138F753458514634BE","previous_guid":"CDEECAE1AE3C4DAB8DFDBD2B3DB849E9","component_type_id":"15","data_id":"1473","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"mkdir PROJECT_NAME\ncd PROJECT_NAME\n\nwget ftp:\/\/ftp.ncbi.nih.gov\/genomes\/refseq\/assembly_summary_refseq.txt\n\nawk -F '\\t' '{if($12==\"Complete Genome\") print $20}' assembly_summary_refseq.txt > assembly_summary_complete_genomes.txt\nawk -F '\\t' '{if($12==\"Chromosome\") print $20}' assembly_summary_refseq.txt > assembly_summary_chromosome.txt\n\nmkdir RefSeqCompleteGenomes\nmkdir RefSeqCompleteReports\nmkdir RefSeqChromosomeGenomes\nmkdir RefSeqChromosomeReports\nmkdir db\n\nfor next in $(cat assembly_summary_complete_genomes.txt);\ndo\nwget -P RefSeqCompleteGenomes \"$next\"\/*protein.faa.gz;\nwget -P RefSeqCompleteReports \"$next\"\/*assembly_report.txt;\ndone\n\nfor next in $(cat assembly_summary_chromosome.txt);\ndo\nwget -P RefSeqChromosomeGenomes \"$next\"\/*protein.faa.gz;\nwget -P RefSeqChromosomeReports \"$next\"\/*assembly_report.txt;\ndone\n\ngunzip RefSeqCompleteGenomes\/*.gz\ngunzip RefSeqChromosomeGenomes\/*.gz\n\npython change_fasta_header.py RefSeqCompleteGenomes\npython change_fasta_header.py RefSeqChromosomeGenomes\n\ncat RefSeqCompleteGenomes\/*.fasta > db\/all_complete_genomes.fasta\ncat RefSeqChromosomeGenomes\/*.fasta > db\/all_chromosomes.fasta\n\ncat db\/all_complete_genome.fasta db\/all_chromosome.fasta > db\/all_genomes.fasta","description":"","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"214755","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"1BFE4FDF8E7E47298EDECCDED5705D4F","previous_guid":"887F847D0295421B840CBFDC682FCEF9","previous_id":"214749","last_modified":"1481814230","components":[{"component_id":"274798","previous_id":0,"original_id":"0","guid":"B1B41090807243CA9D6E93B7391F7365","previous_guid":null,"component_type_id":"1","data_id":"0","data":"<p>After downloading the sequences of choice from NCBI, you need to create a database. Therefore you change the directory into the <em>db<\/em>\u00a0directory where all the sequences are stored. Next you run the second command. This will create a protein database with all the downloaded sequences. If you downloaded nucleotide sequence make sure you change the <em>dbtype<\/em> option to <em>nucleotide<\/em>.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Parameters<\/strong><\/p>\n<p><strong>in:<\/strong>\u00a0FASTA file including all sequences for you database<\/p>\n<p><strong>out:<\/strong> Database name<\/p>\n<p><strong>dbtype:<\/strong> Database type usually 'prot' for proteins or 'nucleotide' for nucleotides<\/p>\n<p>\u00a0<\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>After downloading the sequences of choice from NCBI, you need to create a database. Therefore you change the directory into the <em>db<\/em>\u00a0directory where all the sequences are stored. Next you run the second command. This will create a protein database with all the downloaded sequences. If you downloaded nucleotide sequence make sure you change the <em>dbtype<\/em> option to <em>nucleotide<\/em>.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Parameters<\/strong><\/p>\n<p><strong>in:<\/strong>\u00a0FASTA file including all sequences for you database<\/p>\n<p><strong>out:<\/strong> Database name<\/p>\n<p><strong>dbtype:<\/strong> Database type usually 'prot' for proteins or 'nucleotide' for nucleotides<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"274303","previous_id":"274798","original_id":"0","guid":"D9B132C1375B44B0BCD289A0A79932A8","previous_guid":"B1B41090807243CA9D6E93B7391F7365","component_type_id":"6","data_id":"0","data":"Create database from sequences","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Create database from sequences"},"is_project":0},{"component_id":"274363","previous_id":"274303","original_id":"0","guid":"D42355DE95BE4D198B8C9D75E2EDD689","previous_guid":"D9B132C1375B44B0BCD289A0A79932A8","component_type_id":"15","data_id":"1468","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"cd db\nmakeblastdb -in FILE_NAME.fasta -dbtype 'TYPE' -out DATABASE_NAME","description":"","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"214765","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"E61689A5CDED4FFD82C0B40F5D5D3455","previous_guid":"1BFE4FDF8E7E47298EDECCDED5705D4F","previous_id":"214755","last_modified":"1481814248","components":[{"component_id":"275268","previous_id":0,"original_id":"0","guid":"7FC6B6A258E744A3B7939E80D1D6E2DE","previous_guid":null,"component_type_id":"1","data_id":"0","data":"<p>After downloading the sequences and creating the database you want to start with your first BLAST run. To do that you need to place your sequences of choice in the directory <em>seq<\/em>. Use a single FASTA file for each query sequence. The following commands will loop over the query sequences and serach for homologs in your database. The program used here is BLASTP, which is used for protein sequences. Other BLAST programs can be found in the documentation.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Parameters<\/strong><\/p>\n<p><strong>query:<\/strong> Input sequence<\/p>\n<p><strong>db:<\/strong> BLAST database<\/p>\n<p><strong>out:<\/strong> Name of the output file<\/p>\n<p><strong>outfmt:<\/strong> Output format<\/p>\n<p><strong>evalue:<\/strong> Arbitrary cut-off of sequence similarity. The e-value depends on your database size, so the large your database the smaller your e-value can be. I recommend something between 10<sup>-5<\/sup> and 10<sup>-20<\/sup>.<\/p>\n<p><strong>word_size:<\/strong> Number of nucleotides\/amino acids, which resembles the smallest unit of your query<\/p>\n<p><strong>num_alignments:<\/strong> Maximum number of alignment partner in the database for a single query sequence<\/p>\n<p>\u00a0<\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>After downloading the sequences and creating the database you want to start with your first BLAST run. To do that you need to place your sequences of choice in the directory <em>seq<\/em>. Use a single FASTA file for each query sequence. The following commands will loop over the query sequences and serach for homologs in your database. The program used here is BLASTP, which is used for protein sequences. Other BLAST programs can be found in the documentation.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Parameters<\/strong><\/p>\n<p><strong>query:<\/strong> Input sequence<\/p>\n<p><strong>db:<\/strong> BLAST database<\/p>\n<p><strong>out:<\/strong> Name of the output file<\/p>\n<p><strong>outfmt:<\/strong> Output format<\/p>\n<p><strong>evalue:<\/strong> Arbitrary cut-off of sequence similarity. The e-value depends on your database size, so the large your database the smaller your e-value can be. I recommend something between 10<sup>-5<\/sup> and 10<sup>-20<\/sup>.<\/p>\n<p><strong>word_size:<\/strong> Number of nucleotides\/amino acids, which resembles the smallest unit of your query<\/p>\n<p><strong>num_alignments:<\/strong> Maximum number of alignment partner in the database for a single query sequence<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"274313","previous_id":"275268","original_id":"0","guid":"740F6726868C4919B2CC5683110C9A18","previous_guid":"7FC6B6A258E744A3B7939E80D1D6E2DE","component_type_id":"6","data_id":"0","data":"Select sequences as queries to search for homologs in database","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Select sequences as queries to search for homologs in database"},"is_project":0},{"component_id":"274366","previous_id":"274313","original_id":"0","guid":"AC12BDEA2851423EBFFB0A3F15F9F388","previous_guid":"740F6726868C4919B2CC5683110C9A18","component_type_id":"15","data_id":"1469","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"mkdir seq\n# Add sequence FASTA files in seq directory\n\nfor f in seq\/*.fasta\ndo\nblastp -query \"$f\" -db DATABASE_NAME -out \"${f%.fasta}_blast.xml\" -outfmt 5 -evalue NUMBER -word_size NUMBER -num_alignments NUMBER\ndone","description":"","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"214792","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"2F9536095B0B46049F36C92837C1EAA3","previous_guid":"A45D1A53F2714EE8AE63AFD1EDF4B989","previous_id":"215788","last_modified":"1481814257","components":[{"component_id":"275273","previous_id":0,"original_id":"0","guid":"0924FDED51094283A9929BA08EB8F09D","previous_guid":null,"component_type_id":"1","data_id":"0","data":"<p>Now that you have FASTA files for the hits you can start the second BLAST run and align the hits back to the original genome from the query sequence. You need to create a database from the genomic sequences first and then start your BLAST run. This time you set the <em>num_alignments<\/em> parameter to 1, because you only want to record the best alignment partner in the genome. You don't have to worry about the <em>evalue<\/em> since the best hit will most likely be 0 or in close proximity.<\/p>\n<p>\u00a0<\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Now that you have FASTA files for the hits you can start the second BLAST run and align the hits back to the original genome from the query sequence. You need to create a database from the genomic sequences first and then start your BLAST run. This time you set the <em>num_alignments<\/em> parameter to 1, because you only want to record the best alignment partner in the genome. You don't have to worry about the <em>evalue<\/em> since the best hit will most likely be 0 or in close proximity.<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"274340","previous_id":"275273","original_id":"0","guid":"B1EF94441B1048B48B8C38C608C9E0FE","previous_guid":"0924FDED51094283A9929BA08EB8F09D","component_type_id":"6","data_id":"0","data":"Align hits against original genome","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Align hits against original genome"},"is_project":0},{"component_id":"274379","previous_id":"274340","original_id":"0","guid":"D7B59F2A6CAA42F1A94B92653B70FCE1","previous_guid":"B1EF94441B1048B48B8C38C608C9E0FE","component_type_id":"15","data_id":"1472","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"makeblastdb -in GENOME_FILE.fasta -dbtype 'TYPE' -out DATABASE_NAME\n\nfor f in seq\/*_matches.fasta\ndo\nblastp -query \"$f\" -db DATABASE_NAME -out \"${f%_matches.fasta}_back_blast.xml\" -outfmt 5 -word_size NUMBER  -num_alignments 1\ndone","description":"","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"215788","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"A45D1A53F2714EE8AE63AFD1EDF4B989","previous_guid":"E61689A5CDED4FFD82C0B40F5D5D3455","previous_id":"214765","last_modified":"1481814252","components":[{"component_id":"277067","previous_id":0,"original_id":"0","guid":"7ED74B9E3C094E9D9DF7C2DD05DE25E8","previous_guid":null,"component_type_id":"1","data_id":"0","data":"<p>You now created your first BLAST results. For a reciprocal BLAST you need to align these hits back to the original genome from your query sequence. For this you need to create FASTA files from your BLAST results. The Python script <em>parse_hits.py<\/em> will do this for you. You just need to run the following command.<\/p>\n<p>\u00a0<\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>You now created your first BLAST results. For a reciprocal BLAST you need to align these hits back to the original genome from your query sequence. For this you need to create FASTA files from your BLAST results. The Python script <em>parse_hits.py<\/em> will do this for you. You just need to run the following command.<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"277047","previous_id":"277067","original_id":"0","guid":"87BE86A341FC4DD2B1313B86E8F8805E","previous_guid":"7ED74B9E3C094E9D9DF7C2DD05DE25E8","component_type_id":"6","data_id":"0","data":"Create new FASTA files for BLAST hits","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Create new FASTA files for BLAST hits"},"is_project":0},{"component_id":"277350","previous_id":"277047","original_id":"0","guid":"0F45A3A269734369A267CB2E4BB31C92","previous_guid":"87BE86A341FC4DD2B1313B86E8F8805E","component_type_id":"15","data_id":"1474","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"python parse_hits.py","description":"","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"215814","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"F468FCC6BB554097A4897B9962AC0164","previous_guid":"2F9536095B0B46049F36C92837C1EAA3","previous_id":"214792","last_modified":"1482142103","components":[{"component_id":"301990","previous_id":0,"original_id":"0","guid":"BC6AF7C5AE7F41BD840ED6DAB01007D7","previous_guid":null,"component_type_id":"1","data_id":"0","data":"<p>In the last step you need to filter those hits that aligned back to the original query sequence. These are the only valid hits following the\u00a0standard procedure for a reciprocal best hit BLAST. To filter these hits you need to run the Python script <em>hits_to_csv.py.<\/em><\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>In the last step you need to filter those hits that aligned back to the original query sequence. These are the only valid hits following the\u00a0standard procedure for a reciprocal best hit BLAST. To filter these hits you need to run the Python script <em>hits_to_csv.py.<\/em><\/p>"},"is_project":0},{"component_id":"277087","previous_id":"301990","original_id":"0","guid":"BBB425F9DA374212BA81BE7ABF1E11B6","previous_guid":"BC6AF7C5AE7F41BD840ED6DAB01007D7","component_type_id":"6","data_id":"0","data":"Filter hits and create CSV files for each query sequence","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Filter hits and create CSV files for each query sequence"},"is_project":0},{"component_id":"277386","previous_id":"277087","original_id":"0","guid":"66A3DEBEC7304FE186D36DAB76A6AEB7","previous_guid":"BBB425F9DA374212BA81BE7ABF1E11B6","component_type_id":"15","data_id":"1475","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"python hits_to_csv.py","description":"","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]}]}