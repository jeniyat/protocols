{"uri":"introduction-to-molecular-phylogenetic-reconstruct-qhydt7w","version_id":"0","protocol_name":"Introduction to molecular phylogenetic reconstruction with the ETE3 Toolkit","protocol_name_html":"Introduction to molecular phylogenetic reconstruction with the ETE3 Toolkit","is_prepublished":"0","can_edit":"0","parent_id":null,"api_version":"1","is_new_mode":"0","last_modified":"1527882508","type_id":"1","link":null,"fork_id":"","public_fork_note":"","number_of_steps":"5","has_versions":"1","first_published_date":"1527882508","publish_date":"2018-06-01 19:48:28","documents":null,"have_protocol_in_step":"0","is_protocol_in_step":"0","vendor_name":"Contributed by users","vendor_link":"https:\/\/www.protocols.io","vendor_logo":"\/img\/vendors\/1.png","mod_mins":"-8","mod_secs":"13","description":"<p><strong>This is a short tutorial on how to get started analyzing FASTA files via the command line.<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Code is intended for use on an Ubuntu 16.04 LTS OS, but it may work on other Unix or Unix-like systems.<\/p>\n<p>\u00a0<\/p>\n<p>Here we will use the ETE3 toolkit, which is a very nice tool for phylogenetic reconstruction. The main website is here:\u00a0http:\/\/etetoolkit.org\/<\/p>\n<p>We will also look at the EggNOG database, which is a very useful database of protein families:\u00a0http:\/\/eggnogdb.embl.de\/#\/app\/home<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>","is_bookmarked":"0","can_reassign":"1","before_start":null,"has_guidelines":"0","materials":[],"warning":null,"version_class":"12568","public":"1","is_owner":"1","is_original_owner":"1","created_on":"1527522429","protocol_affiliation":"Virginia Tech","affiliation":"Virginia Tech","doi":"dx.doi.org\/10.17504\/protocols.io.qhydt7w","doi_status":"2","changed_fork_steps":null,"profile_url":"FrankAylward-y22344v2x2","protocol_img":"https:\/\/www.protocols.io\/img\/default_protocol.png","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","full_name":"Frank Aylward","created_by":"Frank Aylward","private_link":"5E44F3540028B1718AF157502B9011B2","original_img":"1","username":"frank-aylward","is_retracted":"0","retraction_reason":null,"plos_id":null,"manuscript_citation":null,"journal_name":null,"is_donations_disabled":"0","is_donations_disabled_by_user":"9","item_record_id":317756,"fork_info":[],"compare_forks":[],"protocols":[],"groups":[],"number_of_shared_runs":[],"ownership_history":[],"keywords":"","transfer_to_user":[],"sub_transfer":false,"is_transfer_pending":false,"number_of_bookmarks":"0","collections":[],"tags":[],"archived":0,"sub_authors":[],"sub_protocols_number":0,"can_edit_shared":0,"shared_runs":[],"is_shared_run":0,"is_shared":1,"banner":null,"contact_badges":[{"badge_id":"4","badge_image":"\/img\/badges\/gold.svg","badge_description":"Gold power author!"}],"number_of_comments":0,"is_locked":0,"is_locked_by":false,"authors":"Frank Aylward","authors_list":[{"name":"Frank Aylward","affiliation":"Virginia Tech","username":"frank-aylward","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png"}],"user":{"profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","username":"frank-aylward","full_name":"Frank Aylward","created_by":"Frank Aylward"},"access":{"can_view":"1","can_remove":"0","can_add":"0","can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":"0","can_move":"1","can_transfer":"1","can_download":"1","is_locked":"0"},"is_contact_suspended":0,"guidelines":null,"status_id":"1","is_research":"0","status_info":"We use this protocol in our group and it is working","steps":[{"id":"632073","is_changed":0,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"A00A6D352B894211B08FBF7AF1438192","previous_guid":null,"previous_id":"0","last_modified":"1527882290","components":[{"component_id":"1117120","previous_id":0,"original_id":"0","guid":"A705D29BDC0B4D2EBC95E2883FF53F23","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Download a working directory","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Download a working directory"},"is_project":0},{"component_id":"1117119","previous_id":"1117120","original_id":"0","guid":"0EC10071DE024521B5AF5AB31A044B1B","previous_guid":"A705D29BDC0B4D2EBC95E2883FF53F23","component_type_id":"1","data_id":null,"data":"<p>This tutorial is designed to provide experience creating molecular phylogenies of marker genes. You may find yourself in a position where you have a gene of interest and you wish to know it's phylogenetic relationships to other known genes of the same gene\/protein family. Marker genes can be markers of particular metabolic processes (functional marker genes) or markers for phylogenetic diversity (phylogenetic marker genes). An example of the former is nifH, which is a gene which encodes for a core component of the nitrogenase enzyme that is responsible for nitrogen fixation. If an organism has a nifH gene, there is a pretty good chance that it has the capacity to fix dinitrogen gas into ammonia. A good example of a phylogenetic marker gene would be rpoB, which encodes for the beta subunit of RNA polymerase and is a highly-conserved protein found across Bacteria, Archaea, and Eukaryotes, and can therefore be used to analyze phylogenetic relationships between many different organisms. From the perspective of microbial ecology, marker gene surveys can be useful methods to learn about what kinds of microbes are present in a given environment, and what metabolic activities they may be engaged in.<\/p>\n<p>\u00a0<\/p>\n<p>Here we will practice creating a reference phylogeny for the marker gene narG, which encodes a key subunit in the nitrate reductase complex.<\/p>\n<p>First let's download some practice data for GitHub:<\/p>\n<p>\u00a0<\/p>\n<p><strong>git clone https:\/\/github.com\/faylward\/bioinfo-tutorials<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>You should see a folder called 'bioinfo-tutorials', and inside that should be another folder called 'marker_gene_phylogenetics'. Let's navigate to that folder:<\/p>\n<p>\u00a0<\/p>\n<p><strong>cd bioinfo-tutorials\/marker_gene_phylogenetics<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Inside this folder you should see a file called 'mystery_protein.faa' which contains the amino acid sequence of a single protein. Take a look in this file just to be sure:<\/p>\n<p>\u00a0<\/p>\n<p><strong>head mystery_protein.faa<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>You can imagine that you found this protein encoded in a genome that you are analyzing and you think it may have been acquired through lateral gene transfer. Perhaps you did some gene annotation and you know it encodes for a NarG protein, but you don't know anything else about it. Creating a phylogeny with this protein and some reference sequences is a great way to investigate possible lateral gene transfers and see what other sequences are closely related. Or perhaps you found this gene in a particular environmental gene survey and you are interested in knowing what reference sequences are closely related. Either way, a phylogeny is informative.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yy8jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yy7jtte.png\" data-ofn=\"command_line_2.png\" \/><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>This tutorial is designed to provide experience creating molecular phylogenies of marker genes. You may find yourself in a position where you have a gene of interest and you wish to know it's phylogenetic relationships to other known genes of the same gene\/protein family. Marker genes can be markers of particular metabolic processes (functional marker genes) or markers for phylogenetic diversity (phylogenetic marker genes). An example of the former is nifH, which is a gene which encodes for a core component of the nitrogenase enzyme that is responsible for nitrogen fixation. If an organism has a nifH gene, there is a pretty good chance that it has the capacity to fix dinitrogen gas into ammonia. A good example of a phylogenetic marker gene would be rpoB, which encodes for the beta subunit of RNA polymerase and is a highly-conserved protein found across Bacteria, Archaea, and Eukaryotes, and can therefore be used to analyze phylogenetic relationships between many different organisms. From the perspective of microbial ecology, marker gene surveys can be useful methods to learn about what kinds of microbes are present in a given environment, and what metabolic activities they may be engaged in.<\/p>\n<p>\u00a0<\/p>\n<p>Here we will practice creating a reference phylogeny for the marker gene narG, which encodes a key subunit in the nitrate reductase complex.<\/p>\n<p>First let's download some practice data for GitHub:<\/p>\n<p>\u00a0<\/p>\n<p><strong>git clone https:\/\/github.com\/faylward\/bioinfo-tutorials<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>You should see a folder called 'bioinfo-tutorials', and inside that should be another folder called 'marker_gene_phylogenetics'. Let's navigate to that folder:<\/p>\n<p>\u00a0<\/p>\n<p><strong>cd bioinfo-tutorials\/marker_gene_phylogenetics<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Inside this folder you should see a file called 'mystery_protein.faa' which contains the amino acid sequence of a single protein. Take a look in this file just to be sure:<\/p>\n<p>\u00a0<\/p>\n<p><strong>head mystery_protein.faa<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>You can imagine that you found this protein encoded in a genome that you are analyzing and you think it may have been acquired through lateral gene transfer. Perhaps you did some gene annotation and you know it encodes for a NarG protein, but you don't know anything else about it. Creating a phylogeny with this protein and some reference sequences is a great way to investigate possible lateral gene transfers and see what other sequences are closely related. Or perhaps you found this gene in a particular environmental gene survey and you are interested in knowing what reference sequences are closely related. Either way, a phylogeny is informative.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yy8jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yy7jtte.png\" data-ofn=\"command_line_2.png\" \/><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>"},"is_project":0}],"available_protocols":[]},{"id":"633565","is_changed":0,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"D332B4F9D2024228A0B4DDF7D92D9E77","previous_guid":"A00A6D352B894211B08FBF7AF1438192","previous_id":"632073","last_modified":"1527882069","components":[{"component_id":"1120662","previous_id":0,"original_id":"0","guid":"6790355F31CA4B6F9468A5078CCDB722","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Download a FASTA file of protein sequences ","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Download a FASTA file of protein sequences "},"is_project":0},{"component_id":"1120661","previous_id":"1120662","original_id":"0","guid":"462B3E83B82D4856818F556FAACA40A1","previous_guid":"6790355F31CA4B6F9468A5078CCDB722","component_type_id":"1","data_id":null,"data":"<p>So let's proceed with getting some reference sequences. The EggNOG database has a very nice compilation of marker proteins, so we can download sequences from there:<\/p>\n<p>\u00a0<\/p>\n<p><strong>wget -O narg.faa.gz http:\/\/eggnogapi.embl.de\/nog_data\/text\/fasta\/COG5013<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>And because the file is gzipped, let's uncompress is:<\/p>\n<p>\u00a0<\/p>\n<p><strong>gunzip narg.faa.gz<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Go ahead and take a look at the narg.faa file and make sure it's in the format you think it should be in (FASTA amino acid).<\/p>\n<p>Some simple poking around and basic QC is always a good idea:<\/p>\n<p>\u00a0<\/p>\n<p><strong>head narg.faa<\/strong><\/p>\n<p><strong>grep -c '^&gt;' narg.faa<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>I also like using seqtk and datamash on combination to get some basic stats about the proteins involved (see 'Introduction to analyzing FASTA files' for details here):<\/p>\n<p>\u00a0<\/p>\n<p>For example, if we want to know what the mean, minimum, maximum, and standard deviation for all protein lengths in in narg.faa is, we can use the command:<\/p>\n<p>\u00a0<\/p>\n<p><strong>seqtk comp narg.faa | datamash mean 2 min 2 max 2 sstdev 2<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>For this I got mean = 1177.9, min = 54, max = 1296,\u00a0 and stdev = 211.1.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>So assuming an average Prokaryotic gene length of 1000 bp, which translates to ~330 amino acids, we see that NarG is a fairly long protein.<\/p>\n<p>The code in this step should look like this:<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yzajtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yy9jtte.png\" data-ofn=\"cl2.png\" \/><\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>So let's proceed with getting some reference sequences. The EggNOG database has a very nice compilation of marker proteins, so we can download sequences from there:<\/p>\n<p>\u00a0<\/p>\n<p><strong>wget -O narg.faa.gz http:\/\/eggnogapi.embl.de\/nog_data\/text\/fasta\/COG5013<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>And because the file is gzipped, let's uncompress is:<\/p>\n<p>\u00a0<\/p>\n<p><strong>gunzip narg.faa.gz<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Go ahead and take a look at the narg.faa file and make sure it's in the format you think it should be in (FASTA amino acid).<\/p>\n<p>Some simple poking around and basic QC is always a good idea:<\/p>\n<p>\u00a0<\/p>\n<p><strong>head narg.faa<\/strong><\/p>\n<p><strong>grep -c '^&gt;' narg.faa<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>I also like using seqtk and datamash on combination to get some basic stats about the proteins involved (see 'Introduction to analyzing FASTA files' for details here):<\/p>\n<p>\u00a0<\/p>\n<p>For example, if we want to know what the mean, minimum, maximum, and standard deviation for all protein lengths in in narg.faa is, we can use the command:<\/p>\n<p>\u00a0<\/p>\n<p><strong>seqtk comp narg.faa | datamash mean 2 min 2 max 2 sstdev 2<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>For this I got mean = 1177.9, min = 54, max = 1296,\u00a0 and stdev = 211.1.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>So assuming an average Prokaryotic gene length of 1000 bp, which translates to ~330 amino acids, we see that NarG is a fairly long protein.<\/p>\n<p>The code in this step should look like this:<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yzajtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yy9jtte.png\" data-ofn=\"cl2.png\" \/><\/p>\n<p>\u00a0<\/p>"},"is_project":0}],"available_protocols":[]},{"id":"633673","is_changed":0,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"9B41DED3734147F8B2665A161472A68C","previous_guid":"85796B8863BE4DADB43DE7A5392B8DE6","previous_id":"633675","last_modified":"1527882448","components":[{"component_id":"1120999","previous_id":0,"original_id":"0","guid":"14DFA6C96A0D47B5A0417472D8C4B6A5","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Generate the phylogeny","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Generate the phylogeny"},"is_project":0},{"component_id":"1120998","previous_id":"1120999","original_id":"0","guid":"FC7F702CCAFB43CEA1EBF89B0267101A","previous_guid":"14DFA6C96A0D47B5A0417472D8C4B6A5","component_type_id":"1","data_id":null,"data":"<p>\u00a0<\/p>\n<p>Now that we have our final NarG amino acid file, we can use it as input for ete3, which is a very useful tool that integrates different programs for sequence alignment, alignment trimming, and phylogenetic reconstruction into one interface.<\/p>\n<p>Let's try the following command:<\/p>\n<p>\u00a0<\/p>\n<p><strong>ete3 build -a all_narg.faa -o narg_phylogeny -w standard_trimmed_fasttree --spname-delimiter -C 16<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>This will take a bit to run (5-10 minutes), and it will provide a running log of the processes as they run. A few notes on the flags:<\/p>\n<p>-a is the input. If we had wanted to use nucleic acids we would have used -d.<\/p>\n<p>-o is the output directory. This is where all of the output files will go.<\/p>\n<p>-w is the workflow name. There are many different workflows that are possible, depending on what programs you wish to use for alignment, trimming, and phylogenetic reconstruction. This particular workflow uses Clustal Omega for alignment, Trimal for alignment trimming, and FastTree for phylogenetic inference. A full list of options is available on the ete3 toolkit website:<\/p>\n<p>\u00a0<\/p>\n<p>At the end you should get some command line output that looks like this:<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yzejtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yzdjtte.png\" data-ofn=\"cl4.png\" \/><\/p>\n<p>\u00a0<\/p>\n<p>At the end you should have a directory called narg_phylogeny, and inside that should be another directory called something like 'clustalo_default-trimal01-none-fasttree_full'. Inside that directory will be the .nwk and .fa files with the trees and alignments, respectively, as well as several visualizations of the trees.<\/p>\n<p>\u00a0<\/p>\n<p>If you look at the figures it may take you a bit to find the mystery NarG protein we started with- it should be called 'uncharacterized narg' since that is the name that it had in the mystery_protien.faa file. Once you locate it you can see what other proteins are similar. Here, since we are using sequences from the EggNOG database, you will want to look up what some of the species codes stand for. For example, two of the proteins that is similar to our mystery protein have names that start with the prefix\u00a0314278.NB231, which, if we look up on EggNOG, is the species code for <em>Nitrococcus mobilis<\/em>, which is a marine nitrate-reducing bacterium. So the presence of NarG in this organism makes sense given what is known about its physiology.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yy4jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yy3jtte.png\" data-ofn=\"phylogeny_diagram.png\" \/><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>\u00a0<\/p>\n<p>Now that we have our final NarG amino acid file, we can use it as input for ete3, which is a very useful tool that integrates different programs for sequence alignment, alignment trimming, and phylogenetic reconstruction into one interface.<\/p>\n<p>Let's try the following command:<\/p>\n<p>\u00a0<\/p>\n<p><strong>ete3 build -a all_narg.faa -o narg_phylogeny -w standard_trimmed_fasttree --spname-delimiter -C 16<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>This will take a bit to run (5-10 minutes), and it will provide a running log of the processes as they run. A few notes on the flags:<\/p>\n<p>-a is the input. If we had wanted to use nucleic acids we would have used -d.<\/p>\n<p>-o is the output directory. This is where all of the output files will go.<\/p>\n<p>-w is the workflow name. There are many different workflows that are possible, depending on what programs you wish to use for alignment, trimming, and phylogenetic reconstruction. This particular workflow uses Clustal Omega for alignment, Trimal for alignment trimming, and FastTree for phylogenetic inference. A full list of options is available on the ete3 toolkit website:<\/p>\n<p>\u00a0<\/p>\n<p>At the end you should get some command line output that looks like this:<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yzejtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yzdjtte.png\" data-ofn=\"cl4.png\" \/><\/p>\n<p>\u00a0<\/p>\n<p>At the end you should have a directory called narg_phylogeny, and inside that should be another directory called something like 'clustalo_default-trimal01-none-fasttree_full'. Inside that directory will be the .nwk and .fa files with the trees and alignments, respectively, as well as several visualizations of the trees.<\/p>\n<p>\u00a0<\/p>\n<p>If you look at the figures it may take you a bit to find the mystery NarG protein we started with- it should be called 'uncharacterized narg' since that is the name that it had in the mystery_protien.faa file. Once you locate it you can see what other proteins are similar. Here, since we are using sequences from the EggNOG database, you will want to look up what some of the species codes stand for. For example, two of the proteins that is similar to our mystery protein have names that start with the prefix\u00a0314278.NB231, which, if we look up on EggNOG, is the species code for <em>Nitrococcus mobilis<\/em>, which is a marine nitrate-reducing bacterium. So the presence of NarG in this organism makes sense given what is known about its physiology.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yy4jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yy3jtte.png\" data-ofn=\"phylogeny_diagram.png\" \/><\/p>"},"is_project":0}],"available_protocols":[]},{"id":"633674","is_changed":0,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"116569787EB3423599FF449177BA6992","previous_guid":"D332B4F9D2024228A0B4DDF7D92D9E77","previous_id":"633565","last_modified":"1527882216","components":[{"component_id":"1121000","previous_id":0,"original_id":"0","guid":"47171204D3174F6FBBB8700A41A9D71F","previous_guid":null,"component_type_id":"1","data_id":null,"data":"<p>The mean and max protein lengths are not that different, but there do seem to be some shorter proteins present. We may wish to filter those proteins out, since shorter proteins will complicate sequence alignment and phylogenetic inference.<\/p>\n<p>\u00a0<\/p>\n<p>Let's try filtering out all proteins that are more than two standard deviations shorter than the mean (so 1177 - 2 X 211 = 755).<\/p>\n<p>\u00a0<\/p>\n<p>For this we can use the seqtk subseq command, which will allow us to specify a list of sequences that we wish to sub-sample from the full FASTA file. To do this we first need a file with the lengths of all of the proteins that we wish to retain, listed one after the other in a plain-text file. Let's use some pipes and AWK, which is a handy Unix-provided language that can be used for simple computations like this:<\/p>\n<p>\u00a0<\/p>\n<p><strong>seqtk comp narg.faa | awk '$2&gt;755' | cut -f 1 &gt; narg.long_proteins.list<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>This command does the following: 1) It takes the proteins in the narg.faa file and gets their general stats with seqtk, 2) uses an AWK command to filters through the seqtk comp output and provide only those lines where the second column value is &gt; 755, and 3) then cuts out the first column and puts that in a file called narg.long_proteins.list.<\/p>\n<p>\u00a0<\/p>\n<p>Now we can use 'seqtk subseq' to get a FASTA file of only the proteins longer than 755 amino acids:<\/p>\n<p>\u00a0<\/p>\n<p><strong>seqtk subseq narg.faa narg.long_proteins.list &gt; narg.long_proteins.faa<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>How many proteins did we filter out with our length cutoff? We can check with:<\/p>\n<p>\u00a0<\/p>\n<p><strong>grep -c '^&gt;' narg.faa<\/strong><\/p>\n<p><strong>grep -c '^&gt;' narg.long_proteins.faa<\/strong><\/p>\n<p><strong>\u00a0<\/strong><\/p>\n<p>I got 393 and 367, so we removed 26 of the shortest proteins with our length cutoff.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yzcjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yzbjtte.png\" data-ofn=\"cl3.png\" \/><\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>The mean and max protein lengths are not that different, but there do seem to be some shorter proteins present. We may wish to filter those proteins out, since shorter proteins will complicate sequence alignment and phylogenetic inference.<\/p>\n<p>\u00a0<\/p>\n<p>Let's try filtering out all proteins that are more than two standard deviations shorter than the mean (so 1177 - 2 X 211 = 755).<\/p>\n<p>\u00a0<\/p>\n<p>For this we can use the seqtk subseq command, which will allow us to specify a list of sequences that we wish to sub-sample from the full FASTA file. To do this we first need a file with the lengths of all of the proteins that we wish to retain, listed one after the other in a plain-text file. Let's use some pipes and AWK, which is a handy Unix-provided language that can be used for simple computations like this:<\/p>\n<p>\u00a0<\/p>\n<p><strong>seqtk comp narg.faa | awk '$2&gt;755' | cut -f 1 &gt; narg.long_proteins.list<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>This command does the following: 1) It takes the proteins in the narg.faa file and gets their general stats with seqtk, 2) uses an AWK command to filters through the seqtk comp output and provide only those lines where the second column value is &gt; 755, and 3) then cuts out the first column and puts that in a file called narg.long_proteins.list.<\/p>\n<p>\u00a0<\/p>\n<p>Now we can use 'seqtk subseq' to get a FASTA file of only the proteins longer than 755 amino acids:<\/p>\n<p>\u00a0<\/p>\n<p><strong>seqtk subseq narg.faa narg.long_proteins.list &gt; narg.long_proteins.faa<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>How many proteins did we filter out with our length cutoff? We can check with:<\/p>\n<p>\u00a0<\/p>\n<p><strong>grep -c '^&gt;' narg.faa<\/strong><\/p>\n<p><strong>grep -c '^&gt;' narg.long_proteins.faa<\/strong><\/p>\n<p><strong>\u00a0<\/strong><\/p>\n<p>I got 393 and 367, so we removed 26 of the shortest proteins with our length cutoff.\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yzcjtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yzbjtte.png\" data-ofn=\"cl3.png\" \/><\/p>"},"is_project":0},{"component_id":"1121001","previous_id":"1121000","original_id":"0","guid":"E09C6DED7408434180BF6A8340A7FA7B","previous_guid":"47171204D3174F6FBBB8700A41A9D71F","component_type_id":"6","data_id":"0","data":"Filter out short sequences","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Filter out short sequences"},"is_project":0}],"available_protocols":[]},{"id":"633675","is_changed":0,"original_id":"0","is_skipped":"0","is_checked":"0","guid":"85796B8863BE4DADB43DE7A5392B8DE6","previous_guid":"116569787EB3423599FF449177BA6992","previous_id":"633674","last_modified":"1527881529","components":[{"component_id":"1121003","previous_id":0,"original_id":"0","guid":"1DE76798C24841CAB3905F485C6AFC35","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Remove redundant sequences from the reference file","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Remove redundant sequences from the reference file"},"is_project":0},{"component_id":"1121002","previous_id":"1121003","original_id":"0","guid":"29291B837DB146C48CDCB48429E5B410","previous_guid":"1DE76798C24841CAB3905F485C6AFC35","component_type_id":"1","data_id":null,"data":"<p>Sometimes you will find that the reference sequences are highly redundant, meaning that a large number of sequences in the file are identical or nearly identical. Usually we are interested in getting a pretty broad view of phylogenetic relationships at this stage, so it may be worth while to de-replicate the reference sequences rather than spend a lot of time later computing phylogenies of sequences that are 99% identical.<\/p>\n<p>\u00a0<\/p>\n<p>For sequence-based dereplication a handy tool is CD-HIT. You should be able to install this tool fairly easily using:<\/p>\n<p>\u00a0<\/p>\n<p><strong>sudo apt install cd-hit<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>And if you just type cd-hit into the command line afterwards you should be able to view the many different options that this tool provides.<\/p>\n<p>Be default cd-hit will take a FASTA file of proteins and identify clusters that are 90% or more identical over 90% the length of the shorter protein. These sequences are then grouped together, and one (usually the longest protein) is chosen as a 'representative'. This way we can just use cluster representatives in our final analysis rather than using every single sequence. Note that the % identity and % overlap thresholds can be modified using various flags in the help menu, so you could opt to remove redundancy only at the 99% amino acid identity level if you were interested in removing only the very very similar sequences, for example.<\/p>\n<p>Let's try a simple command with the default parameters:<\/p>\n<p>\u00a0<\/p>\n<p><strong>cdhit -i narg.long_proteins.faa -o narg.nr.faa<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>CD-HIT will print out some general log of what it's doing before finishing. You can check out the files that were created with 'ls -l':<\/p>\n<p>You should see the output file we specified 'all_narg.nr.faa', which will have the cluster representatives, as well as a .clstr file which contains information about what sequences were clustered together. We will work mainly with the .nr.faa file.<\/p>\n<p>\u00a0<\/p>\n<p>Now let's check to see how many sequences were in the original file, and how many fewer are in new .nr.faa file (i.e, how many cluster representatives there are compared to raw sequences).<\/p>\n<p>\u00a0<\/p>\n<p><strong>grep -c '^&gt;' narg.long_proteins.faa<\/strong><\/p>\n<p><strong>grep -c '^&gt;' narg.nr.faa<\/strong><\/p>\n<p><strong>\u00a0<\/strong><\/p>\n<p>I got 367 and 226, which indicates we removed 141 sequences. This will save us some time when we generate the phylogeny in the next steps.<\/p>\n<p>\u00a0<\/p>\n<p>Before we proceed, let's combined our non-redundant reference sequences with our mystery sequence so that we have one consolidated FASTA file to use for phylogenetic reconstruction:<\/p>\n<p>\u00a0<\/p>\n<p><strong>cat mystery_protein.faa narg.nr.faa &gt; all_narg.faa<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Overall the commands should look something like this:<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yy6jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yy5jtte.png\" data-ofn=\"command_line1.png\" \/><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Sometimes you will find that the reference sequences are highly redundant, meaning that a large number of sequences in the file are identical or nearly identical. Usually we are interested in getting a pretty broad view of phylogenetic relationships at this stage, so it may be worth while to de-replicate the reference sequences rather than spend a lot of time later computing phylogenies of sequences that are 99% identical.<\/p>\n<p>\u00a0<\/p>\n<p>For sequence-based dereplication a handy tool is CD-HIT. You should be able to install this tool fairly easily using:<\/p>\n<p>\u00a0<\/p>\n<p><strong>sudo apt install cd-hit<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>And if you just type cd-hit into the command line afterwards you should be able to view the many different options that this tool provides.<\/p>\n<p>Be default cd-hit will take a FASTA file of proteins and identify clusters that are 90% or more identical over 90% the length of the shorter protein. These sequences are then grouped together, and one (usually the longest protein) is chosen as a 'representative'. This way we can just use cluster representatives in our final analysis rather than using every single sequence. Note that the % identity and % overlap thresholds can be modified using various flags in the help menu, so you could opt to remove redundancy only at the 99% amino acid identity level if you were interested in removing only the very very similar sequences, for example.<\/p>\n<p>Let's try a simple command with the default parameters:<\/p>\n<p>\u00a0<\/p>\n<p><strong>cdhit -i narg.long_proteins.faa -o narg.nr.faa<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>CD-HIT will print out some general log of what it's doing before finishing. You can check out the files that were created with 'ls -l':<\/p>\n<p>You should see the output file we specified 'all_narg.nr.faa', which will have the cluster representatives, as well as a .clstr file which contains information about what sequences were clustered together. We will work mainly with the .nr.faa file.<\/p>\n<p>\u00a0<\/p>\n<p>Now let's check to see how many sequences were in the original file, and how many fewer are in new .nr.faa file (i.e, how many cluster representatives there are compared to raw sequences).<\/p>\n<p>\u00a0<\/p>\n<p><strong>grep -c '^&gt;' narg.long_proteins.faa<\/strong><\/p>\n<p><strong>grep -c '^&gt;' narg.nr.faa<\/strong><\/p>\n<p><strong>\u00a0<\/strong><\/p>\n<p>I got 367 and 226, which indicates we removed 141 sequences. This will save us some time when we generate the phylogeny in the next steps.<\/p>\n<p>\u00a0<\/p>\n<p>Before we proceed, let's combined our non-redundant reference sequences with our mystery sequence so that we have one consolidated FASTA file to use for phylogenetic reconstruction:<\/p>\n<p>\u00a0<\/p>\n<p><strong>cat mystery_protein.faa narg.nr.faa &gt; all_narg.faa<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>Overall the commands should look something like this:<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yy6jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/yy5jtte.png\" data-ofn=\"command_line1.png\" \/><\/p>"},"is_project":0}],"available_protocols":[]}]}