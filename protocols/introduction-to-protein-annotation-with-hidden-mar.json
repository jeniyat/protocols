{"uri":"introduction-to-protein-annotation-with-hidden-mar-pijdkcn","version_id":"0","protocol_name":"Introduction to protein annotation with Hidden Markov Models","protocol_name_html":"Introduction to protein annotation with Hidden Markov Models","is_prepublished":"0","can_edit":"0","parent_id":null,"api_version":"1","is_new_mode":"0","last_modified":"1523996689","type_id":"1","link":null,"fork_id":"","public_fork_note":"","number_of_steps":"7","has_versions":"0","first_published_date":"1523996689","publish_date":"2018-04-17 20:24:49","documents":null,"have_protocol_in_step":"0","is_protocol_in_step":"0","vendor_name":"Contributed by users","vendor_link":"https:\/\/www.protocols.io","vendor_logo":"\/img\/vendors\/1.png","mod_mins":"-45","mod_secs":"1","description":"<p>Here is a general tutoral on how to begin annotating proteins with Hidden Markov Models. A small test set of HMMs is provided in the Git repo downloaded in the first step.\u00a0<\/p>","is_bookmarked":"0","can_reassign":"1","before_start":null,"has_guidelines":"0","materials":[],"warning":null,"version_class":"11563","public":"1","is_owner":"1","is_original_owner":"1","created_on":"1523986276","protocol_affiliation":"Virginia Tech","affiliation":"Virginia Tech","doi":"dx.doi.org\/10.17504\/protocols.io.pijdkcn","doi_status":"2","changed_fork_steps":null,"profile_url":"FrankAylward-y22344v2x2","protocol_img":"https:\/\/www.protocols.io\/img\/default_protocol.png","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","full_name":"Frank Aylward","created_by":"Frank Aylward","private_link":"BA6B5B7152289B911889E93DC512BEE8","original_img":"1","username":"frank-aylward","is_retracted":"0","retraction_reason":null,"plos_id":null,"manuscript_citation":null,"journal_name":null,"is_donations_disabled":"0","is_donations_disabled_by_user":"9","item_record_id":304759,"fork_info":[],"compare_forks":[],"protocols":[],"groups":[],"number_of_shared_runs":[],"ownership_history":[],"keywords":"","transfer_to_user":[],"sub_transfer":false,"is_transfer_pending":false,"number_of_bookmarks":"0","collections":[],"tags":[],"archived":0,"sub_authors":[],"sub_protocols_number":0,"can_edit_shared":0,"shared_runs":[],"is_shared_run":0,"is_shared":1,"banner":null,"contact_badges":[{"badge_id":"4","badge_image":"\/img\/badges\/gold.svg","badge_description":"Gold power author!"}],"number_of_comments":0,"is_locked":0,"is_locked_by":false,"authors":"Frank Aylward","authors_list":[{"name":"Frank Aylward","affiliation":"Virginia Tech","username":"frank-aylward","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png"}],"user":{"profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/v39jtte.png","username":"frank-aylward","full_name":"Frank Aylward","created_by":"Frank Aylward"},"access":{"can_view":"1","can_remove":"0","can_add":"0","can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":"0","can_move":"1","can_transfer":"1","can_download":"1","is_locked":"0"},"is_contact_suspended":0,"guidelines":null,"status_id":"2","is_research":"0","status_info":"We are still developing and optimizing this protocol","steps":[{"id":"622414","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"D1F428675E7F4F1A8F0D524BC0359234","previous_guid":null,"previous_id":"0","last_modified":"1523996184","components":[{"component_id":"1092383","previous_id":0,"original_id":"0","guid":"241AAF4A67B64AEA82EB8B1611B654CD","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Get the data","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Get the data"},"is_project":0},{"component_id":"1092382","previous_id":"1092383","original_id":"0","guid":"3B48D48C9AC54917BFEF370CC971CABF","previous_guid":"241AAF4A67B64AEA82EB8B1611B654CD","component_type_id":"1","data_id":null,"data":"<p>Let's clone some data files from my Github repo to get started.\u00a0<\/p>\n<p>git clone https:\/\/github.com\/faylward\/hmm_tutorial<\/p>\n<p>\u00a0<\/p>\n<p>Now let's go inside the new folder:<\/p>\n<p>cd hmm_tutorial<\/p>\n<p>\u00a0<\/p>\n<p>And let's see what's inside:<\/p>\n<p>ls -l<\/p>\n<p>\u00a0<\/p>\n<p>You should see something like this:<img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v37jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v36jtte.png\" data-ofn=\"Screenshot (7).png\" \/><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Let's clone some data files from my Github repo to get started.\u00a0<\/p>\n<p>git clone https:\/\/github.com\/faylward\/hmm_tutorial<\/p>\n<p>\u00a0<\/p>\n<p>Now let's go inside the new folder:<\/p>\n<p>cd hmm_tutorial<\/p>\n<p>\u00a0<\/p>\n<p>And let's see what's inside:<\/p>\n<p>ls -l<\/p>\n<p>\u00a0<\/p>\n<p>You should see something like this:<img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v37jtte.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/v36jtte.png\" data-ofn=\"Screenshot (7).png\" \/><\/p>"},"is_project":0}]},{"id":"622415","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"61E88AE1CE6F4A669C5E750030AB7EAD","previous_guid":"D1F428675E7F4F1A8F0D524BC0359234","previous_id":"622414","last_modified":"1523996313","components":[{"component_id":"1092385","previous_id":0,"original_id":"0","guid":"08B15EEE73EA433694CE5739B7036C46","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Predict genes","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Predict genes"},"is_project":0},{"component_id":"1092384","previous_id":"1092385","original_id":"0","guid":"82593C85A53D42BCA873BDCD7148848A","previous_guid":"08B15EEE73EA433694CE5739B7036C46","component_type_id":"1","data_id":null,"data":"<p>Now we have some genome files (.fna) but we need to get some proteins to begin annotating. To do this let's use Prodigal.\u00a0<\/p>\n<p># Prodigal will predict genes from chromosomes (or contigs), translate those genes into amino acids, and produce annotation summary files (such as \"gene feature format\", or gff, files), depending on what options you use. <br \/>prodigal -i med4_genome.fna -a med4.proteins.faa -d med4.genes.fna -f gff -o med4.prodigal.gff<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Now we have some genome files (.fna) but we need to get some proteins to begin annotating. To do this let's use Prodigal.\u00a0<\/p>\n<p># Prodigal will predict genes from chromosomes (or contigs), translate those genes into amino acids, and produce annotation summary files (such as \"gene feature format\", or gff, files), depending on what options you use. <br \/>prodigal -i med4_genome.fna -a med4.proteins.faa -d med4.genes.fna -f gff -o med4.prodigal.gff<\/p>"},"is_project":0}]},{"id":"622418","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"3B4774A500FD478CA89914BB9FFC40FA","previous_guid":"61E88AE1CE6F4A669C5E750030AB7EAD","previous_id":"622415","last_modified":"1523996404","components":[{"component_id":"1092392","previous_id":0,"original_id":"0","guid":"04E1B70FB32F4EC1AFCD8D3DD5CA2B2A","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Protein prediction QC","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Protein prediction QC"},"is_project":0},{"component_id":"1092391","previous_id":"1092392","original_id":"0","guid":"EEC1250373334EDF98104209F7BCBC77","previous_guid":"04E1B70FB32F4EC1AFCD8D3DD5CA2B2A","component_type_id":"1","data_id":null,"data":"<p>Always good to check the files we just created to make sure we know what's inside. Let's use seqtk to take a quick look at what's inside the .faa files.\u00a0<\/p>\n<p>\u00a0<br \/>seqtk comp med4.proteins.faa | head<\/p>\n<p>\u00a0<\/p>\n<p>And how many proteins total were predicted?<\/p>\n<p>\u00a0<\/p>\n<p>seqtk comp med4.proteins.faa | wc<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Always good to check the files we just created to make sure we know what's inside. Let's use seqtk to take a quick look at what's inside the .faa files.\u00a0<\/p>\n<p>\u00a0<br \/>seqtk comp med4.proteins.faa | head<\/p>\n<p>\u00a0<\/p>\n<p>And how many proteins total were predicted?<\/p>\n<p>\u00a0<\/p>\n<p>seqtk comp med4.proteins.faa | wc<\/p>"},"is_project":0}]},{"id":"622419","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"D536ABFCF0894A61A29E793222D5C10E","previous_guid":"3B4774A500FD478CA89914BB9FFC40FA","previous_id":"622418","last_modified":"1523996431","components":[{"component_id":"1092394","previous_id":0,"original_id":"0","guid":"8B7474B6CAA54C7195703971BA75F8C0","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Now query the proteins against the HMMs that we have in the folder","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Now query the proteins against the HMMs that we have in the folder"},"is_project":0},{"component_id":"1092393","previous_id":"1092394","original_id":"0","guid":"1DC6AEFA3B784D1785962778DB5C9D42","previous_guid":"8B7474B6CAA54C7195703971BA75F8C0","component_type_id":"1","data_id":null,"data":"<p># Now run the HMMER command. Note that the last two arguments are \"positional arguments\" since they do not have flags in front of them. The .hmm file and the query protein file must always be provided at the end, in that order. <br \/>hmmsearch --tblout med4.hmmout -o med4.output cog_hmms.hmm med4.proteins.faa<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p># Now run the HMMER command. Note that the last two arguments are \"positional arguments\" since they do not have flags in front of them. The .hmm file and the query protein file must always be provided at the end, in that order. <br \/>hmmsearch --tblout med4.hmmout -o med4.output cog_hmms.hmm med4.proteins.faa<\/p>"},"is_project":0}]},{"id":"622420","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"4561735B843542DBA545C979FDD98925","previous_guid":"D536ABFCF0894A61A29E793222D5C10E","previous_id":"622419","last_modified":"1523996456","components":[{"component_id":"1092395","previous_id":0,"original_id":"0","guid":"C735450E4325426DB370866D1D3DEBF4","previous_guid":null,"component_type_id":"1","data_id":null,"data":"<p># The main tabulated output we want is in med4.hmmout. Unfortunately the authors of HMMER made the output space-delimited, so it's a bit hard to look at or put in an Excel spreadsheet. <br \/># I made a small Python script that will parse through this output, pull out the best hit for each query protein, and put it in a tab-delimited output. <br \/>python parse_hmmout.py med4.hmmout &gt; med4.hmmout.parsed<\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p># The main tabulated output we want is in med4.hmmout. Unfortunately the authors of HMMER made the output space-delimited, so it's a bit hard to look at or put in an Excel spreadsheet. <br \/># I made a small Python script that will parse through this output, pull out the best hit for each query protein, and put it in a tab-delimited output. <br \/>python parse_hmmout.py med4.hmmout &gt; med4.hmmout.parsed<\/p>"},"is_project":0},{"component_id":"1092396","previous_id":"1092395","original_id":"0","guid":"4B3E3812056A414AA718F2F62441DD5B","previous_guid":"C735450E4325426DB370866D1D3DEBF4","component_type_id":"6","data_id":"0","data":"Parse the output to get the best matches for the query proteins","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Parse the output to get the best matches for the query proteins"},"is_project":0}]},{"id":"622421","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"5A9E2A87DBD24AE68B905B10B99106CD","previous_guid":"4561735B843542DBA545C979FDD98925","previous_id":"622420","last_modified":"1523996487","components":[{"component_id":"1092398","previous_id":0,"original_id":"0","guid":"DAACCED161EA4B4EB5A3DF6B886E9338","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Play around with the parameters and employ cutoffs to ensure good matches","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Play around with the parameters and employ cutoffs to ensure good matches"},"is_project":0},{"component_id":"1092397","previous_id":"1092398","original_id":"0","guid":"3E526DD23FFE40778A1665DC61808279","previous_guid":"DAACCED161EA4B4EB5A3DF6B886E9338","component_type_id":"1","data_id":null,"data":"<p># Now you may notice some hits that have very low bit scores. This is because we did not use any quality cutoffs when we ran HMMER. Just like with BLAST, there is an e-value cutoff option that we can use. <br \/># For that we can use the following command:<br \/>hmmsearch -E 1e-10 --tblout med4.hmmout -o med4.output cog_hmms.hmm med4.proteins.faa<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p># Now you may notice some hits that have very low bit scores. This is because we did not use any quality cutoffs when we ran HMMER. Just like with BLAST, there is an e-value cutoff option that we can use. <br \/># For that we can use the following command:<br \/>hmmsearch -E 1e-10 --tblout med4.hmmout -o med4.output cog_hmms.hmm med4.proteins.faa<\/p>"},"is_project":0}]},{"id":"622422","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"1A83EFD6E9DD40CAAAAB93EBF8C0354D","previous_guid":"5A9E2A87DBD24AE68B905B10B99106CD","previous_id":"622421","last_modified":"1523996508","components":[{"component_id":"1092400","previous_id":0,"original_id":"0","guid":"D70A46448D85477388D836A7EE09BD8C","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Now try again with another genome","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Now try again with another genome"},"is_project":0},{"component_id":"1092399","previous_id":"1092400","original_id":"0","guid":"51A732C80DD84503B70482A318E1B1B1","previous_guid":"D70A46448D85477388D836A7EE09BD8C","component_type_id":"1","data_id":null,"data":"<p># Now let's practice again with another genome and see what we get. A new genome is in the file N_maritimus.fna. This is an Archaea called Nitrosopumilis maritimus, an abundant ammonia-oxidizing microbe in the ocean. <br \/># Here is the overall workflow:<br \/>prodigal -i N_maritimus.fna -a N_maritimus.faa -f gff -o N_maritimus.gff<br \/>hmmsearch -E 1e-10 --tblout N_maritimus.hmmout -o N_maritimus.output cog_hmms.hmm N_maritimus.faa<br \/>python parse_hmmout.py N_maritimus.hmmout &gt; N_maritimus.hmmout.parsed<\/p>\n<p># what functional genes are present here that are not present in Prochlorococcus? Which genes are present in both?<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p># Now let's practice again with another genome and see what we get. A new genome is in the file N_maritimus.fna. This is an Archaea called Nitrosopumilis maritimus, an abundant ammonia-oxidizing microbe in the ocean. <br \/># Here is the overall workflow:<br \/>prodigal -i N_maritimus.fna -a N_maritimus.faa -f gff -o N_maritimus.gff<br \/>hmmsearch -E 1e-10 --tblout N_maritimus.hmmout -o N_maritimus.output cog_hmms.hmm N_maritimus.faa<br \/>python parse_hmmout.py N_maritimus.hmmout &gt; N_maritimus.hmmout.parsed<\/p>\n<p># what functional genes are present here that are not present in Prochlorococcus? Which genes are present in both?<\/p>"},"is_project":0}]}]}