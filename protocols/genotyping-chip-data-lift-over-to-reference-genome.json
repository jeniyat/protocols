{"id":19529,"title":"Genotyping chip data lift-over to reference genome build GRCh38\/hg38","title_html":"Genotyping chip data lift-over to reference genome build GRCh38\/hg38","image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/bfafi986.png","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/bfafi986.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.xbhfij6","doi_status":2,"uri":"genotyping-chip-data-lift-over-to-reference-genome-xbhfij6","type_id":1,"published_on":1554119632,"version_id":1,"created_on":1548074190,"categories":null,"creator":{"name":"Priit Palta","affiliation":"FIMM, University of Helsinki","username":"priit-palta","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/tsri986.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/tsri986.jpg"},"badges":[{"id":2,"image":{"source":"\/img\/badges\/bronze.svg","placeholder":"\/img\/badges\/bronze.svg"},"name":"Author"},{"id":6,"image":{"source":"\/img\/badges\/socialbutterfly.svg","placeholder":"\/img\/badges\/socialbutterfly.svg"},"name":"Social butterfly"}],"research_interests":null},"journal":null,"journal_name":null,"journal_link":null,"public":1,"has_versions":1,"link":null,"total_collections":0,"number_of_steps":13,"authors":[{"name":"Kalle P\u00e4rn","affiliation":"FIMM, University of Helsinki","username":"kalle-prn","link":null,"image":{"source":"\/img\/avatars\/014.png","placeholder":"\/img\/avatars\/014.png"},"badges":[],"research_interests":null},{"name":"Javier Nunez Fontarnau","affiliation":"FIMM, University of Helsinki","username":"javier-nunez-fontarnau","link":null,"image":{"source":"\/img\/avatars\/006.png","placeholder":"\/img\/avatars\/006.png"},"badges":[],"research_interests":null},{"name":"Marita A. Isokallio","affiliation":"FIMM, University of Helsinki","username":"marita-a-isokallio","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/swii3gw.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/swii3gw.jpg"},"badges":[],"research_interests":null},{"name":"Timo Sipil\u00e4","affiliation":"FIMM, University of Helsinki","username":"timo-sipil","link":null,"image":{"source":"\/img\/avatars\/017.png","placeholder":"\/img\/avatars\/017.png"},"badges":[],"research_interests":null},{"name":"Elina Kilpelainen","affiliation":"FIMM, University of Helsinki","username":"elina-kilpelainen","link":null,"image":{"source":"\/img\/avatars\/004.png","placeholder":"\/img\/avatars\/004.png"},"badges":[],"research_interests":null},{"name":"Aarno Palotie","affiliation":"equal contribution; FIMM, University of Helsinki","username":null,"link":null,"image":{"source":null,"placeholder":null},"badges":[],"research_interests":null},{"name":"Samuli Ripatti","affiliation":"equal contribution; FIMM, University of Helsinki","username":null,"link":null,"image":{"source":null,"placeholder":null},"badges":[],"research_interests":null},{"name":"Priit Palta","affiliation":"equal contribution; FIMM, University of Helsinki","username":"priit-palta","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/tsri986.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/tsri986.jpg"},"badges":[],"research_interests":null}],"versions":[],"groups":[{"id":617,"uri":"seqinfo","title":"FIMM HumGen Sequencing Informatics","image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/vs7i986.png","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/vs7i986.png"},"tech_support":{"email":null,"phone":null,"hide_contact":0,"use_email":0},"is_member":1,"request":{"id":617,"uri":"seqinfo","title":"FIMM HumGen Sequencing Informatics","image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/vs7i986.png","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/vs7i986.png"},"tech_support":{"email":null,"phone":null,"hide_contact":0,"use_email":0},"is_member":1,"description":null,"research_interests":null,"website":null,"location":null,"affiliation":null,"status":{"is_visible":true,"access_level":0},"stats":{"files":[],"total_members":0,"total_followers":0,"total_child_groups":0,"total_parent_groups":0,"has_collaborations":0},"user_status":{"is_member":true,"is_confirmed":true,"is_invited":false,"is_owner":false,"is_admin":false,"is_following":false},"join_link":null,"token":null,"owner":{"name":" ","affiliation":null,"username":null,"link":null,"image":{"source":null,"placeholder":null},"badges":[],"research_interests":null},"is_protocol_requested":0,"is_group_requested":0,"is_my":false,"is_request":false,"is_confirmed":1,"is_declined":0,"requester":{"name":" ","affiliation":null,"affiliation_url":null,"username":null,"link":null},"protocol":{"id":0,"title":"Genotyping chip data lift-over to reference genome build GRCh38\/hg38","title_html":"Genotyping chip data lift-over to reference genome build GRCh38\/hg38","image":{"source":null,"placeholder":null},"doi":null,"doi_status":0,"uri":"genotyping-chip-data-lift-over-to-reference-genome-xbhfij6","type_id":1,"published_on":null,"stats":{"number_of_views":0,"number_of_steps":0,"number_of_bookmarks":0,"number_of_comments":0,"number_of_exports":0}},"created_on":1554119631,"resolve_on":0,"resolved_user":{"name":" ","affiliation":null,"username":null,"link":null,"image":{"source":null,"placeholder":null},"badges":[],"research_interests":null},"shared":false}}],"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":0,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"steps":[{"id":700236,"guid":"A6695A49985D41D2AC738DA618D96522","previous_id":700241,"previous_guid":"5C5E42C3F6B44695B9EE6C5CE008BAA2","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"42151467F32E41EF9E9980FBC604CC60","order_id":1,"type_id":6,"title":"Section","source":{"title":"Genome build lift-over"}},{"id":1054724,"guid":"21E139DBDA9B47D6BBD290C4708554DD","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">If the genotyping chip used an older reference genome version (e.g. GRCh37\/hg19) and is in PLINK format, the data have to be lifted over to human genome build version 38 (GRCh38\/hg38).<\/div><div class = \"text-block\">For the genome build lift-over we suggest Will Rayner's method.<\/div><div class = \"text-block\">Download your genotyping chip specific build 38 zip file (strand and position files) and 'update_build.sh' script from:\u00a0<\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">http:\/\/www.well.ox.ac.uk\/~wrayner\/strand\/<\/span><\/a><\/div><div class = \"text-block\">To download the files:<\/div><div class = \"text-block\">If the genotyping chip platform information is lost, you can try Chipendium to identify the platform based on your data. See Will Rayner's web page for more information: <\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">http:\/\/mccarthy.well.ox.ac.uk\/chipendium\/ui\/<\/span><\/a><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">IMPORTANT NOTES:<\/span><\/div><div class = \"text-block\">\u2022 'update_build.sh' uses hardcoded command 'plink', make sure you have exported the path correctly or replace the plink commands with full path to your PLINK v1.9 installation.<\/div><div class = \"text-block\">\u2022 The method assumes the chip data in Illumina TOP strand format. If this is not the case, you might need to use ILMN or SOURCE strand files, as instructed on the Will Rayner's web page, or follow the optional steps to fix potential issues.<\/div><div class = \"text-block\">Uncompress the downloaded files and use the .strand file to run the script with the command below.<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Input files:<\/span><span>\n\u2022 DATASET = input file prefix of PLINK format files (.bed, .bim, .fam)\n\u2022 <chip_strandfiles>.zip strand files corresponding the genotyping chip<\/span><\/div><div class = \"text-block\">\u2022 <chip_strandfiles>.strand corresponding the unzipped genotyping chip .strand file<\/div><div class = \"text-block\">\u2022 OUTPUT = output file prefix of PLINK format files (.bed, .bim, .fam)<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Output files:<\/span><span>\n\u2022 OUTPUT.bed<\/span><\/div><div class = \"text-block\">\u2022 OUTPUT.bim<\/div><div class = \"text-block\">\u2022 OUTPUT.fam<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><\/div><\/code><\/pre><\/div><\/div>"}},{"id":1054725,"guid":"21A6A750293B11E9A2CA773793958D2B","order_id":2,"type_id":15,"title":"command","source":{"name":"wget http:\/\/www.well.ox.ac.uk\/~wrayner\/strand\/update_build.sh\nwget http:\/\/www.well.ox.ac.uk\/~wrayner\/strand\/your_chip_platform_specific_chip_strandfile-b38-strand.zip","command":"","os_name":"","os_version":""}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":700237,"guid":"D324BC8F8D164AB5AB5B32B276690B7B","previous_id":700236,"previous_guid":"A6695A49985D41D2AC738DA618D96522","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"2AF4E40A2C6840DCBD005F6B801E4D66","order_id":1,"type_id":6,"title":"Section","source":{"title":"Lift-over verification"}},{"id":1054724,"guid":"69E4C69E48CA47679F87B289984E288B","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">To confirm the successful genome build lift-over, chip data allele frequencies are compared against the reference data allele frequencies. In this step, chip data allele frequency file is generated.<\/div><div class = \"text-block\">We define the VCF-style frequency file format for GRCh38\/hg38 as follows:<\/div><div class = \"text-block\"><ol style = \"list-style-type: decimal;\"><li style = \"counter-reset:ol0;\">CHR - Chromosome code (with 'chr' tag, e.g. 'chr1')<\/li><li style = \"counter-reset:ol0;\">SNP - Variant identifier in format CHR_POS_REF_ALT<\/li><li style = \"counter-reset:ol0;\">REF - Reference allele (A, C, G, T)<\/li><li style = \"counter-reset:ol0;\">ALT - Alternative allele (A, C, G, T)<\/li><li style = \"counter-reset:ol0;\">AF - Allele frequency (values from 0 to 1)<\/li><\/ol><\/div><div class = \"text-block\">Convert the chip data files to VCF with Plink v2 using the reference genome fasta file to force the correct reference alleles. Calculate the AF values and generate the frequency file.<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Input files (from Step 2):<\/span><\/div><div class = \"text-block\">\u2022 DATASET.bed<\/div><div class = \"text-block\">\u2022 DATASET.bim<\/div><div class = \"text-block\">\u2022 DATASET.fam<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Output files:<\/span><\/div><div class = \"text-block\">\u2022 DATASET.vcf.gz<\/div><div class = \"text-block\">\u2022 DATASET_AF.vcf.gz<\/div><div class = \"text-block\">\u2022 DATASET.frq<\/div><div class = \"text-block\">For the most accurate solution, use Plink v2 and BCFtools as follows:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Step 3.1<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Step 3.2<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">QUICK'n'DIRTY ALTERNATIVE WAY TO GENERATE THE FREQUENCY FILE<\/span><\/div><div class = \"text-block\"><span>Quick and dirty way is to use Plink v1.9 and awk to generate the correct format AF file as indicated in the protocol <\/span><span style = \"font-weight:bold;\">Version 1 Step 3 <\/span><span>(it is accessible by pressing the Version 2 button on the top left corner of this protocol).<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Note<\/span><span>: In that approach, the number of variants is duplicated and should be taken into consideration when evaluating the results with the plotting script in the next step!<\/span><\/div><\/div>"}},{"id":1054725,"guid":"DFEB9F402E9011E9A408DB5CDD270D88","order_id":2,"type_id":15,"title":"command","source":{"name":"FASTA=\/path\/to\/your_reference_genome.fasta\nBCFTOOLS_PLUGINS=\/path\/to\/bcftools_installation\/plugins\n\nDATASET=your_dataset_prefix\n\n# Convert to VCF utilizing fasta file\nplink2 \\\n    --bfile ${DATASET} \\\n    --recode vcf id-paste=iid bgz \\\n    --ref-from-fa \\\n    --fa ${FASTA} \\\n    --output-chr chrM \\\n    --out ${DATASET}","command":"","os_name":"","os_version":""}},{"id":1054726,"guid":"63531ED029D711E9A2CA773793958D2B","order_id":3,"type_id":15,"title":"command","source":{"name":"BCFTOOLS_PLUGINS=\/path\/to\/bcftools_installation\/plugins\n\nDATASET=your_dataset_prefix\nVCF=your_dataset_prefix.vcf.gz\n\n# Extract frequencies with BCFtools\n# Requires environment variable BCFTOOLS_PLUGINS\nexport BCFTOOLS_PLUGINS=${BCFTOOLS_PLUGINS}\nbcftools +fill-tags ${VCF}\\\n     -Oz -o ${DATASET}_AF.vcf.gz -- -t AF\nbcftools query \\\n    -f '%CHROM\\t%CHROM\\_%POS\\_%REF\\_%ALT\\t%REF\\t%ALT\\t%INFO\/AF\\n' \\\n    ${DATASET}_AF.vcf.gz | \\\nsed '1iCHR\\tSNP\\tREF\\tALT\\tAF' > ${DATASET}.frq","command":"","os_name":"","os_version":""}}],"cases":null,"data":null,"section":null,"section_color":"#bd10e0"},{"id":700238,"guid":"0287AA74E5984035B2F504D19A1090B2","previous_id":700243,"previous_guid":"BF43720BD1384E6DAAB27330AA36EB22","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"D208828A25054BBF894561A96CF578D8","order_id":1,"type_id":6,"title":"Section","source":{"title":"OPTIONAL: data consistency verification (PLINK format)"}},{"id":1054724,"guid":"D88C9C423F7E44BBBFCE14D36A2A79D5","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span style = \"font-weight:bold;\">Steps 11-13<\/span><span> are meant to tackle possible issues we have observed in various legacy data sets in PLINK format.<\/span><\/div><div class = \"text-block\"><span>If for some reason your <\/span><span style = \"font-weight:bold;\">.fam<\/span><span> file does not include the sex information (e.g. a VCF converted to PLINK format files loses the sex information), this information need to be added into the <\/span><span style = \"font-weight:bold;\">.fam<\/span><span> file from a separate file.<\/span><\/div><div class = \"text-block\">Confirm that the sex information is present in the 5th column for all samples.<\/div><div class = \"text-block\"><span>If not, obtain the sex information from the original source of your data and update the<\/span><span style = \"font-weight:bold;\"> .fam<\/span><span> file as suggested in the comman below.<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Input files:<\/span><\/div><div class = \"text-block\">\u2022 DATASET_genders.txt - containing FID and IID in the first two columns and sex information in the third column as 1 = male, 2 = female or 0 = ambiguous<\/div><div class = \"text-block\">\u2022 DATASET.bed<\/div><div class = \"text-block\">\u2022 DATASET.bim<\/div><div class = \"text-block\">\u2022 DATASET.fam<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Output files:<\/span><\/div><div class = \"text-block\">\u2022 DATASET_updated_genders.bed<\/div><div class = \"text-block\">\u2022 DATASET_updated_genders.bim<\/div><div class = \"text-block\">\u2022 DATASET_updated_genders.fam<\/div><\/div>"}},{"id":1054725,"guid":"921EA7A237B146FBA21A9093A7FA05E6","order_id":2,"type_id":15,"title":"command","source":{"name":"DATASET=your_dataset_prefix\n\n# Update genders\nplink \\\n    --bfile ${DATASET} \\\n    --update-sex ${DATASET}_genders.txt \\\n    --make-bed \\\n    --out ${DATASET}_updated_genders","command":"","os_name":"","os_version":""}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":700239,"guid":"4C6C1657C9B24BBAB243F18C13B21802","previous_id":700238,"previous_guid":"0287AA74E5984035B2F504D19A1090B2","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"125A7897DA3849FB9AAD26AC85F19102","order_id":1,"type_id":6,"title":"Section","source":{"title":"OPTIONAL: data consistency verification (PLINK format)"}},{"id":1054724,"guid":"B86E58EC7F234609A8CEDEAE08529E2E","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span style = \"font-weight:bold;\">Steps 11-13<\/span><span> are meant to tackle possible issues we have observed in various legacy data sets in PLINK format.<\/span><\/div><div class = \"text-block\"><span>Sometimes the alleles are marked for instance as '<\/span><span style = \"font-weight:bold;\">B<\/span><span>', and such variants should be excluded.<\/span><\/div><div class = \"text-block\"><span>Confirm that the alleles are in standard format i.e. <\/span><span style = \"font-weight:bold;\">A<\/span><span>, <\/span><span style = \"font-weight:bold;\">C<\/span><span>, <\/span><span style = \"font-weight:bold;\">G<\/span><span> or <\/span><span style = \"font-weight:bold;\">T<\/span><span style = \"font-weight:bold;\">.<\/span><\/div><div class = \"text-block\">If not, correct the inconsistency by removing variants with non-standard allele notation as suggested in the command below.<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Input files:<\/span><\/div><div class = \"text-block\">\u2022 DATASET.bed<\/div><div class = \"text-block\">\u2022 DATASET.bim<\/div><div class = \"text-block\">\u2022 DATASET.fam<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Output files:<\/span><\/div><div class = \"text-block\">\u2022 DATASET_Bvariantlist.txt<\/div><div class = \"text-block\">\u2022 DATASET_clean.bed<\/div><div class = \"text-block\">\u2022 DATASET_clean.bim<\/div><div class = \"text-block\">\u2022 DATASET_clean.fam<\/div><\/div>"}},{"id":1054725,"guid":"B5BBC7A7F2924931B0F36339F2BD5F10","order_id":2,"type_id":15,"title":"command","source":{"name":"DATASET=your_dataset_prefix\n\n# Check your .bim file for B alleles\ngrep -P '\\tB\\t|\\tB$' ${DATASET}.bim | \\\ncut -f2 > ${DATASET}_Bvariantlist.txt\n\n# Remove those variants from the dataset\nplink \\\n    --bfile ${DATASET} \\ \n    --exclude ${DATASET}_Bvariantlist.txt \\\n    --make-bed \\\n    --out ${DATASET}_clean","command":"","os_name":"","os_version":""}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":700240,"guid":"8D6EEDF8BD1C4580AE51D1B726FFD81F","previous_id":700239,"previous_guid":"4C6C1657C9B24BBAB243F18C13B21802","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"5449EC79770D4557AEEF1F697621B3C7","order_id":1,"type_id":6,"title":"Section","source":{"title":"OPTIONAL: data consistency verification (PLINK format)"}},{"id":1054724,"guid":"DDC6C2DCC4A049E0B8D818E843CB6284","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span style = \"font-weight:bold;\">Steps 11-13<\/span><span> are meant to tackle possible issues we have observed in various legacy data sets in PLINK format.<\/span><\/div><div class = \"text-block\"><span>Make sure no duplicate samples exist. Redundant individual IDs (IIDs) can cause some issues when working with VCF files. In case of duplicates, consider excluding them or adding a running number to those sample\/individual IDs in the <\/span><span style = \"font-weight:bold;\">.fam<\/span><span> file.<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Input file:<\/span><\/div><div class = \"text-block\">\u2022 DATASET.fam<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Output file:<\/span><\/div><div class = \"text-block\">\u2022 DATASET_nodups.fam<\/div><\/div>"}},{"id":1054725,"guid":"B132676FE0E34BEB80FE685A544F8179","order_id":2,"type_id":15,"title":"command","source":{"name":"DATASET=your_dataset_prefix\n\n# Find out possible sample ID (IID) duplicates\ncut -d' ' -f 2,2 ${DATASET}.fam | sort | uniq -d\n\n# If only few duplicates, edit the .fam file\n# and manually add a suffix to such IIDs.\n\n# If many, append an index (row number) to each IID\ncat ${DATASET}.fam | \\\nawk '{$2=$2\"_\"NR ; print $0}' > ${DATASET}_nodups.fam\n\n# Rename the file back\nmv ${DATASET}_nodups.fam ${DATASET}.fam","command":"","os_name":"","os_version":""}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":700241,"guid":"5C5E42C3F6B44695B9EE6C5CE008BAA2","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"4B8F2B9D5D7C4AAE86F9846FC71EE26C","order_id":1,"type_id":6,"title":"Section","source":{"title":"Requirements and preparatory steps"}},{"id":1054724,"guid":"AA3F6A901FC2480A998A2332E48144AF","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span style = \"font-weight:bold;\">The protocol is aimed for lifting genotyping chip data from older reference genome build versions over to human reference genome build version GRCh38\/hg38.<\/span><\/div><div class = \"text-block\"><span>The protocol is aimed for lifting PLINK format genotyping chip data from older reference genome build versions over to <\/span><span style = \"font-weight:bold;\">GRCh38\/hg38<\/span><span> and to VCF format.<\/span><\/div><div class = \"text-block\"><span>For a 'quick and dirty' lift-over you can jump straight to <\/span><span style = \"font-weight:bold;\">Step 2<\/span><span> and only run that.<\/span><\/div><div class = \"text-block\"><span>For high-quality and verified results we strongly recommend running at least through <\/span><span style = \"font-weight:bold;\">Steps 1-4 <\/span><span>and <\/span><span style = \"font-weight:bold;\">Steps 9-10<\/span><span>, and if required, run also <\/span><span style = \"font-weight:bold;\">Steps 5-8<\/span><span style = \"font-weight:bold;\">.<\/span><\/div><div class = \"text-block\"><span>If your PLINK format files have issues (e.g. non-standard allele notations or missing genders), see <\/span><span style = \"font-weight:bold;\">Steps 11-13<\/span><span> for troubleshooting.<\/span><\/div><div class = \"text-block\">Throughout the protocol we assume Bash shell.\n<\/div><div class = \"text-block\"><span>This <\/span><span style = \"font-weight:bold;\">Step 1<\/span><span> defines the requirements for the protocol (e.g. required software packages and reference files) and suggests example commands how to process the files into suitable formats.<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">1.0 Docker images<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">We have prepared docker images to ease up the preparatory steps depending on your application: <\/span><\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\">genotype-liftover-imputation-protocols-light<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">genotype-liftover-imputation-protocols-full<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">Light image<\/span><span> contains the software packages installed (Step 1.1), the reference genome (Step 1.2.6) and example scripts to run commands in each step (Steps 2-9). <\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">Full image<\/span><span> contains the software packages installed (Step 1.1), preprepared publically available reference files (as defined in Step 1.2) and example scripts to run commands in each step (Steps 2-9).<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Additional to this protocol, the images contain software packages and files required for genotype imputation protocol version 2:<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">https:\/\/www.protocols.io\/view\/genotype-imputation-workflow-v3-0-xbgfijw<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">The docker images are available at Docker hub. <\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">To pull the image, use the command below and replace <tag> with 'light' or 'full' according to which image you want:<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">!! If you don't want to use Docker, you can install the software packages by yourself (Step 1.1), and either download preprepared files (below) or prepare the files by yourself (Step 1.2 and 1.3).<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Preprepared reference data (included into the docker images as listed above) are also available for separate downloading at:<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">https:\/\/console.cloud.google.com\/storage\/browser\/fimm-public-data\/Imputation\/<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">And example scripts how to run each step at:<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">https:\/\/console.cloud.google.com\/storage\/browser\/fimm-public-data\/Imputation\/dockers\/genotype-chip-data-liftover-protocol\/<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">1.1 Software packages<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">1.1.1 Download and install the software packages <\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Required software packages are listed below with the versions that were used in the protocol below. However, use of the newest versions is recommended.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">PLINK v1.9 <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">http:\/\/www.cog-genomics.org\/plink\/1.9\/<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">PLINK v2.0 (Jan 02 2019 or later version) <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">https:\/\/www.cog-genomics.org\/plink\/2.0\/<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">R v3.4.1 (or later version) <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">https:\/\/www.r-project.org\/<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">R package data.table <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">https:\/\/github.com\/Rdatatable\/data.table\/wiki\/Installation<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">BCFtools v1.7 (or later version) <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">http:\/\/www.htslib.org\/download\/<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">1.1.3 Export the paths<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Once installed, export the correct paths to environment variable PATH. <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">BCFtools plugin usage requires environment variable BCFTOOLS_PLUGINS exported, e.g:<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">1.1.4 Install the R package<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span>Once R is installed, the 'data.table' package can be installed <\/span><span style = \"font-weight:bold;\">in R<\/span><span>, e.g.:<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">1.2. Reference data<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Reference variant allele frequency file is required for comparison of the chip genotyped variant allele frequencies in order to identify possible allele swaps and variants with unexpected allele frequency discrepancies.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-style:italic;\">Note: Chromosome notation in the reference data should follow the GRCh38\/hg38 notations ('chr#' for autosomal chromosomes and 'chrX' for chromosome 23).<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">1.2.1 Obtain the reference variant allele frequency data<\/span><span style = \"font-weight:bold;\">\n<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">If population-specific data are available (e.g. from a corresponding WGS effort) using these data would be preferrable.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span>Process the data as instructed in <\/span><span style = \"font-weight:bold;\">Steps 1.2.2-1.2.4<\/span><span style = \"font-weight:bold;\">.<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">If population-specific reference data is not available, for instance 1000 Genomes Project (<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">www.nature.com\/articles\/nature15393<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">) data can be used instead.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span>We have prepared (as described below in <\/span><span style = \"font-weight:bold;\">Steps 1.2.2-1.2.4<\/span><span>) the 1000 Genomes Project GRCh38\/hg38 data (downloaded from the EBI FTP site: <\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">ftp:\/\/ftp.1000genomes.ebi.ac.uk\/vol1\/ftp\/release\/20130502\/supporting\/GRCh38_positions\/<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">) to generate variant allele frequency files for 1000GP ALL and EUR samples.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">The corresponding allele frequency files are available for downloading at our Google Cloud bucket: <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">https:\/\/console.cloud.google.com\/storage\/browser\/fimm-public-data\/1000GP\/<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span>If you use these files, you can skip creating the frequency file and <\/span><span style = \"font-weight:bold;\">jump to Step 1.3<\/span><span>. Otherwise (if you want to create your own\/alternative 1000GP-based custom reference frequency file), follow the steps below.<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">1.2.2 Check for multiallelic sites<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Confirm that multiallelic sites (if present) in your reference data files are decomposed. If they are not, use the example command below to split the multiallelic sites into biallelic records:<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">1.2.3 Check the chromosome notation<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span>Confirm that the chromosome notation in your reference data files follows the GRCh38\/h38 notations as <\/span><span style = \"font-weight:bold;\">'chr#'<\/span><span> for autosomal, <\/span><span style = \"font-weight:bold;\">'chrX'<\/span><span> for chromosome 23 and <\/span><span style = \"font-weight:bold;\">'chrM'<\/span><span> for mitochondrial sites. If not, use for instance bcftools to rename the chromosomes:<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">1.2.4 Generate the allele frequency file<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Generate a tab-delimited file of the reference data allele frequencies, one line per variant, with columns CHR, SNP (as CHR_POS_REF_ALT), REF, ALT, AF (including the header line).<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Use the reference data VCF files as input with the example command below and save the generated frequency file as 'ref_data.frq'.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"># Check your reference data VCF and if it does NOT contain AF in the INFO field, calculate it with BCFTools +fill-tags plugin  # Note: BCFTools plugins require environmental variable BCFTOOLS_PLUGINS exported export BCFTOOLS_PLUGINS=\/path\/to\/bcftools\/plugins_folder # Calculate AF for each chromosome VCF file for chr in {1..23}; do     bcftools +fill-tags ref_data_chr${chr}.vcf.gz -Oz -o ref_data_AF_chr${chr}.vcf.gz -- -t AF done  # Generate a tab-delimited header for the allele frequency file echo -e 'CHR\\tSNP\\tREF\\tALT\\tAF' > ref_data.frq  # Query the required fields from the reference VCF files and append to the allele frequency file for chr in {1..23}; do     bcftools query -f '%CHROM\\t%CHROM\\_%POS\\_%REF\\_%ALT\\t%REF\\t%ALT\\t%INFO\/AF\\n' ref_data_chr${chr}.vcf.gz >> ref_data.frq done<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-style:italic;\">Note: Chromosome notation should follow the GRCh38\/hg38 notations ('chr#' for autosomal chromosomes and 'chrX' for chromosome 23).<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">1.2.5 Generate a VCF file without genotypes<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">In an optional step, a reference VCF file containing RSIDs is required. To operate with smaller files, drop genotypes from your reference data for instance as indicated in the command below:<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">1.2.6 Reference genome fasta<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Homo Sapiens assembly hg38 version 0 is used here (match the reference genome always according to your reference data) and the required files are:<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Homo_sapiens_assembly38.fasta<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Homo_sapiens_assembly38.fasta.fai<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">The files are available for downloading at Broad Insitute storage in Google cloud at <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">https:\/\/console.cloud.google.com\/storage\/browser\/broad-references\/hg38\/v0\/?pli=1<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">1.3. You are ready to start! <\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">As the last prepatory step, let's go over the required input data file(s) and also expected final output files!<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">1.3.1 Protocol input files<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Input data is the chip genotype data in PLINK format (here v1.9).<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">More details on the PLINK formats can be found at PLINK web page: <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">http:\/\/www.cog-genomics.org\/plink\/1.9\/formats<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\"><dataset>.bed<\/span><span> - binary representation of genotype calls<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\"><dataset>.bim<\/span><span> - extended variant information file including six columns:<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Chromosome code (either an integer, or 'X'\/'Y'\/'XY'\/'MT'; '0' indicates unknown) or name<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Variant identifier<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Position in morgans or centimorgans (safe to use dummy value of '0')<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Chromosomal base-pair coordinate<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Allele 1 (corresponding to clear bits in .bed; usually minor)<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Allele 2 (corresponding to set bits in .bed; usually major)<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\"><dataset>.fam<\/span><span> - sample information file including six columns:<\/span><\/li><\/ul><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Light image<\/span><span> contains the software packages installed (Step 1.1), the reference genome (Step 1.2.6) and example scripts to run commands in each step (Steps 2-9). <\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Full image<\/span><span> contains the software packages installed (Step 1.1), preprepared publically available reference files (as defined in Step 1.2) and example scripts to run commands in each step (Steps 2-9).<\/span><\/div><div class = \"text-block\">Additional to this protocol, the images contain software packages and files required for genotype imputation protocol version 2:<\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/www.protocols.io\/view\/genotype-imputation-workflow-v3-0-xbgfijw<\/span><\/a><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">The docker images are available at Docker hub. <\/span><\/div><div class = \"text-block\">To pull the image, use the command below and replace <tag> with 'light' or 'full' according to which image you want:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">!! If you don't want to use Docker, you can install the software packages by yourself (Step 1.1), and either download preprepared files (below) or prepare the files by yourself (Step 1.2 and 1.3).<\/span><\/div><div class = \"text-block\">Preprepared reference data (included into the docker images as listed above) are also available for separate downloading at:<\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/console.cloud.google.com\/storage\/browser\/fimm-public-data\/Imputation\/<\/span><\/a><\/div><div class = \"text-block\">And example scripts how to run each step at:<\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/console.cloud.google.com\/storage\/browser\/fimm-public-data\/Imputation\/dockers\/genotype-chip-data-liftover-protocol\/<\/span><\/a><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">1.1 Software packages<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">1.1.1 Download and install the software packages <\/span><\/div><div class = \"text-block\">Required software packages are listed below with the versions that were used in the protocol below. However, use of the newest versions is recommended.<\/div><div class = \"text-block\">PLINK v1.9 <\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">http:\/\/www.cog-genomics.org\/plink\/1.9\/<\/span><\/a><\/div><div class = \"text-block\">PLINK v2.0 (Jan 02 2019 or later version) <\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/www.cog-genomics.org\/plink\/2.0\/<\/span><\/a><\/div><div class = \"text-block\">R v3.4.1 (or later version) <\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/www.r-project.org\/<\/span><\/a><\/div><div class = \"text-block\">R package data.table <\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/github.com\/Rdatatable\/data.table\/wiki\/Installation<\/span><\/a><\/div><div class = \"text-block\">BCFtools v1.7 (or later version) <\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">http:\/\/www.htslib.org\/download\/<\/span><\/a><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">1.1.3 Export the paths<\/span><\/div><div class = \"text-block\">Once installed, export the correct paths to environment variable PATH. <\/div><div class = \"text-block\">BCFtools plugin usage requires environment variable BCFTOOLS_PLUGINS exported, e.g:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">1.1.4 Install the R package<\/span><\/div><div class = \"text-block\"><span>Once R is installed, the 'data.table' package can be installed <\/span><span style = \"font-weight:bold;\">in R<\/span><span>, e.g.:<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">1.2. Reference data<\/span><\/div><div class = \"text-block\">Reference variant allele frequency file is required for comparison of the chip genotyped variant allele frequencies in order to identify possible allele swaps and variants with unexpected allele frequency discrepancies.<\/div><div class = \"text-block\"><span style = \"font-style:italic;\">Note: Chromosome notation in the reference data should follow the GRCh38\/hg38 notations ('chr#' for autosomal chromosomes and 'chrX' for chromosome 23).<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">1.2.1 Obtain the reference variant allele frequency data<\/span><span style = \"font-weight:bold;\">\n<\/span><\/div><div class = \"text-block\">If population-specific data are available (e.g. from a corresponding WGS effort) using these data would be preferrable.<\/div><div class = \"text-block\"><span>Process the data as instructed in <\/span><span style = \"font-weight:bold;\">Steps 1.2.2-1.2.4<\/span><span style = \"font-weight:bold;\">.<\/span><\/div><div class = \"text-block\">If population-specific reference data is not available, for instance 1000 Genomes Project (<\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">www.nature.com\/articles\/nature15393<\/span><\/a><\/div><div class = \"text-block\">) data can be used instead.<\/div><div class = \"text-block\"><span>We have prepared (as described below in <\/span><span style = \"font-weight:bold;\">Steps 1.2.2-1.2.4<\/span><span>) the 1000 Genomes Project GRCh38\/hg38 data (downloaded from the EBI FTP site: <\/span><\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">ftp:\/\/ftp.1000genomes.ebi.ac.uk\/vol1\/ftp\/release\/20130502\/supporting\/GRCh38_positions\/<\/span><\/a><\/div><div class = \"text-block\">) to generate variant allele frequency files for 1000GP ALL and EUR samples.<\/div><div class = \"text-block\">The corresponding allele frequency files are available for downloading at our Google Cloud bucket: <\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/console.cloud.google.com\/storage\/browser\/fimm-public-data\/1000GP\/<\/span><\/a><\/div><div class = \"text-block\"><span>If you use these files, you can skip creating the frequency file and <\/span><span style = \"font-weight:bold;\">jump to Step 1.3<\/span><span>. Otherwise (if you want to create your own\/alternative 1000GP-based custom reference frequency file), follow the steps below.<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">1.2.2 Check for multiallelic sites<\/span><\/div><div class = \"text-block\">Confirm that multiallelic sites (if present) in your reference data files are decomposed. If they are not, use the example command below to split the multiallelic sites into biallelic records:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">1.2.3 Check the chromosome notation<\/span><\/div><div class = \"text-block\"><span>Confirm that the chromosome notation in your reference data files follows the GRCh38\/h38 notations as <\/span><span style = \"font-weight:bold;\">'chr#'<\/span><span> for autosomal, <\/span><span style = \"font-weight:bold;\">'chrX'<\/span><span> for chromosome 23 and <\/span><span style = \"font-weight:bold;\">'chrM'<\/span><span> for mitochondrial sites. If not, use for instance bcftools to rename the chromosomes:<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">1.2.4 Generate the allele frequency file<\/span><\/div><div class = \"text-block\">Generate a tab-delimited file of the reference data allele frequencies, one line per variant, with columns CHR, SNP (as CHR_POS_REF_ALT), REF, ALT, AF (including the header line).<\/div><div class = \"text-block\">Use the reference data VCF files as input with the example command below and save the generated frequency file as 'ref_data.frq'.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span style = \"font-style:italic;\">Note: Chromosome notation should follow the GRCh38\/hg38 notations ('chr#' for autosomal chromosomes and 'chrX' for chromosome 23).<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">1.2.5 Generate a VCF file without genotypes<\/span><\/div><div class = \"text-block\">In an optional step, a reference VCF file containing RSIDs is required. To operate with smaller files, drop genotypes from your reference data for instance as indicated in the command below:<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">1.2.6 Reference genome fasta<\/span><\/div><div class = \"text-block\">Homo Sapiens assembly hg38 version 0 is used here (match the reference genome always according to your reference data) and the required files are:<\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\">Homo_sapiens_assembly38.fasta<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Homo_sapiens_assembly38.fasta.fai<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">The files are available for downloading at Broad Insitute storage in Google cloud at <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">https:\/\/console.cloud.google.com\/storage\/browser\/broad-references\/hg38\/v0\/?pli=1<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">1.3. You are ready to start! <\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">As the last prepatory step, let's go over the required input data file(s) and also expected final output files!<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">1.3.1 Protocol input files<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Input data is the chip genotype data in PLINK format (here v1.9).<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">More details on the PLINK formats can be found at PLINK web page: <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">http:\/\/www.cog-genomics.org\/plink\/1.9\/formats<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\"><dataset>.bed<\/span><span> - binary representation of genotype calls<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\"><dataset>.bim<\/span><span> - extended variant information file including six columns:<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Chromosome code (either an integer, or 'X'\/'Y'\/'XY'\/'MT'; '0' indicates unknown) or name<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Variant identifier<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Position in morgans or centimorgans (safe to use dummy value of '0')<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Chromosomal base-pair coordinate<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Allele 1 (corresponding to clear bits in .bed; usually minor)<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Allele 2 (corresponding to set bits in .bed; usually major)<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\"><dataset>.fam<\/span><span> - sample information file including six columns:<\/span><\/li><\/ul><\/div><div class = \"text-block\">The files are available for downloading at Broad Insitute storage in Google cloud at <\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/console.cloud.google.com\/storage\/browser\/broad-references\/hg38\/v0\/?pli=1<\/span><\/a><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">1.3. You are ready to start! <\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">As the last prepatory step, let's go over the required input data file(s) and also expected final output files!<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">1.3.1 Protocol input files<\/span><\/div><div class = \"text-block\">Input data is the chip genotype data in PLINK format (here v1.9).<\/div><div class = \"text-block\">More details on the PLINK formats can be found at PLINK web page: <\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">http:\/\/www.cog-genomics.org\/plink\/1.9\/formats<\/span><\/a><\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\"><dataset>.bed<\/span><span> - binary representation of genotype calls<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\"><dataset>.bim<\/span><span> - extended variant information file including six columns:<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Chromosome code (either an integer, or 'X'\/'Y'\/'XY'\/'MT'; '0' indicates unknown) or name<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Variant identifier<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Position in morgans or centimorgans (safe to use dummy value of '0')<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Chromosomal base-pair coordinate<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Allele 1 (corresponding to clear bits in .bed; usually minor)<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Allele 2 (corresponding to set bits in .bed; usually major)<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\"><dataset>.fam<\/span><span> - sample information file including six columns:<\/span><\/li><\/ul><\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\"><dataset>.bim<\/span><span> - extended variant information file including six columns:<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Chromosome code (either an integer, or 'X'\/'Y'\/'XY'\/'MT'; '0' indicates unknown) or name<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Variant identifier<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Position in morgans or centimorgans (safe to use dummy value of '0')<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Chromosomal base-pair coordinate<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Allele 1 (corresponding to clear bits in .bed; usually minor)<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Allele 2 (corresponding to set bits in .bed; usually major)<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"> <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\"><dataset>.fam<\/span><span> - sample information file including six columns:<\/span><\/li><\/ul><\/div><div class = \"text-block\"><ol style = \"list-style-type: decimal;\"><li style = \"counter-reset:ol0;\">Chromosome code (either an integer, or 'X'\/'Y'\/'XY'\/'MT'; '0' indicates unknown) or name<\/li><li style = \"counter-reset:ol0;\">Variant identifier<\/li><li style = \"counter-reset:ol0;\">Position in morgans or centimorgans (safe to use dummy value of '0')<\/li><li style = \"counter-reset:ol0;\">Chromosomal base-pair coordinate<\/li><li style = \"counter-reset:ol0;\">Allele 1 (corresponding to clear bits in .bed; usually minor)<\/li><li style = \"counter-reset:ol0;\">Allele 2 (corresponding to set bits in .bed; usually major)<\/li><li style = \"counter-reset:ol0;\"> <\/li><li style = \"counter-reset:ol0;\"><span style = \"font-weight:bold;\"><dataset>.fam<\/span><span> - sample information file including six columns:<\/span><\/li><li style = \"counter-reset:ol0;\">Family ID ('FID')<\/li><li style = \"counter-reset:ol0;\">Within-family ID ('IID'; cannot be '0')<\/li><li style = \"counter-reset:ol0;\">Within-family ID of father ('0' if father isn't in dataset)<\/li><li style = \"counter-reset:ol0;\">Within-family ID of mother ('0' if mother isn't in dataset)<\/li><li style = \"counter-reset:ol0;\">Sex code ('1' = male, '2' = female, '0' = unknown)<\/li><li style = \"counter-reset:ol0;\">Phenotype value ('1' = control, '2' = case, '-9'\/'0'\/non-numeric = missing data if case\/control)<\/li><\/ol><\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><\/ul><\/div><div class = \"text-block\"><ol style = \"list-style-type: decimal;\"><li style = \"counter-reset:ol0;\">Family ID ('FID')<\/li><li style = \"counter-reset:ol0;\">Within-family ID ('IID'; cannot be '0')<\/li><li style = \"counter-reset:ol0;\">Within-family ID of father ('0' if father isn't in dataset)<\/li><li style = \"counter-reset:ol0;\">Within-family ID of mother ('0' if mother isn't in dataset)<\/li><li style = \"counter-reset:ol0;\">Sex code ('1' = male, '2' = female, '0' = unknown)<\/li><li style = \"counter-reset:ol0;\">Phenotype value ('1' = control, '2' = case, '-9'\/'0'\/non-numeric = missing data if case\/control)<\/li><\/ol><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">1.3.2 Final protocol output files:<\/span><\/div><div class = \"text-block\">The final file here is a VCF format file lifted over to human genome reference build 38 (GRCh38\/hg38).<\/div><\/div>"}},{"id":1054725,"guid":"ADDA66504BC611E9B85011B082D47038","order_id":2,"type_id":15,"title":"command","source":{"name":"docker pull seqinfoteam\/genotype-liftover-imputation-protocols:<tag>","command":"","os_name":"","os_version":""}},{"id":1054726,"guid":"D78A5CA0293711E9BEB42B5EF9CCCC11","order_id":3,"type_id":15,"title":"command","source":{"name":"echo PATH=$PATH:\/path\/to\/plink\/:\/path\/to\/R\/:\/path\/to\/bcftools\/ \\\n    >> $HOME\/.bashrc\nsource $HOME\/.bashrc","command":"","os_name":"","os_version":""}},{"id":1054727,"guid":"659463F040DB11E99B0163343B2DC148","order_id":4,"type_id":15,"title":"command","source":{"name":"echo export BCFTOOLS_PLUGINS=\/path\/to\/bcftools\/plugins >> $HOME\/.bashrc\nsource $HOME\/.bashrc","command":"","os_name":"","os_version":""}},{"id":1054728,"guid":"0B06F1F0293911E9A2CA773793958D2B","order_id":5,"type_id":15,"title":"command","source":{"name":"install.packages('data.table', type = 'source', \nrepos = 'http:\/\/Rdatatable.github.io\/data.table')","command":"","os_name":"","os_version":""}},{"id":1054729,"guid":"9827A340293911E9A2CA773793958D2B","order_id":6,"type_id":15,"title":"command","source":{"name":"for CHR in {1..23}; do\n    bcftools norm -m -any ref_data_chr${CHR}.vcf.gz \\\n    -Oz -o ref_data_split_multiallelic_chr${CHR}.vcf.gz\ndone","command":"","os_name":"","os_version":""}},{"id":1054730,"guid":"BB340EB040DA11E99B0163343B2DC148","order_id":7,"type_id":15,"title":"command","source":{"name":"# Generate a chromosome renaming file\nfor CHR in {1..23} X ; do \n    echo ${CHR} chr${CHR}\ndone >> chr_names.txt\n\n# Multiple processing commands piped together\nfor CHR in {1..22} X; do\n    bcftools annotate --rename-chrs chr_names.txt \\\n        ref_data_split_multiallelic_chr${CHR}.vcf.gz \\\n        -Oz -o ref_data_chr${CHR}.vcf.gz\ndone","command":"","os_name":"","os_version":""}},{"id":1054731,"guid":"17AC92E0303011E9A408DB5CDD270D88","order_id":8,"type_id":15,"title":"command","source":{"name":"for CHR in {1..23}; do\n    # Drop genotypes\n    bcftools view -G ref_data_AF_chr${CHR}.vcf.gz \\\n    -Oz -o ref_data_drop_genotypes_chr${CHR}.vcf.gz\n    # Generate index\n    bcftools index -t \\\n        ref_data_drop_genotypes_chr${CHR}.vcf.gz\ndone\n\n# List the files\necho ref_data_drop_genotypes_chr{1..23}.vcf.gz | \\\ntr ' ' '\\n' > files_for_concatenation.txt\n\n# Concatenate each chr into a single VCF\nbcftools concat -f files_for_concatenation.txt \\\n-Oz -o ref_data.vcf.gz","command":"","os_name":"","os_version":""}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":700243,"guid":"BF43720BD1384E6DAAB27330AA36EB22","previous_id":705403,"previous_guid":"4C9A01502A1211E9A2CA773793958D2B","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"9B07CD1391A84EDBA5E15C2F30571822","order_id":1,"type_id":6,"title":"Section","source":{"title":"Lift-over confirmation"}},{"id":1054724,"guid":"60AAA4CB7D80460C849048D96850E0AA","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Once you have successfully lifted over your chip data, verify the lift-over by checking variant positions and alleles.<\/div><div class = \"text-block\">For instance, compare the positions and alleles in your lifted data to known GRCh38\/hg38 positions and alleles e.g. from dbSNP <\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/www.ncbi.nlm.nih.gov\/SNP\/<\/span><\/a><\/div><div class = \"text-block\">.<\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#EA94FF"},{"id":700244,"guid":"5842E537D0564290B1CC707C10FF4788","previous_id":700237,"previous_guid":"D324BC8F8D164AB5AB5B32B276690B7B","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"62FC273963DC4B0DB89A55C347BF49EF","order_id":1,"type_id":6,"title":"Section","source":{"title":"Lift-over verification"}},{"id":1054724,"guid":"8D1D55BB157041F488F20FFD1A7A672C","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Compare the chip data allele frequencies (created in <\/span><span style = \"font-weight:bold;\">Step 3<\/span><span>) to the reference data allele frequencies (created in <\/span><span style = \"font-weight:bold;\">Step 1.2.4<\/span><span>).<\/span><\/div><div class = \"text-block\">Copy and save the R script below as 'compare_AF.R' and run it as suggested in the command below. <\/div><div class = \"text-block\"><span>The R script requires data.table package installed (for suggested instructions, see <\/span><span style = \"font-weight:bold;\">Step 1.1<\/span><span>).\n<\/span><\/div><div class = \"text-block\">Inside the R script, intersection of the reference data and chip data variants\u00a0(same SNP ID in format CHR_POS_REF_ALT) are formed and corresponding allele frequencies are plotted against each other.<\/div><div class = \"text-block\">Here, we use 0.1 as a threshold for AF comparison i.e. if chip data AF differs more than 10 pp from the reference data AF, it is marked as discordant. However, less conservative values may be more suitable if a population specific reference data is not available.<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Input files:<\/span><\/div><div class = \"text-block\"><span>\u2022 DATASET.frq (<\/span><span style = \"font-weight:bold;\">Step 3<\/span><span>)<\/span><\/div><div class = \"text-block\"><span>\u2022 ref_data.frq (<\/span><span style = \"font-weight:bold;\">Step 1.2.4<\/span><span>)<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Output file:<\/span><\/div><div class = \"text-block\">\u2022 DATASET_AF.png<\/div><div class = \"text-block\">\u2022 *_comparison.txt a log file containing variant counts from the comparison<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Inspect the plot:<\/span><\/div><div class = \"text-block\">See example plots at the section 'Expected results' below.<\/div><div class = \"text-block\"><span style = \"font-style:italic;\">Successful genome build lift-over:<\/span><\/div><div class = \"text-block\"><span>- <\/span><span style = \"font-weight:bold;\">Nearly all<\/span><span> chip data variant allele frequencies correlate with the panel variant allele frequencies and data shows tight, uniform diagonal line with increasing slope 1.<\/span><\/div><div class = \"text-block\"><span>-> Continue with <\/span><span style = \"font-weight:bold;\">Step 9<\/span><\/div><div class = \"text-block\"><span style = \"font-style:italic;\">Unsuccessful genome build lift-over:<\/span><\/div><div class = \"text-block\"><span>- <\/span><span style = \"font-weight:bold;\">Some<\/span><span> of the chip data variant allele frequencies correlate with the reference data variant allele frequencies, whereas some of the chip data show negative correlation with the reference data variant allele frequencies. Hence, an x-shaped plot is observed. These are likely incorrectly flipped variant alleles and\/or ambiguous variant alleles with strand issues.<\/span><\/div><div class = \"text-block\"><span>- <\/span><span style = \"font-weight:bold;\">Large proportion<\/span><span> of the chip data variants do not intersect with the reference data variants.<\/span><\/div><div class = \"text-block\"><span>-> Continue with <\/span><span style = \"font-weight:bold;\">Step 5 <\/span><span>to reflip the problematic alleles.<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">!! If needed, fix unsuccesful flipping as indicated in the following steps (Steps 5-8).<\/span><\/div><div class = \"text-block\">Start by saving the R-script below as 'compare_AF.R.<\/div><div class = \"text-block\">Run the above R Chip data compared to p script as follows:<\/div><\/div>"}},{"id":1054725,"guid":"8EA845C029DB11E9A2CA773793958D2B","order_id":2,"type_id":15,"title":"command","source":{"name":"#!\/bin\/env Rscript --no-save\n\n# Required packages\nlibrary(data.table) # For fast fread()\n\n# Input variables\nargs <- commandArgs(TRUE)\nindataset <- args[1]\ninfile <- args[2]\nref_dataset <- args[3]\nrefname <- args[4]\naf_diff_limit <- as.numeric(args[5])\n\n# Read in the frequency files\nchip <- fread(infile, header = T)\nref_data <- fread(ref_dataset, header = T)\n\n# Take an intersection of the reference and chip data \n# based on SNP column (in format CHR_POS_REF_ALT)\nisec <- merge(ref_data, chip, by = \"SNP\")\n\n# Exclude if AF is not within the range\nexclude <- !abs(isec$AF.x - isec$AF.y) < af_diff_limit\n\n# Non-ref data variants\nnonref <- chip[!(chip$SNP) %in% (isec$SNP)]\n\n# Save the plot as jpg\npng(paste0(indataset, \"_\", refname, \"_AF.png\"), \n    width = 600, height = 600)\n# Plot first all and then excludable variants\nplot(isec$AF.x, isec$AF.y, col=1, pch=20,\n    main=paste0(indataset, \" vs. \", refname, \" AF\"),\n    xlab=\"Reference data AF\",\n    ylab=\"Chip data AF\")\npoints(isec[exclude]$AF.x, isec[exclude]$AF.y, \n    col=2, pch=20)\n# Draw a legend\nlegend(\"topleft\", legend=c(\n    paste0(\"Concordant AF, n = \", nrow(isec[!exclude])),\n    paste0(\"High AF difference, n = \", nrow(isec[exclude])),\n    paste0(\"Non-ref variants, n= \", nrow(nonref))),\n    col=c(\"black\", \"red\", \"white\"), pch=20, cex=1.2)\ndev.off()\n\n# Store the high AF difference variants\noutput <- rbind(c(\"chip variants\", nrow(chip)),\n                c(\"intersection\", nrow(isec)),\n                c(\"intersection\/chip variants\", \n                     (nrow(isec))\/nrow(chip)),\n                c(\"non-ref variants\", \n                      nrow(chip) - nrow(isec)),\n                c(\"high AF difference\", \n                      nrow(isec[exclude])))\n\nwrite.table(output, \n    paste0(indataset, \"_\", refname, \"_comparison.txt\"),\n    quote=F, row.names=F, col.names=F, sep = \"\\t\")","command":"Save the script as 'compare_AF.R'","os_name":"","os_version":""}},{"id":1054726,"guid":"9AAB7A9F1D0E4D42900C25B587207623","order_id":3,"type_id":15,"title":"command","source":{"name":"DATASET=your_dataset_prefix\n\nRscript --no-save \/path\/to\/compare_AF.R \\\n    ${DATASET} \\\n    ${DATASET}.frq \\\n    \/path\/to\/ref_data.frq \\\n    ref_data_name \\\n    0.1","command":"","os_name":"","os_version":""}},{"id":1054727,"guid":"4D5822CD4EF24963935070987C3CE9EB","order_id":4,"type_id":17,"title":"result","source":{"body":"<div class = \"text-blocks\"><div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/pr-journal\/bcs5a.jpg\" \/><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":705375,"guid":"871C412029EB11E9A2CA773793958D2B","previous_id":705381,"previous_guid":"037422602A0011E9A2CA773793958D2B","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"E2DB74114FDB48E2A105BE71D492337E","order_id":1,"type_id":6,"title":"Section","source":{"title":"OPTIONAL: identify and fix flipping for ambiguous alleles (PLINK format)"}},{"id":1054724,"guid":"546E37B517414059B47869A018B12A80","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>If an x-shaped plot was observed in <\/span><span style = \"font-weight:bold;\">Step 4<\/span><span> (or still after <\/span><span style = \"font-weight:bold;\">Step 5<\/span><span>), likely some ambiguous alleles have been wrongly flipped. These may be identified by comparing the AF values to reference data AF and observing inverse values (e.g. most of those marked in red for the bad dataset in the expected results plot in <\/span><span style = \"font-weight:bold;\">Step 4<\/span><span>). <\/span><\/div><div class = \"text-block\"><span>Extract ambiguous alleles with inverse AF from the frequency file (generated in <\/span><span style = \"font-weight:bold;\">Step 3<\/span><span>) and flip them with plink v1.9. <\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Input files:<\/span><\/div><div class = \"text-block\"><span>\u2022 DATASET.frq (<\/span><span style = \"font-weight:bold;\">Step 3<\/span><span>)<\/span><\/div><div class = \"text-block\"><span>\u2022 ref_data.frq (<\/span><span style = \"font-weight:bold;\">Step 1.2.4<\/span><span>)<\/span><\/div><div class = \"text-block\"><span>\u2022 DATASET.vcf.gz (<\/span><span style = \"font-weight:bold;\">Step 3<\/span><span>)<\/span><\/div><div class = \"text-block\"><span>\u2022 DATASET.bed (<\/span><span style = \"font-weight:bold;\">Step 2<\/span><span style = \"font-weight:bold;font-weight:bold;\"> <\/span><span style = \"font-weight:bold;\">\/<\/span><span style = \"font-weight:bold;font-weight:bold;\"> <\/span><span style = \"font-weight:bold;\">Step 5<\/span><span>)<\/span><\/div><div class = \"text-block\"><span>\u2022 DATASET.bim (<\/span><span style = \"font-weight:bold;\">Step 2<\/span><span style = \"font-weight:bold;font-weight:bold;\"> <\/span><span style = \"font-weight:bold;\">\/<\/span><span style = \"font-weight:bold;font-weight:bold;\"> <\/span><span style = \"font-weight:bold;\">Step 5<\/span><span>)<\/span><\/div><div class = \"text-block\"><span>\u2022 DATASET.fam (<\/span><span style = \"font-weight:bold;\">Step 2 \/<\/span><span style = \"font-weight:bold;font-weight:bold;\"> <\/span><span style = \"font-weight:bold;\">Step 5<\/span><span>)<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Output files:<\/span><\/div><div class = \"text-block\">\u2022 DATASET_flippable_AF.txt<\/div><div class = \"text-block\">\u2022 DATASET_ambiguous_for_flipping.rsid<\/div><div class = \"text-block\">\u2022 DATASET_ambiguous_flipped.bed<\/div><div class = \"text-block\">\u2022 DATASET_ambiguous_flipped.bim<\/div><div class = \"text-block\">\u2022 DATASET_ambiguous_flipped.fam<\/div><div class = \"text-block\">Start by saving the R-script below as 'find_ambiguous.R':<\/div><div class = \"text-block\">Run the 'find_ambiguous.R' as follows:<\/div><div class = \"text-block\"><span>Extract the RSIDs from the VCF file (generated in <\/span><span style = \"font-weight:bold;\">Step 3<\/span><span>):<\/span><\/div><div class = \"text-block\"><span>Flip the ambiguous alleles in the lifted files (generated in <\/span><span style = \"font-weight:bold;\">Step 2 <\/span><span>or <\/span><span style = \"font-weight:bold;\">Step 5<\/span><span>) with plink v1.9:<\/span><\/div><div class = \"text-block\"><span>Confirm the results again as indicated in <\/span><span style = \"font-weight:bold;\">Step3<\/span><span> and <\/span><span style = \"font-weight:bold;\">Step4<\/span><span style = \"font-weight:bold;\">.<\/span><\/div><\/div>"}},{"id":1054725,"guid":"A856BB9029FA11E9A2CA773793958D2B","order_id":2,"type_id":15,"title":"command","source":{"name":"#!\/bin\/env Rscript --no-save\n\n# Required packages\nlibrary(data.table)\n\n# Input variables\nargs <- commandArgs(TRUE)\nindataset <- args[1]\ninfile <- args[2]\nref_dataset <- args[3]\n\n# Read in the frequency files\nchip <- fread(infile, header = T)\nref_data <- fread(ref_dataset, header =T)\n\n# Take an intersection of the reference and chip data\n# based on SNP column (in format CHR_POS_REF_ALT)\nisec <- merge(ref_data, chip, by = \"SNP\")\n\n# Exclude if AF is not within the range\nexclude <- !abs(isec$AF.x - isec$AF.y) < 0.1\ndiscrepant <- isec[exclude]\n\n# Add column with a flipped AF value for the chip data\ndiscrepant$AF_flip <- 1-discrepant$AF.y\n\n# Test if the flipped AF matches to the reference data\nflippable <- abs(discrepant$AF.x - discrepant$AF_flip) \n    < 0.1\n\n# Keep only ambiguous alleles\nambiguous <- (discrepant$REF.y %in% c(\"A\", \"T\") \n             & discrepant$ALT.y %in% c(\"A\", \"T\")) |\n         (discrepant$REF.y %in% c(\"C\", \"G\") \n             & discrepant$ALT.y %in% c(\"C\", \"G\"))\n\n# Generate output in format CHR \\t POS\noutput <- strsplit(discrepant[flippable & ambiguous]$SNP, \"_\")\noutput <- do.call(rbind, output)[,1:2]\n\n# Store the output\nwrite.table(output, paste0(indataset, \"_flippable_AF.txt\"),\nquote = F, row.names = F, col.names = F, sep = \"\\t\")","command":"","os_name":"","os_version":""}},{"id":1054726,"guid":"4140168029FB11E9A2CA773793958D2B","order_id":3,"type_id":15,"title":"command","source":{"name":"DATASET=your_dataset_prefix\n\nRscript --no-save \/path\/to\/find_ambiguous.R \\\n    ${DATASET} \\\n    ${DATASET}.frq \\\n    \/path\/to\/ref_data.frq","command":"","os_name":"","os_version":""}},{"id":1054727,"guid":"9632948029FE11E9A2CA773793958D2B","order_id":4,"type_id":15,"title":"command","source":{"name":"bcftools view -T ${DATASET}_flippable_AF.txt \\\n    ${DATASET}.vcf.gz | \\\nbcftools query -f '%ID\\n' \\\n    > ${DATASET}_ambiguous_for_flipping.rsid","command":"","os_name":"","os_version":""}},{"id":1054728,"guid":"1F62358029FF11E9A2CA773793958D2B","order_id":5,"type_id":15,"title":"command","source":{"name":"plink \\\n    --bfile ${DATASET} \\\n    --flip ${DATASET}_ambiguous_for_flipping.rsid \\\n    --make-bed \\\n    --out ${DATASET}_ambiguous_flipped","command":"","os_name":"","os_version":""}},{"id":1054729,"guid":"E01E443029FF11E9A2CA773793958D2B","order_id":6,"type_id":22,"title":"gotostep","source":{"step_guid":"D324BC8F8D164AB5AB5B32B276690B7B","title":""}},{"id":1054730,"guid":"E417B8F029FF11E9A2CA773793958D2B","order_id":7,"type_id":22,"title":"gotostep","source":{"step_guid":"5842E537D0564290B1CC707C10FF4788","title":""}}],"cases":null,"data":null,"section":null,"section_color":"#84CE84"},{"id":705381,"guid":"037422602A0011E9A2CA773793958D2B","previous_id":700244,"previous_guid":"5842E537D0564290B1CC707C10FF4788","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"EB277BF81455405BA91956621E5E400C","order_id":1,"type_id":6,"title":"Section","source":{"title":"OPTIONAL: identify and fix flipping for unambiguous alleles"}},{"id":1054724,"guid":"D36D2D5A056846D5B5FD78B2F8295CD1","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Align the VCF to the reference genome and identify multiallelic sites. Multiallelic sites are formed, when the reference allele at a position does NOT match with the reference genome base. <\/div><div class = \"text-block\"><span>Presumably due to wrong strand orientation in comparison to the lift-over strand file, those alleles were mistakenly flipped in <\/span><span style = \"font-weight:bold;\">Step 2<\/span><span>. It is worthwhile to try to flip these variants again to restore the correct strand orientation.<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Input files:<\/span><\/div><div class = \"text-block\"><span>\u2022 DATASET.vcf.gz (<\/span><span style = \"font-weight:bold;\">Step 3<\/span><span>)<\/span><\/div><div class = \"text-block\"><span>\u2022 DATASET.bed (<\/span><span style = \"font-weight:bold;\">Step 2<\/span><span>)<\/span><\/div><div class = \"text-block\"><span>\u2022 DATASET.bim (<\/span><span style = \"font-weight:bold;\">Step 2<\/span><span>)<\/span><\/div><div class = \"text-block\"><span>\u2022 DATASET.fam (<\/span><span style = \"font-weight:bold;\">Step 2<\/span><span>)<\/span><\/div><div class = \"text-block\"><span>\u2022 ref_data.frq (<\/span><span style = \"font-weight:bold;\">Step 1.2.4<\/span><span>)<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Output files:<\/span><\/div><div class = \"text-block\">\u2022 DATASET_nonreference_alleles.rsid<\/div><div class = \"text-block\">\u2022 DATASET_nonreference_flipped.bed<\/div><div class = \"text-block\">\u2022 DATASET_nonreference_flipped.bim<\/div><div class = \"text-block\">\u2022 DATASET_nonreference_flipped.fam<\/div><div class = \"text-block\">First, identify the sites with a wrong REF allele:<\/div><div class = \"text-block\"><span>Then, flip the identified sites with plink v1.9 (input files generated at <\/span><span style = \"font-weight:bold;\">Step 2<\/span><span>):<\/span><\/div><div class = \"text-block\"><span>Finally, confirm the results again as indicated in <\/span><span style = \"font-weight:bold;\">Step3<\/span><span> and <\/span><span style = \"font-weight:bold;\">Step4<\/span><span style = \"font-weight:bold;\">.<\/span><\/div><\/div>"}},{"id":1054725,"guid":"4AE953D02A0111E9A2CA773793958D2B","order_id":2,"type_id":15,"title":"command","source":{"name":"FASTA=\/path\/to\/your_reference_genome.fasta\nDATASET=your_dataset_prefix\n\n# Align to reference fasta file and \n# keep only RSIDs from the multiallelic sites\nbcftools norm -f ${FASTA} -c ws ${DATASET}.vcf.gz -Ou | \\\nbcftools view -m 3 -Ou | \\\nbcftools query -f '%ID\\n' \\\n> ${DATASET}_nonreference_alleles.rsid","command":"","os_name":"","os_version":""}},{"id":1054726,"guid":"F7F8C3802A0111E9A2CA773793958D2B","order_id":3,"type_id":15,"title":"command","source":{"name":"plink \\\n    --bfile ${DATASET} \\\n    --flip ${DATASET}_nonreference_alleles.rsid \\\n    --make-bed \\\n    --out ${DATASET}_nonreference_flipped","command":"","os_name":"","os_version":""}},{"id":1054727,"guid":"E01E443029FF11E9A2CA773793958D2B","order_id":4,"type_id":22,"title":"gotostep","source":{"step_guid":"D324BC8F8D164AB5AB5B32B276690B7B","title":""}},{"id":1054728,"guid":"E417B8F029FF11E9A2CA773793958D2B","order_id":5,"type_id":22,"title":"gotostep","source":{"step_guid":"5842E537D0564290B1CC707C10FF4788","title":""}}],"cases":null,"data":null,"section":null,"section_color":"#E57785"},{"id":705384,"guid":"4459D8A02A0611E9A2CA773793958D2B","previous_id":705375,"previous_guid":"871C412029EB11E9A2CA773793958D2B","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"19C5DCBE05264E45BC90DA3BC3D28242","order_id":1,"type_id":6,"title":"Section","source":{"title":"OPTIONAL: allele fixes based on reference data RSIDs (VCF format)"}},{"id":1054724,"guid":"21D54C48F7CE40458AC6896C4EDAFEE1","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">More variants can be rescued by comparing the chip data sites to a reference data based on RSIDs. <\/div><div class = \"text-block\">Here, it is important to note, that both datasets use the same RSID versions.<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Input files:<\/span><\/div><div class = \"text-block\"><span>\u2022 ref_data.vcf.gz (<\/span><span style = \"font-weight:bold;\">Step 1.2.5<\/span><span>)<\/span><\/div><div class = \"text-block\"><span>\u2022 DATASET.vcf.gz (<\/span><span style = \"font-weight:bold;\">Step 3<\/span><span>)<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Output files:<\/span><\/div><div class = \"text-block\">\u2022 DATASET_fixref.vcf.gz<\/div><div class = \"text-block\">Use the reference data RSIDs to correct chip data positions and alleles:<\/div><div class = \"text-block\"><span>Confirm the results again as indicated in <\/span><span style = \"font-weight:bold;\">Step3.2<\/span><span> and <\/span><span style = \"font-weight:bold;\">Step4<\/span><span style = \"font-weight:bold;\">.<\/span><\/div><\/div>"}},{"id":1054725,"guid":"1C0A6C102A0C11E9A2CA773793958D2B","order_id":2,"type_id":15,"title":"command","source":{"name":"FASTA=\/path\/to\/your_reference_genome.fasta\nBCFTOOLS_PLUGINS=\/path\/to\/bcftools_installation\/plugins\n\nDATASET=your_dataset_prefix\nREFERENCE_VCF=ref_data.vcf.gz\n\n# Export environmental variable BCFTOOLS_PLUGINS\nexport BCFTOOLS_PLUGINS=${BCFTOOLS_PLUGINS}\n\n# Use fixref with reference data RSIDs\nbcftools +fixref ${DATASET}.vcf.gz \\\n        -Oz -o ${DATASET}_fixref.vcf.gz \\\n        -- -f ${FASTA} \\\n        -i ${REFERENCE_VCF}\n\n# Sort the file \nbcftools sort ${DATASET}_fixref.vcf.gz \\\n    -Oz -o ${DATASET}_sorted.vcf.gz\nmv ${DATASET}_sorted.vcf.gz ${DATASET}_fixref.vcf.gz","command":"","os_name":"","os_version":""}},{"id":1054726,"guid":"E01E443029FF11E9A2CA773793958D2B","order_id":3,"type_id":22,"title":"gotostep","source":{"step_guid":"D324BC8F8D164AB5AB5B32B276690B7B","title":""}},{"id":1054727,"guid":"E417B8F029FF11E9A2CA773793958D2B","order_id":4,"type_id":22,"title":"gotostep","source":{"step_guid":"5842E537D0564290B1CC707C10FF4788","title":""}}],"cases":null,"data":null,"section":null,"section_color":"#EA9F6C"},{"id":705399,"guid":"181FBD002A0F11E9A2CA773793958D2B","previous_id":705384,"previous_guid":"4459D8A02A0611E9A2CA773793958D2B","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"852667AD41714E95BB668E5FBC77367A","order_id":1,"type_id":6,"title":"Section","source":{"title":"OPTIONAL: allele fixes based on reference data RSIDs (VCF format)"}},{"id":1054724,"guid":"EFBBDE79AF1F489AACC1B8BFBE8363A9","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Continue to fix the alleles with BCFtools fixref plugin by forcing allele flipping (use with caution and confirm the correctness of the results carefully!).<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Input files:<\/span><\/div><div class = \"text-block\"><span>\u2022 DATASET.vcf.gz (<\/span><span style = \"font-weight:bold;\">Step 7<\/span><span>)<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Output files:<\/span><\/div><div class = \"text-block\">\u2022 DATASET_fixref_force.vcf.gz<\/div><div class = \"text-block\">Use BCFtools fixref plugin to force flipping as follows:<\/div><div class = \"text-block\"><span>Confirm the results again as indicated in <\/span><span style = \"font-weight:bold;\">Step3.2<\/span><span> and <\/span><span style = \"font-weight:bold;\">Step4<\/span><span style = \"font-weight:bold;\">.<\/span><\/div><\/div>"}},{"id":1054725,"guid":"2A8D2FD02A1011E9A2CA773793958D2B","order_id":2,"type_id":15,"title":"command","source":{"name":"FASTA=\/path\/to\/your_reference_genome.fasta\nBCFTOOLS_PLUGINS=\/path\/to\/bcftools_installation\/plugins\n\nDATASET=your_dataset_prefix\n\n# Export environmental variable BCFTOOLS_PLUGINS\nexport BCFTOOLS_PLUGINS=${BCFTOOLS_PLUGINS}\n\n# Fixref force flip\nbcftools +fixref ${DATASET}.vcf.gz \\\n        -Oz -o ${DATASET}_fixref_force.vcf.gz \\\n        -- -f ${FASTA} \\\n        -m flip","command":"","os_name":"","os_version":""}},{"id":1054726,"guid":"E01E443029FF11E9A2CA773793958D2B","order_id":3,"type_id":22,"title":"gotostep","source":{"step_guid":"D324BC8F8D164AB5AB5B32B276690B7B","title":""}},{"id":1054727,"guid":"E417B8F029FF11E9A2CA773793958D2B","order_id":4,"type_id":22,"title":"gotostep","source":{"step_guid":"5842E537D0564290B1CC707C10FF4788","title":""}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":705403,"guid":"4C9A01502A1211E9A2CA773793958D2B","previous_id":705399,"previous_guid":"181FBD002A0F11E9A2CA773793958D2B","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"4F86F67381354051A3098883B5D53AA8","order_id":1,"type_id":6,"title":"Section","source":{"title":"VCF format and reference genome alignment"}},{"id":1054724,"guid":"9D79C89F2AB349D8A6EE3127C2882CBC","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>For any downstream processing, it is advisable to <\/span><span style = \"font-weight:bold;\">always<\/span><span> confirm that your VCF data is aligned to the correct reference genome. <\/span><\/div><div class = \"text-block\">As a final step, align the VCF to the reference genome and exclude variants which show wrong reference allele. The alignment also swaps alleles and left-aligns indels where required. To our experience, alignment sometimes forms duplicate records from indels, and thus, duplicate removal is added as a final step.<\/div><div class = \"text-block\"><span>If you have stopped the lift-over procedure in PLINK format steps and the downstream processes require VCF format, first convert the PLINK format files to VCF format as indicated in <\/span><span style = \"font-weight:bold;\">Step 3<\/span><span>. <\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Input files:<\/span><\/div><div class = \"text-block\">\u2022 DATASET.vcf.gz (your final step taken)<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Output files:<\/span><\/div><div class = \"text-block\">\u2022 DATASET_aligned.vcf.gz<\/div><div class = \"text-block\">Align to the reference genome with BCFtools, keep only bi-allelic sites (i.e. remove those where REF does not match the reference genome) and remove any duplicate records (considering CHR, POS, REF, ALT to preserve multiallelic sites if present):<\/div><div class = \"text-block\"><span>Confirm the results again as indicated in <\/span><span style = \"font-weight:bold;\">Step3<\/span><span> (ignore the Plink command and run only BCFtools command) and <\/span><span style = \"font-weight:bold;\">Step4<\/span><span style = \"font-weight:bold;\">.<\/span><\/div><\/div>"}},{"id":1054725,"guid":"40956AB02A1311E9A2CA773793958D2B","order_id":2,"type_id":15,"title":"command","source":{"name":"FASTA=\/path\/to\/your_reference_genome.fasta\n\nDATASET=your_dataset_prefix\n\n# Align to reference genome\nbcftools norm -f ${FASTA} -c ws ${DATASET}.vcf.gz -Ou | \\\nbcftools view -m 2 -M 2 -Ou | \\\nbcftools norm -d none -Oz -o ${DATASET}_aligned.vcf.gz","command":"","os_name":"","os_version":""}},{"id":1054726,"guid":"E01E443029FF11E9A2CA773793958D2B","order_id":3,"type_id":22,"title":"gotostep","source":{"step_guid":"D324BC8F8D164AB5AB5B32B276690B7B","title":""}},{"id":1054727,"guid":"E417B8F029FF11E9A2CA773793958D2B","order_id":4,"type_id":22,"title":"gotostep","source":{"step_guid":"5842E537D0564290B1CC707C10FF4788","title":""}}],"cases":null,"data":null,"section":null,"section_color":"#E57785"}],"materials":[],"description":"<div class = \"text-blocks\"><\/div>","changed_on":1554121159}