{"uri":"genotyping-chip-data-lift-over-to-reference-genome-nqtddwn","version_id":"0","protocol_name":"Genotyping chip data lift-over to reference genome build GRCh38\/hg38","protocol_name_html":"Genotyping chip data lift-over to reference genome build GRCh38\/hg38","is_prepublished":"0","can_edit":"0","parent_id":null,"api_version":"1","is_new_mode":"0","last_modified":"1523866056","type_id":"1","link":null,"fork_id":"","public_fork_note":"","number_of_steps":"11","has_versions":"0","first_published_date":"1523372134","publish_date":"2018-04-13 14:32:35","documents":null,"have_protocol_in_step":"0","is_protocol_in_step":"0","vendor_name":"Contributed by users","vendor_link":"https:\/\/www.protocols.io","vendor_logo":"\/img\/vendors\/1.png","mod_mins":"-45","mod_secs":"1","description":null,"is_bookmarked":"1","can_reassign":"1","before_start":null,"has_guidelines":"0","materials":[],"warning":null,"version_class":"10739","public":"1","is_owner":"1","is_original_owner":"1","created_on":"1520521938","protocol_affiliation":"FIMM, University of Helsinki,equal contribution; FIMM, University of Helsinki","affiliation":"FIMM, University of Helsinki","doi":"dx.doi.org\/10.17504\/protocols.io.nqtddwn","doi_status":"2","changed_fork_steps":null,"profile_url":"Priit-y2z2b403y2","protocol_img":"https:\/\/www.protocols.io\/img\/default_protocol.png","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/tsri986.jpg","full_name":"Priit Palta","created_by":"Priit Palta","private_link":"E46067135F37F821B141E59A9517FD79","original_img":"1","username":"priit-palta","is_retracted":"0","retraction_reason":null,"plos_id":null,"manuscript_citation":null,"journal_name":null,"is_donations_disabled":"0","is_donations_disabled_by_user":"9","item_record_id":291912,"fork_info":[],"compare_forks":[],"protocols":[],"groups":[{"group_id":"617","group_uri":"seqinfo","group_name":"FIMM HumGen Sequencing Informatics","group_logo":"https:\/\/s3.amazonaws.com\/pr-journal\/vs7i986.png","requested_uid":null,"request_flag":null,"my_request":"1"}],"number_of_shared_runs":[],"ownership_history":[{"created_on":"2018-03-08 15:12:18","change_time":"2018-03-08 15:12:18","username":"marita-a-isokallio","full_name":"Marita A. Isokallio","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/swii3gw.jpg","affiliation":"FIMM, University of Helsinki"},{"created_on":"2018-03-28 13:47:32","change_time":"2018-03-28 13:47:32","username":"priit-palta","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/tsri986.jpg","full_name":"Priit Palta","affiliation":"FIMM, University of Helsinki"}],"keywords":"human reference genome build lift-over, build update, GRCh38\/hg38","transfer_to_user":[],"sub_transfer":false,"is_transfer_pending":false,"number_of_bookmarks":"1","collections":[],"tags":[],"archived":0,"sub_authors":[],"sub_protocols_number":0,"can_edit_shared":0,"shared_runs":[{"username":"priit-palta","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/tsri986.jpg","full_name":"Priit Palta","group_name":"FIMM HumGen Sequencing Informatics","group_logo":"https:\/\/s3.amazonaws.com\/pr-journal\/vs7i986.png","group_uri":"seqinfo"}],"is_shared_run":1,"is_shared":1,"banner":null,"contact_badges":[{"badge_id":"2","badge_image":"\/img\/badges\/bronze.svg","badge_description":"Author!"},{"badge_id":"6","badge_image":"\/img\/badges\/socialbutterfly.svg","badge_description":"Social butterfly"}],"number_of_comments":1,"is_locked":0,"is_locked_by":false,"authors":"Kalle P\u00e4rn,Javier Nunez Fontarnau,Marita A. Isokallio,Timo Sipil\u00e4,Elina Kilpelainen,Aarno Palotie,Samuli Ripatti,Priit Palta","authors_list":[{"name":"Kalle P\u00e4rn","affiliation":"FIMM, University of Helsinki","username":"kalle-prn","profile_image":"\/img\/avatars\/014.png"},{"name":"Javier Nunez Fontarnau","affiliation":"FIMM, University of Helsinki","username":"javier-nunez-fontarnau","profile_image":"\/img\/avatars\/006.png"},{"name":"Marita A. Isokallio","affiliation":"FIMM, University of Helsinki","username":"marita-a-isokallio","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/swii3gw.jpg"},{"name":"Timo Sipil\u00e4","affiliation":"FIMM, University of Helsinki","username":"timo-sipil","profile_image":"\/img\/avatars\/017.png"},{"name":"Elina Kilpelainen","affiliation":"FIMM, University of Helsinki","username":"elina-kilpelainen","profile_image":"\/img\/avatars\/004.png"},{"name":"Aarno Palotie","affiliation":"equal contribution; FIMM, University of Helsinki","username":null,"profile_image":null},{"name":"Samuli Ripatti","affiliation":"equal contribution; FIMM, University of Helsinki","username":null,"profile_image":null},{"name":"Priit Palta","affiliation":"equal contribution; FIMM, University of Helsinki","username":"priit-palta","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/tsri986.jpg"}],"user":{"profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/tsri986.jpg","username":"priit-palta","full_name":"Priit Palta","created_by":"Priit Palta"},"access":{"can_view":"1","can_remove":"0","can_add":"0","can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":"1","can_move":"1","can_transfer":"1","can_download":"1","is_locked":"0"},"is_contact_suspended":0,"guidelines":null,"status_id":"1","is_research":"1","status_info":"We use this protocol in our group and it is working","steps":[{"id":"613534","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"F9F73331E7424860A7F92C017D95EEC8","previous_guid":"2129AED5F07042ED9B483F5005E92194","previous_id":"615684","last_modified":"1523264952","components":[{"component_id":"1069664","previous_id":0,"original_id":"0","guid":"0FBCE7A17778494AA0852DCF84C22902","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Genome build lift-over","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Genome build lift-over"},"is_project":0},{"component_id":"1069663","previous_id":"1069664","original_id":"0","guid":"1177A0877AAA4747B23A70EB565C145F","previous_guid":"0FBCE7A17778494AA0852DCF84C22902","component_type_id":"1","data_id":null,"data":"<p>If the genotyping chip used an older reference genome version (e.g. GRCh37\/hg19) and PLINK format, the data have to be lifted over to human genome build version 38 (GRCh38\/hg38).<\/p>\n<p>\u00a0<\/p>\n<p>For the genome build lift-over we suggest Will Rayner's method.<\/p>\n<p>Download your genotyping chip -specific build 38 zip file (strand and position files) and 'update_build.sh' script from:\u00a0<a href=\"http:\/\/www.well.ox.ac.uk\/~wrayner\/strand\/ \" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/www.well.ox.ac.uk\/~wrayner\/strand\/<\/a><\/p>\n<p>For example:<\/p>\n<pre class=\"language-markup\"><code>wget http:\/\/www.well.ox.ac.uk\/~wrayner\/strand\/update_build.sh .\nwget http:\/\/www.well.ox.ac.uk\/~wrayner\/strand\/your_chip_platform_specific_chip_strandfile-b38-strand.zip .<\/code><\/pre>\n<p>\u00a0<\/p>\n<p><strong>IMPORTANT NOTES:<\/strong><\/p>\n<p>\u2022 'update_build.sh' uses hardcoded command 'plink', make sure you have exported the path correctly or replace the plink commands with full path to your PLNK installation<\/p>\n<p>\u2022 The method assumes the chip data in Illumina TOP strand format. If this is not the case, the variants are incorrectly flipped and need to be back-flipped (see later steps for further instructions).<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>Uncompress the downloaded files and use the .strand file to run the script with the command below.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><br \/>\u2022 &lt;dataset&gt; input file prefix of PLINK format files (.bed, .bim, .fam)<br \/>\u2022 &lt;chip_strandfiles&gt;.zip strand files corresponding the genotyping chip<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>Output files:<\/strong><br \/>\u2022 &lt;dataset&gt;_b38.bed<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.bim<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.fam<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>If the genotyping chip used an older reference genome version (e.g. GRCh37\/hg19) and PLINK format, the data have to be lifted over to human genome build version 38 (GRCh38\/hg38).<\/p>\n<p>\u00a0<\/p>\n<p>For the genome build lift-over we suggest Will Rayner's method.<\/p>\n<p>Download your genotyping chip -specific build 38 zip file (strand and position files) and 'update_build.sh' script from:\u00a0<a href=\"http:\/\/www.well.ox.ac.uk\/~wrayner\/strand\/ \" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/www.well.ox.ac.uk\/~wrayner\/strand\/<\/a><\/p>\n<p>For example:<\/p>\n<pre class=\"language-markup\"><code>wget http:\/\/www.well.ox.ac.uk\/~wrayner\/strand\/update_build.sh .\nwget http:\/\/www.well.ox.ac.uk\/~wrayner\/strand\/your_chip_platform_specific_chip_strandfile-b38-strand.zip .<\/code><\/pre>\n<p>\u00a0<\/p>\n<p><strong>IMPORTANT NOTES:<\/strong><\/p>\n<p>\u2022 'update_build.sh' uses hardcoded command 'plink', make sure you have exported the path correctly or replace the plink commands with full path to your PLNK installation<\/p>\n<p>\u2022 The method assumes the chip data in Illumina TOP strand format. If this is not the case, the variants are incorrectly flipped and need to be back-flipped (see later steps for further instructions).<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>Uncompress the downloaded files and use the .strand file to run the script with the command below.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><br \/>\u2022 &lt;dataset&gt; input file prefix of PLINK format files (.bed, .bim, .fam)<br \/>\u2022 &lt;chip_strandfiles&gt;.zip strand files corresponding the genotyping chip<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>Output files:<\/strong><br \/>\u2022 &lt;dataset&gt;_b38.bed<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.bim<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.fam<\/p>"},"is_project":0},{"component_id":"1086136","previous_id":"1069663","original_id":"0","guid":"6C798A2DE5CD4A459B5511D454B2DD85","previous_guid":"1177A0877AAA4747B23A70EB565C145F","component_type_id":"15","data_id":"3768","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Uncompress the files\nunzip <chip_strandfiles>.zip\n\n# Run the script\n.\/update_build.sh <dataset> <chip_strandfile>.strand <dataset>_b38","description":"","os_name":"","os_version":"","can_edit":"0"},"is_project":0}]},{"id":"615674","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"5BF51C45FAC54A219EE9DC41371412FC","previous_guid":"F9F73331E7424860A7F92C017D95EEC8","previous_id":"613534","last_modified":"1523346100","components":[{"component_id":"1074840","previous_id":0,"original_id":"0","guid":"DCEEA7ED7B2D4999B5550B3FBC52463B","previous_guid":null,"component_type_id":"1","data_id":null,"data":"<p>To confirm the successful genome build lift-over, chip data allele frequencies are compared against the reference data allele frequencies. In this step, chip data allele frequency file is generated.<\/p>\n<p>\u00a0<\/p>\n<p>The allele frequency report format is as defined at PLINK site <a href=\"http:\/\/www.cog-genomics.org\/plink\/1.9\/formats#frq\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/www.cog-genomics.org\/plink\/1.9\/formats#frq<\/a> and the columns are also described below.<\/p>\n<ol>\n<li>CHR - Chromosome code (only chromosome number, e.g. '1')<\/li>\n<li>SNP - Variant identifier<\/li>\n<li>A1 - Usually minor allele<\/li>\n<li>A2 - Usually major allele<\/li>\n<li>MAF - A1 frequency (values from 0 to 0.5)<\/li>\n<li>NCHROBS - Number of allele observations<\/li>\n<\/ol>\n<p>\u00a0<\/p>\n<p>The PLINK format frequency file needs to be reformatted such that it corresponds to the VCF-style format for GRCh38\/hg38:<\/p>\n<ol>\n<li>CHR - Chromosome code (with 'chr' tag, e.g. 'chr1')<\/li>\n<li>SNP - Variant identifier in format CHR_POS_REF_ALT<\/li>\n<li>REF - Reference allele<\/li>\n<li>ALT - Alternative allele<\/li>\n<li>AF - Allele frequency (values from 0 to 1)<\/li>\n<\/ol>\n<p>Utilize <strong>.bim<\/strong> file to first generate the CHR, SNP, REF and ALT columns using A2 as the REF allele, and take AF from the <strong>.frq<\/strong> file.<\/p>\n<p>\u00a0<\/p>\n<p>Then do the same by using A1 as REF allele and invert the AF by subtracting it from 1. Combine the generated files into a single file representing VCF-style format.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_b38.bed<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.bim<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.fam<\/p>\n<p>\u00a0<\/p>\n<p><strong>Output files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_vcf_format.frq<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>To confirm the successful genome build lift-over, chip data allele frequencies are compared against the reference data allele frequencies. In this step, chip data allele frequency file is generated.<\/p>\n<p>\u00a0<\/p>\n<p>The allele frequency report format is as defined at PLINK site <a href=\"http:\/\/www.cog-genomics.org\/plink\/1.9\/formats#frq\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/www.cog-genomics.org\/plink\/1.9\/formats#frq<\/a> and the columns are also described below.<\/p>\n<ol>\n<li>CHR - Chromosome code (only chromosome number, e.g. '1')<\/li>\n<li>SNP - Variant identifier<\/li>\n<li>A1 - Usually minor allele<\/li>\n<li>A2 - Usually major allele<\/li>\n<li>MAF - A1 frequency (values from 0 to 0.5)<\/li>\n<li>NCHROBS - Number of allele observations<\/li>\n<\/ol>\n<p>\u00a0<\/p>\n<p>The PLINK format frequency file needs to be reformatted such that it corresponds to the VCF-style format for GRCh38\/hg38:<\/p>\n<ol>\n<li>CHR - Chromosome code (with 'chr' tag, e.g. 'chr1')<\/li>\n<li>SNP - Variant identifier in format CHR_POS_REF_ALT<\/li>\n<li>REF - Reference allele<\/li>\n<li>ALT - Alternative allele<\/li>\n<li>AF - Allele frequency (values from 0 to 1)<\/li>\n<\/ol>\n<p>Utilize <strong>.bim<\/strong> file to first generate the CHR, SNP, REF and ALT columns using A2 as the REF allele, and take AF from the <strong>.frq<\/strong> file.<\/p>\n<p>\u00a0<\/p>\n<p>Then do the same by using A1 as REF allele and invert the AF by subtracting it from 1. Combine the generated files into a single file representing VCF-style format.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_b38.bed<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.bim<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.fam<\/p>\n<p>\u00a0<\/p>\n<p><strong>Output files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_vcf_format.frq<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"1074841","previous_id":"1074840","original_id":"0","guid":"D2F4D3729E284F2ABB6F81D2EE5F9A5A","previous_guid":"DCEEA7ED7B2D4999B5550B3FBC52463B","component_type_id":"6","data_id":"0","data":"Lift-over verification","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Lift-over verification"},"is_project":0},{"component_id":"1087045","previous_id":"1074841","original_id":"0","guid":"8DD2C2104CE6455EBF08B7E0B2119311","previous_guid":"D2F4D3729E284F2ABB6F81D2EE5F9A5A","component_type_id":"15","data_id":"3773","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# First generate a frequency file from the chip data\nplink --bfile <dataset>_b38 --freq --out <dataset>_plink\n\n# Remove the PLINK format frequency file header\nsed -i -e '1d' <dataset>_plink.frq\n\n# Generate a tab-separated frequency file for the major allele\n# Include 'chr' tags to the chromosome names in the first 2 columns as this is the notation in hg38\n# Add also a SNP column (in format CHR_POS_REF_ALT here columns $1, $4, $6 and $5 of the .bim file) and a header which match to the header format in the panel.frq file\npaste <(awk -v OFS='\\t' '{print \"chr\"$1, \"chr\"$1\"_\"$4\"_\"$6\"_\"$5, $6, $5}' <dataset>_b38.bim) <(awk -v OFS='\\t' '{print $5}' <dataset>_plink.frq) | \\\nawk 'BEGIN{printf \"CHR\\tSNP\\tREF\\tALT\\tAF\\n\"} {print $0}' > <dataset>_major_allele.frq\n\n# Generate a tab-separated frequency file for the minor allele\n# Include 'chr' tags to the chromosome names in the first 2 columns as this is the notation in hg38\n# Add also a SNP column (in format CHR_POS_REF_ALT here columns $1, $4, $5 and $6 of the .bim file) which match to the format in the panel.frq file\npaste <(awk -v OFS='\\t' '{print \"chr\"$1, \"chr\"$1\"_\"$4\"_\"$5\"_\"$6, $5, $6}' <dataset>_b38.bim) <(awk -v OFS='\\t' '{print 1-$5}' <dataset>_plink.frq) > <dataset>_minor_allele.frq\n\n# Concatenate the two files into a single .frq file\ncat <dataset>_major_allele.frq <dataset>_minor_allele.frq > <dataset>_vcf_format.frq\n\n# Ensure that chrX uses the GRCh38\/hg38 notation\nsed -i 's\/chr23\/chrX\/g' <dataset>_vcf_format.frq","description":"","os_name":"","os_version":"","can_edit":"0"},"is_project":0}]},{"id":"615680","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"8F5A0CE348EA4282A8286913DB6FAC57","previous_guid":"186CB338B2D64C87AFB60F03A1B992D5","previous_id":"615871","last_modified":"1523346043","components":[{"component_id":"1074858","previous_id":0,"original_id":"0","guid":"0EF961CB3EE44161A74CCCB603DA11B5","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Optional data consistency verification","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Optional data consistency verification"},"is_project":0},{"component_id":"1074857","previous_id":"1074858","original_id":"0","guid":"68963063E859401891B6D9BDFF87FF6D","previous_guid":"0EF961CB3EE44161A74CCCB603DA11B5","component_type_id":"1","data_id":null,"data":"<p>If for some reason your <strong>.fam<\/strong> file does not include the sex information (e.g. a VCF converted to PLINK format files loses the sex information), sex information need to be added into the <strong>.fam<\/strong> file from a separate file.<\/p>\n<p>\u00a0<\/p>\n<p>Confirm that the sex information is present in the 5th column for all samples.<\/p>\n<p>If not, obtain the sex information from the original source of your data and update the<strong> .fam<\/strong> file as suggested in the comman below.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_genders.txt - containing FID and IID in the first two columns and sex information in the third column as 1 = male, 2 = female or 0 = ambiguous<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.bed<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.bim<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.fam<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>Output files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_b38_updated_genders.bed<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_updated_genders.bim<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_updated_genders.fam<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>If for some reason your <strong>.fam<\/strong> file does not include the sex information (e.g. a VCF converted to PLINK format files loses the sex information), sex information need to be added into the <strong>.fam<\/strong> file from a separate file.<\/p>\n<p>\u00a0<\/p>\n<p>Confirm that the sex information is present in the 5th column for all samples.<\/p>\n<p>If not, obtain the sex information from the original source of your data and update the<strong> .fam<\/strong> file as suggested in the comman below.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_genders.txt - containing FID and IID in the first two columns and sex information in the third column as 1 = male, 2 = female or 0 = ambiguous<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.bed<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.bim<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.fam<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>Output files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_b38_updated_genders.bed<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_updated_genders.bim<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_updated_genders.fam<\/p>"},"is_project":0},{"component_id":"1074859","previous_id":"1074857","original_id":"0","guid":"921EA7A237B146FBA21A9093A7FA05E6","previous_guid":"68963063E859401891B6D9BDFF87FF6D","component_type_id":"15","data_id":"3630","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Update genders\nplink --bfile <dataset>_b38 --update-sex <dataset>_genders.txt --make-bed --out <dataset>_b38_updated_genders","description":"","os_name":"","os_version":"","can_edit":"0"},"is_project":0}]},{"id":"615681","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"4E9BA4B811EF4ACCAB003D00EBC02224","previous_guid":"8F5A0CE348EA4282A8286913DB6FAC57","previous_id":"615680","last_modified":"1523292070","components":[{"component_id":"1074861","previous_id":0,"original_id":"0","guid":"6A422632585041248BDC7C47D93B5F29","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Optional data consistency verification","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Optional data consistency verification"},"is_project":0},{"component_id":"1074860","previous_id":"1074861","original_id":"0","guid":"CD6E0E24EEE64F4B8188F2075E383757","previous_guid":"6A422632585041248BDC7C47D93B5F29","component_type_id":"1","data_id":null,"data":"<p>Sometimes the alleles are marked for instance as '<strong>B<\/strong>', and such variants should be excluded.<\/p>\n<p>\u00a0<\/p>\n<p>Confirm that the alleles are in standard format i.e. <strong>A<\/strong>, <strong>C<\/strong>, <strong>G<\/strong> or <strong>T<\/strong>.<\/p>\n<p>If not, correct the inconsistency by removing variants with non-standard allele notation as suggested in the command below.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_b38_updated_genders.bed<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_updated_genders.bim<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_updated_genders.fam<\/p>\n<p>\u00a0<\/p>\n<p><strong>Output files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_b38_Bvariantlist.txt<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_clean.bed<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_clean.bim<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_clean.fam<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Sometimes the alleles are marked for instance as '<strong>B<\/strong>', and such variants should be excluded.<\/p>\n<p>\u00a0<\/p>\n<p>Confirm that the alleles are in standard format i.e. <strong>A<\/strong>, <strong>C<\/strong>, <strong>G<\/strong> or <strong>T<\/strong>.<\/p>\n<p>If not, correct the inconsistency by removing variants with non-standard allele notation as suggested in the command below.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_b38_updated_genders.bed<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_updated_genders.bim<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_updated_genders.fam<\/p>\n<p>\u00a0<\/p>\n<p><strong>Output files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_b38_Bvariantlist.txt<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_clean.bed<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_clean.bim<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_clean.fam<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"1074862","previous_id":"1074860","original_id":"0","guid":"B5BBC7A7F2924931B0F36339F2BD5F10","previous_guid":"CD6E0E24EEE64F4B8188F2075E383757","component_type_id":"15","data_id":"3631","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Check your .bim file for B alleles\ngrep -P '\\tB\\t|\\tB$' <dataset>_b38_updated_genders.bim | cut -f 2 > <dataset>_b38_Bvariantlist.txt\n\n# Remove those variants from the dataset\nplink --bfile <dataset>_b38_updated_genders --exclude <dataset>_b38_Bvariantlist.txt --make-bed --out <dataset>_b38_clean","description":"","os_name":"","os_version":"","can_edit":"0"},"is_project":0}]},{"id":"615682","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"0D287327F8124EF5B3273141A75760CA","previous_guid":"4E9BA4B811EF4ACCAB003D00EBC02224","previous_id":"615681","last_modified":"1523354648","components":[{"component_id":"1074863","previous_id":0,"original_id":"0","guid":"EBE1B294E42D4C989882FF241BB39A73","previous_guid":null,"component_type_id":"1","data_id":null,"data":"<p>Make sure no duplicate samples exist. Redundant individual IDs (IIDs) can cause some issues when working with VCF files (e.g. in the next step).<\/p>\n<p>In case of duplicates, consider excluding them or adding a running number to those sample\/individual IDs in the <strong>.fam<\/strong> file.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_b38_clean.fam<\/p>\n<p>\u00a0<\/p>\n<p><strong>Output file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_b38_clean.fam<\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Make sure no duplicate samples exist. Redundant individual IDs (IIDs) can cause some issues when working with VCF files (e.g. in the next step).<\/p>\n<p>In case of duplicates, consider excluding them or adding a running number to those sample\/individual IDs in the <strong>.fam<\/strong> file.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_b38_clean.fam<\/p>\n<p>\u00a0<\/p>\n<p><strong>Output file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_b38_clean.fam<\/p>"},"is_project":0},{"component_id":"1074864","previous_id":"1074863","original_id":"0","guid":"CD8B4934720F4FCD8AC3C6F4655311F1","previous_guid":"EBE1B294E42D4C989882FF241BB39A73","component_type_id":"6","data_id":"0","data":"Optional data consistency verification","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Optional data consistency verification"},"is_project":0},{"component_id":"1086652","previous_id":"1074864","original_id":"0","guid":"380E50CDB36A409CB89D8088389BBEBE","previous_guid":"CD8B4934720F4FCD8AC3C6F4655311F1","component_type_id":"15","data_id":"3772","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Find out possible sample ID (IID) duplicates\ncut -d' ' -f 2,2 <dataset>_b38_clean.fam | sort | uniq -d\n\n# If only few duplicates, edit <dataset>_b38_clean.fam \n# and add a suffix to such IIDs.\n\n# If many duplicates, append an index (row number) to each and every IID\ncat <dataset>_b38_clean.fam | awk '{$2=$2\"_\"NR ; print $0}' >   <dataset>_b38_nodups.fam\n\n# Rename the file back to match with the other PLINK files (.bed and .bim)\nmv <dataset>_b38_nodups.fam <dataset>_b38_clean.fam","description":"","os_name":"","os_version":"","can_edit":"0"},"is_project":0}]},{"id":"615684","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"2129AED5F07042ED9B483F5005E92194","previous_guid":null,"previous_id":"0","last_modified":"1523367702","components":[{"component_id":"1074869","previous_id":0,"original_id":"0","guid":"1578A3F71E64462EB45D3CD4FDB3CFCD","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Requirements and preparatory steps","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Requirements and preparatory steps"},"is_project":0},{"component_id":"1074868","previous_id":"1074869","original_id":"0","guid":"38FD6D875C694FDFAF7B74B50D7F8F70","previous_guid":"1578A3F71E64462EB45D3CD4FDB3CFCD","component_type_id":"1","data_id":null,"data":"<p><strong>The protocol is aimed for lifting genotyping chip data from older reference genome build versions over to human reference genome build version GRCh38\/hg38.<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>For a 'quick and dirty' lift-over you can jump straight to <strong>Step 2<\/strong> and only run that.<\/p>\n<p>For high-quality and verified results we suggest running through <strong>Steps 1-9<\/strong>.<\/p>\n<p>If you additionally need to convert your chip data from PLINK format to VCF format, also follow <strong>Steps 10-11<\/strong>.<\/p>\n<p>\u00a0<\/p>\n<p>Throughout the protocol we assume Bash shell.<strong><br \/><\/strong><\/p>\n<p>\u00a0<\/p>\n<p>This <strong>Step 1<\/strong> defines the requirements for the protocol (e.g. required software packages and reference files) and suggests example commands how to process the files into suitable formats.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.1 Software packages<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>1.1.1 Download and install the software packages <\/strong><\/p>\n<p>Required software packages are listed below with the versions that were used in the protocol below. However, use of the newest versions is recommended.<\/p>\n<ul>\n<li>PLINK v1.9 <a href=\"http:\/\/www.cog-genomics.org\/plink\/1.9\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/www.cog-genomics.org\/plink\/1.9\/<\/a><\/li>\n<li>R v3.3.0 <a href=\"https:\/\/www.r-project.org\/\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/www.r-project.org\/<\/a><\/li>\n<li>R package data.table <a href=\"https:\/\/github.com\/Rdatatable\/data.table\/wiki\/Installation\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/github.com\/Rdatatable\/data.table\/wiki\/Installation<\/a><\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p><strong>1.1.2 Optional software packages (required for VCF conversion Steps 10 and 11)<\/strong><\/p>\n<ul>\n<li>BCFtools v1.7 <a href=\"http:\/\/www.htslib.org\/download\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/www.htslib.org\/download\/<\/a><\/li>\n<li>bgzip is part of the BCFtools package<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.1.3 Export the paths<\/strong><\/p>\n<p>Once installed, export the correct paths to environmental variable PATH:<\/p>\n<pre class=\"language-markup\"><code>echo PATH=$PATH:\/path\/to\/installed\/plink\/executable\/dir\/:\/path\/to\/installed\/R\/executable\/dir\/:\/path\/to\/installed\/bcftools\/executable\/dir\/ &gt;&gt; $HOME\/.bashrc\n\nsource $HOME\/.bashrc<\/code><\/pre>\n<p>\u00a0<\/p>\n<p><strong>1.1.4 Install the R package<\/strong><\/p>\n<p>Once R is installed, the 'data.table' package can be installed <strong>in R<\/strong>, e.g.:<\/p>\n<pre class=\"language-markup\"><code>install.packages('data.table', type = 'source', repos = 'http:\/\/Rdatatable.github.io\/data.table')<\/code><\/pre>\n<p>or, alternatively, if you already downloaded the package:<\/p>\n<pre class=\"language-markup\"><code>install.packages('\/path\/to\/the\/downloaded\/data.table_1.10.4.tar.gz', repos = NULL, type = 'source')<\/code><\/pre>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.2. Reference data (variant allele frequency file)<br \/><\/strong><\/p>\n<p>Reference variant allele frequency file is required for comparison of the chip genotyped variant allele frequencies in order to identify possible allele swaps and variants with unexpected allele frequency discrepancies.<\/p>\n<p>\u00a0<\/p>\n<p><strong><em>Note: Chromosome notation in the reference data should follow the GRCh38\/hg38 notations ('chr#' for autosomal chromosomes and 'chrX' for chromosome 23).<\/em><\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>1.2.1 Obtain the reference variant allele frequency data<br \/><\/strong><\/p>\n<p>If population-specific data are available (e.g. from a corresponding WGS effort) using these data would be preferrable.<\/p>\n<p>Process the data as instructed in <strong>Steps 1.2.2-1.2.4<\/strong>.<\/p>\n<p>\u00a0<\/p>\n<p>If population-specific reference data is not available, for instance 1000 Genomes Project (<a href=\"https:\/\/www.nature.com\/articles\/nature15393\" target=\"_blank\" rel=\"noopener noreferrer\">www.nature.com\/articles\/nature15393<\/a>) data can be used instead.<\/p>\n<p>We have prepared (as described below in <strong>Steps 1.2.2-1.2.4<\/strong>) the 1000 Genomes Project GRCh38\/hg38 data (downloaded from the EBI FTP site: <a href=\"ftp:\/\/ftp.1000genomes.ebi.ac.uk\/vol1\/ftp\/release\/20130502\/supporting\/GRCh38_positions\/\" target=\"_blank\" rel=\"noopener noreferrer\">ftp:\/\/ftp.1000genomes.ebi.ac.uk\/vol1\/ftp\/release\/20130502\/supporting\/GRCh38_positions\/<\/a>) to generate variant allele frequency files for 1000GP ALL and EUR samples.<\/p>\n<p>\u00a0<\/p>\n<p>The corresponding allele frequency files are available for downloading at Google Cloud: <a href=\"https:\/\/console.cloud.google.com\/storage\/browser\/fimm-public-data\/1000GP_frq_files\/\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/console.cloud.google.com\/storage\/browser\/fimm-public-data\/1000GP_frq_files\/<\/a><\/p>\n<p>If you use these files, you can skip creating the frequency file and <strong>jump to Step 1.3<\/strong>. Otherwise (if you want to create your own\/alternative 1000GP-based custom reference frequency file), follow the steps below.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.2.2 Check for multiallelic sites<\/strong><\/p>\n<p>Confirm that multiallelic sites (if present) in your reference data files are decomposed. If they are not, use the example command below to split the multiallelic sites into biallelic records:<\/p>\n<pre class=\"language-markup\"><code>for chr in {1..23}; do\n    bcftools norm -m -any ref_data_chr${chr}.vcf.gz -Oz -o ref_data_split_multiallelic_chr${chr}.vcf.gz\ndone<\/code><\/pre>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.2.3 Check the chromosome notation<\/strong><\/p>\n<p>Confirm that the chromosome notation in your reference data files follows the GRCh38\/h38 notations as <strong>'chr#'<\/strong> for autosomal, <strong>'chrX'<\/strong> for chromosome 23 and <strong>'chrM'<\/strong> for mitochondrial sites.<\/p>\n<p>If not, see <strong>Step 11 <\/strong>for an example command to rename the chromosomes before proceeding.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.2.4 Generate the allele frequency file<\/strong><\/p>\n<p>Generate a tab-delimited file of the reference data allele frequencies, one line per variant, with columns CHR, SNP (as CHR_POS_REF_ALT), REF, ALT, AF (including the header line).<\/p>\n<p>\u00a0<\/p>\n<p>Use the reference data VCF files as input with the example command below and save the generated frequency file as:<\/p>\n<ul>\n<li>ref_data.frq<\/li>\n<\/ul>\n<pre class=\"language-markup\"><code># Check your reference data VCF and if it does NOT contain AF in the INFO field, calculate it with BCFTools +fill-tags plugin \n# Note: BCFTools plugins require environmental variable BCFTOOLS_PLUGINS exported\nexport BCFTOOLS_PLUGINS=\/path\/to\/bcftools\/plugins_folder\n# Calculate AF for each chromosome VCF file\nfor chr in {1..23}; do\n    bcftools +fill-tags ref_data_chr${chr}.vcf.gz -Oz -o ref_data_AF_chr${chr}.vcf.gz -- -t AF\ndone\n\n# Generate a tab-delimited header for the allele frequency file\necho -e 'CHR\\tSNP\\tREF\\tALT\\tAF' &gt; ref_data.frq\n\n# Query the required fields from the reference VCF files and append to the allele frequency file\nfor chr in {1..23}; do\n    bcftools query -f '%CHROM\\t%CHROM\\_%POS\\_%REF\\_%ALT\\t%REF\\t%ALT\\t%INFO\/AF\\n' ref_data_chr${chr}.vcf.gz &gt;&gt; ref_data.frq\ndone<\/code><\/pre>\n<p><strong><em>Note: Chromosome notation should follow the GRCh38\/hg38 notations ('chr#' for autosomal chromosomes and 'chrX' for chromosome 23).<\/em><\/strong><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.3. You are ready to start! <\/strong><\/p>\n<p><strong>As the last prepatory step, let's go over the required input data file(s) and also expected final output files!<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.3.1 Protocol input files<\/strong><\/p>\n<p>Input data is the chip genotype data in PLINK format (here v1.9).<\/p>\n<p>More details on the PLINK formats can be found at PLINK web page: <a href=\"http:\/\/www.cog-genomics.org\/plink\/1.9\/formats\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/www.cog-genomics.org\/plink\/1.9\/formats<\/a><\/p>\n<p>\u00a0<\/p>\n<ul>\n<li><strong>&lt;dataset&gt;.bed<\/strong> - binary representation of genotype calls<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<ul>\n<li><strong>&lt;dataset&gt;.bim<\/strong> - extended variant information file including six columns:<\/li>\n<\/ul>\n<ol>\n<li>Chromosome code (either an integer, or 'X'\/'Y'\/'XY'\/'MT'; '0' indicates unknown) or name<\/li>\n<li>Variant identifier<\/li>\n<li>Position in morgans or centimorgans (safe to use dummy value of '0')<\/li>\n<li>Chromosomal base-pair coordinate<\/li>\n<li>Allele 1 (corresponding to clear bits in .bed; usually minor)<\/li>\n<li>Allele 2 (corresponding to set bits in .bed; usually major)<\/li>\n<\/ol>\n<p>\u00a0<\/p>\n<ul>\n<li><strong>&lt;dataset&gt;.fam<\/strong> - sample information file including six columns:<\/li>\n<\/ul>\n<ol>\n<li>Family ID ('FID')<\/li>\n<li>Within-family ID ('IID'; cannot be '0')<\/li>\n<li>Within-family ID of father ('0' if father isn't in dataset)<\/li>\n<li>Within-family ID of mother ('0' if mother isn't in dataset)<\/li>\n<li>Sex code ('1' = male, '2' = female, '0' = unknown)<\/li>\n<li>Phenotype value ('1' = control, '2' = case, '-9'\/'0'\/non-numeric = missing data if case\/control)<\/li>\n<\/ol>\n<p>\u00a0<\/p>\n<p><strong>1.3.2 Final protocol output files:<\/strong><\/p>\n<p>The final file set are the PLINK format files lifted over to human genome reference build 38 (b38).<\/p>\n<p>Depending on the dataset in question, different data consistency verification steps (<strong>Steps 7-9<\/strong>) may have been required. Thus, the final output filename tags (&lt;tags&gt;) can vary from run to run.<\/p>\n<ul>\n<li>&lt;dataset&gt;_b38_&lt;tags&gt;.bed<\/li>\n<li>&lt;dataset&gt;_b38_&lt;tags&gt;.bim<\/li>\n<li>&lt;dataset&gt;_b38_&lt;tags&gt;.fam<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p>The final output file from optional <strong>Steps 10<\/strong> and <strong>11<\/strong>:<\/p>\n<ul>\n<li>&lt;dataset&gt;_b38.vcf.gz<\/li>\n<\/ul>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p><strong>The protocol is aimed for lifting genotyping chip data from older reference genome build versions over to human reference genome build version GRCh38\/hg38.<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>For a 'quick and dirty' lift-over you can jump straight to <strong>Step 2<\/strong> and only run that.<\/p>\n<p>For high-quality and verified results we suggest running through <strong>Steps 1-9<\/strong>.<\/p>\n<p>If you additionally need to convert your chip data from PLINK format to VCF format, also follow <strong>Steps 10-11<\/strong>.<\/p>\n<p>\u00a0<\/p>\n<p>Throughout the protocol we assume Bash shell.<strong><br \/><\/strong><\/p>\n<p>\u00a0<\/p>\n<p>This <strong>Step 1<\/strong> defines the requirements for the protocol (e.g. required software packages and reference files) and suggests example commands how to process the files into suitable formats.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.1 Software packages<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>1.1.1 Download and install the software packages <\/strong><\/p>\n<p>Required software packages are listed below with the versions that were used in the protocol below. However, use of the newest versions is recommended.<\/p>\n<ul>\n<li>PLINK v1.9 <a href=\"http:\/\/www.cog-genomics.org\/plink\/1.9\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/www.cog-genomics.org\/plink\/1.9\/<\/a><\/li>\n<li>R v3.3.0 <a href=\"https:\/\/www.r-project.org\/\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/www.r-project.org\/<\/a><\/li>\n<li>R package data.table <a href=\"https:\/\/github.com\/Rdatatable\/data.table\/wiki\/Installation\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/github.com\/Rdatatable\/data.table\/wiki\/Installation<\/a><\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p><strong>1.1.2 Optional software packages (required for VCF conversion Steps 10 and 11)<\/strong><\/p>\n<ul>\n<li>BCFtools v1.7 <a href=\"http:\/\/www.htslib.org\/download\/\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/www.htslib.org\/download\/<\/a><\/li>\n<li>bgzip is part of the BCFtools package<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.1.3 Export the paths<\/strong><\/p>\n<p>Once installed, export the correct paths to environmental variable PATH:<\/p>\n<pre class=\"language-markup\"><code>echo PATH=$PATH:\/path\/to\/installed\/plink\/executable\/dir\/:\/path\/to\/installed\/R\/executable\/dir\/:\/path\/to\/installed\/bcftools\/executable\/dir\/ &gt;&gt; $HOME\/.bashrc\n\nsource $HOME\/.bashrc<\/code><\/pre>\n<p>\u00a0<\/p>\n<p><strong>1.1.4 Install the R package<\/strong><\/p>\n<p>Once R is installed, the 'data.table' package can be installed <strong>in R<\/strong>, e.g.:<\/p>\n<pre class=\"language-markup\"><code>install.packages('data.table', type = 'source', repos = 'http:\/\/Rdatatable.github.io\/data.table')<\/code><\/pre>\n<p>or, alternatively, if you already downloaded the package:<\/p>\n<pre class=\"language-markup\"><code>install.packages('\/path\/to\/the\/downloaded\/data.table_1.10.4.tar.gz', repos = NULL, type = 'source')<\/code><\/pre>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.2. Reference data (variant allele frequency file)<br \/><\/strong><\/p>\n<p>Reference variant allele frequency file is required for comparison of the chip genotyped variant allele frequencies in order to identify possible allele swaps and variants with unexpected allele frequency discrepancies.<\/p>\n<p>\u00a0<\/p>\n<p><strong><em>Note: Chromosome notation in the reference data should follow the GRCh38\/hg38 notations ('chr#' for autosomal chromosomes and 'chrX' for chromosome 23).<\/em><\/strong><\/p>\n<p>\u00a0<\/p>\n<p><strong>1.2.1 Obtain the reference variant allele frequency data<br \/><\/strong><\/p>\n<p>If population-specific data are available (e.g. from a corresponding WGS effort) using these data would be preferrable.<\/p>\n<p>Process the data as instructed in <strong>Steps 1.2.2-1.2.4<\/strong>.<\/p>\n<p>\u00a0<\/p>\n<p>If population-specific reference data is not available, for instance 1000 Genomes Project (<a href=\"https:\/\/www.nature.com\/articles\/nature15393\" target=\"_blank\" rel=\"noopener noreferrer\">www.nature.com\/articles\/nature15393<\/a>) data can be used instead.<\/p>\n<p>We have prepared (as described below in <strong>Steps 1.2.2-1.2.4<\/strong>) the 1000 Genomes Project GRCh38\/hg38 data (downloaded from the EBI FTP site: <a href=\"ftp:\/\/ftp.1000genomes.ebi.ac.uk\/vol1\/ftp\/release\/20130502\/supporting\/GRCh38_positions\/\" target=\"_blank\" rel=\"noopener noreferrer\">ftp:\/\/ftp.1000genomes.ebi.ac.uk\/vol1\/ftp\/release\/20130502\/supporting\/GRCh38_positions\/<\/a>) to generate variant allele frequency files for 1000GP ALL and EUR samples.<\/p>\n<p>\u00a0<\/p>\n<p>The corresponding allele frequency files are available for downloading at Google Cloud: <a href=\"https:\/\/console.cloud.google.com\/storage\/browser\/fimm-public-data\/1000GP_frq_files\/\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/console.cloud.google.com\/storage\/browser\/fimm-public-data\/1000GP_frq_files\/<\/a><\/p>\n<p>If you use these files, you can skip creating the frequency file and <strong>jump to Step 1.3<\/strong>. Otherwise (if you want to create your own\/alternative 1000GP-based custom reference frequency file), follow the steps below.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.2.2 Check for multiallelic sites<\/strong><\/p>\n<p>Confirm that multiallelic sites (if present) in your reference data files are decomposed. If they are not, use the example command below to split the multiallelic sites into biallelic records:<\/p>\n<pre class=\"language-markup\"><code>for chr in {1..23}; do\n    bcftools norm -m -any ref_data_chr${chr}.vcf.gz -Oz -o ref_data_split_multiallelic_chr${chr}.vcf.gz\ndone<\/code><\/pre>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.2.3 Check the chromosome notation<\/strong><\/p>\n<p>Confirm that the chromosome notation in your reference data files follows the GRCh38\/h38 notations as <strong>'chr#'<\/strong> for autosomal, <strong>'chrX'<\/strong> for chromosome 23 and <strong>'chrM'<\/strong> for mitochondrial sites.<\/p>\n<p>If not, see <strong>Step 11 <\/strong>for an example command to rename the chromosomes before proceeding.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.2.4 Generate the allele frequency file<\/strong><\/p>\n<p>Generate a tab-delimited file of the reference data allele frequencies, one line per variant, with columns CHR, SNP (as CHR_POS_REF_ALT), REF, ALT, AF (including the header line).<\/p>\n<p>\u00a0<\/p>\n<p>Use the reference data VCF files as input with the example command below and save the generated frequency file as:<\/p>\n<ul>\n<li>ref_data.frq<\/li>\n<\/ul>\n<pre class=\"language-markup\"><code># Check your reference data VCF and if it does NOT contain AF in the INFO field, calculate it with BCFTools +fill-tags plugin \n# Note: BCFTools plugins require environmental variable BCFTOOLS_PLUGINS exported\nexport BCFTOOLS_PLUGINS=\/path\/to\/bcftools\/plugins_folder\n# Calculate AF for each chromosome VCF file\nfor chr in {1..23}; do\n    bcftools +fill-tags ref_data_chr${chr}.vcf.gz -Oz -o ref_data_AF_chr${chr}.vcf.gz -- -t AF\ndone\n\n# Generate a tab-delimited header for the allele frequency file\necho -e 'CHR\\tSNP\\tREF\\tALT\\tAF' &gt; ref_data.frq\n\n# Query the required fields from the reference VCF files and append to the allele frequency file\nfor chr in {1..23}; do\n    bcftools query -f '%CHROM\\t%CHROM\\_%POS\\_%REF\\_%ALT\\t%REF\\t%ALT\\t%INFO\/AF\\n' ref_data_chr${chr}.vcf.gz &gt;&gt; ref_data.frq\ndone<\/code><\/pre>\n<p><strong><em>Note: Chromosome notation should follow the GRCh38\/hg38 notations ('chr#' for autosomal chromosomes and 'chrX' for chromosome 23).<\/em><\/strong><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.3. You are ready to start! <\/strong><\/p>\n<p><strong>As the last prepatory step, let's go over the required input data file(s) and also expected final output files!<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>1.3.1 Protocol input files<\/strong><\/p>\n<p>Input data is the chip genotype data in PLINK format (here v1.9).<\/p>\n<p>More details on the PLINK formats can be found at PLINK web page: <a href=\"http:\/\/www.cog-genomics.org\/plink\/1.9\/formats\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/www.cog-genomics.org\/plink\/1.9\/formats<\/a><\/p>\n<p>\u00a0<\/p>\n<ul>\n<li><strong>&lt;dataset&gt;.bed<\/strong> - binary representation of genotype calls<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<ul>\n<li><strong>&lt;dataset&gt;.bim<\/strong> - extended variant information file including six columns:<\/li>\n<\/ul>\n<ol>\n<li>Chromosome code (either an integer, or 'X'\/'Y'\/'XY'\/'MT'; '0' indicates unknown) or name<\/li>\n<li>Variant identifier<\/li>\n<li>Position in morgans or centimorgans (safe to use dummy value of '0')<\/li>\n<li>Chromosomal base-pair coordinate<\/li>\n<li>Allele 1 (corresponding to clear bits in .bed; usually minor)<\/li>\n<li>Allele 2 (corresponding to set bits in .bed; usually major)<\/li>\n<\/ol>\n<p>\u00a0<\/p>\n<ul>\n<li><strong>&lt;dataset&gt;.fam<\/strong> - sample information file including six columns:<\/li>\n<\/ul>\n<ol>\n<li>Family ID ('FID')<\/li>\n<li>Within-family ID ('IID'; cannot be '0')<\/li>\n<li>Within-family ID of father ('0' if father isn't in dataset)<\/li>\n<li>Within-family ID of mother ('0' if mother isn't in dataset)<\/li>\n<li>Sex code ('1' = male, '2' = female, '0' = unknown)<\/li>\n<li>Phenotype value ('1' = control, '2' = case, '-9'\/'0'\/non-numeric = missing data if case\/control)<\/li>\n<\/ol>\n<p>\u00a0<\/p>\n<p><strong>1.3.2 Final protocol output files:<\/strong><\/p>\n<p>The final file set are the PLINK format files lifted over to human genome reference build 38 (b38).<\/p>\n<p>Depending on the dataset in question, different data consistency verification steps (<strong>Steps 7-9<\/strong>) may have been required. Thus, the final output filename tags (&lt;tags&gt;) can vary from run to run.<\/p>\n<ul>\n<li>&lt;dataset&gt;_b38_&lt;tags&gt;.bed<\/li>\n<li>&lt;dataset&gt;_b38_&lt;tags&gt;.bim<\/li>\n<li>&lt;dataset&gt;_b38_&lt;tags&gt;.fam<\/li>\n<\/ul>\n<p>\u00a0<\/p>\n<p>The final output file from optional <strong>Steps 10<\/strong> and <strong>11<\/strong>:<\/p>\n<ul>\n<li>&lt;dataset&gt;_b38.vcf.gz<\/li>\n<\/ul>"},"is_project":0}]},{"id":"615688","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"B51FB446AC87479990A03841A120D057","previous_guid":"5D0BA695B5F74633A18142C399F30D28","previous_id":"615943","last_modified":"1523346120","components":[{"component_id":"1074882","previous_id":0,"original_id":"0","guid":"8BFA3EC7CC214B068506FBB470F3EB9E","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Optional additional allele swapping","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Optional additional allele swapping"},"is_project":0},{"component_id":"1074881","previous_id":"1074882","original_id":"0","guid":"27069E436FD543BD8EB04EA82D7A4985","previous_guid":"8BFA3EC7CC214B068506FBB470F3EB9E","component_type_id":"1","data_id":null,"data":"<p><strong>If the previous step showed x-shaped plot<\/strong>, then some alleles are flipped incorrectly and those should be additionally corrected.<\/p>\n<p>\u00a0<\/p>\n<p>Use the <strong>.strand<\/strong> file and search for those alleles that were on - strand. Save the list of those alleles and flip them back.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;chip_strandfile&gt;.strand<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.bed<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.bim<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.fam<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>Output files:<\/strong><\/p>\n<p>\u2022 flipped_in_update_build_script.txt<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_reflipped.bed<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_reflipped.bim<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_reflipped.fam<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>!! After running the commands below, confirm the results:<\/strong><\/p>\n<p>Re-run the previous steps <strong>(Step 3<\/strong> and<strong> Step 4)<\/strong> to compare the new chip data variant allele frequencies to the panel variant allele frequencies.<\/p>\n<p>Now the data should not anymore contain variants with negative correlation.<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p><strong>If the previous step showed x-shaped plot<\/strong>, then some alleles are flipped incorrectly and those should be additionally corrected.<\/p>\n<p>\u00a0<\/p>\n<p>Use the <strong>.strand<\/strong> file and search for those alleles that were on - strand. Save the list of those alleles and flip them back.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;chip_strandfile&gt;.strand<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.bed<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.bim<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.fam<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>Output files:<\/strong><\/p>\n<p>\u2022 flipped_in_update_build_script.txt<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_reflipped.bed<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_reflipped.bim<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_reflipped.fam<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>!! After running the commands below, confirm the results:<\/strong><\/p>\n<p>Re-run the previous steps <strong>(Step 3<\/strong> and<strong> Step 4)<\/strong> to compare the new chip data variant allele frequencies to the panel variant allele frequencies.<\/p>\n<p>Now the data should not anymore contain variants with negative correlation.<\/p>"},"is_project":0},{"component_id":"1074883","previous_id":"1074881","original_id":"0","guid":"F3F2B3A43D2342A28C95A43FA35C2C63","previous_guid":"27069E436FD543BD8EB04EA82D7A4985","component_type_id":"15","data_id":"3635","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Find the alleles that were on - strand and were thus incorrectly flipped with update_build.sh\ncat <chip_strandfile>.strand | awk '{if ($5 == \"-\") print $0}' | cut -f 1 > flipped_in_update_build_script.txt\n\n# Flip the alleles back\nplink --bfile <dataset>_b38 --flip flipped_in_update_build_script.txt --make-bed --out <dataset>_b38_reflipped","description":"","os_name":"","os_version":"","can_edit":"0"},"is_project":0}]},{"id":"615871","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"186CB338B2D64C87AFB60F03A1B992D5","previous_guid":"B51FB446AC87479990A03841A120D057","previous_id":"615688","last_modified":"1522053304","components":[{"component_id":"1075353","previous_id":0,"original_id":"0","guid":"F8EF9E4DB8FD496EA80CEF1A7B4E1745","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Lift-over confirmation","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Lift-over confirmation"},"is_project":0},{"component_id":"1075352","previous_id":"1075353","original_id":"0","guid":"9573AEE07F2848BB8100E9420F824894","previous_guid":"F8EF9E4DB8FD496EA80CEF1A7B4E1745","component_type_id":"1","data_id":null,"data":"<p>Once you have successfully lifted over your chip data, verify the lift-over by checking variant positions and alleles.<\/p>\n<p>For instance, compare the positions and alleles in your lifted-over data to known GRCh38\/hg38 positions and alleles e.g. from dbSNP <a href=\"https:\/\/www.ncbi.nlm.nih.gov\/SNP\/\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/www.ncbi.nlm.nih.gov\/SNP\/<\/a>.<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Once you have successfully lifted over your chip data, verify the lift-over by checking variant positions and alleles.<\/p>\n<p>For instance, compare the positions and alleles in your lifted-over data to known GRCh38\/hg38 positions and alleles e.g. from dbSNP <a href=\"https:\/\/www.ncbi.nlm.nih.gov\/SNP\/\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/www.ncbi.nlm.nih.gov\/SNP\/<\/a>.<\/p>"},"is_project":0}]},{"id":"615943","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"5D0BA695B5F74633A18142C399F30D28","previous_guid":"5BF51C45FAC54A219EE9DC41371412FC","previous_id":"615674","last_modified":"1523277863","components":[{"component_id":"1075573","previous_id":0,"original_id":"0","guid":"B85F955B3A2E44F696728A35C8ED3603","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Lift-over verification","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Lift-over verification"},"is_project":0},{"component_id":"1075572","previous_id":"1075573","original_id":"0","guid":"BF9BF8CC57E54AADA6C08C93E429C45B","previous_guid":"B85F955B3A2E44F696728A35C8ED3603","component_type_id":"1","data_id":null,"data":"<p>Compare the chip data allele frequencies (created in <strong>Step 3<\/strong>) to the reference data allele frequencies (created in <strong>Step 1.2<\/strong>).<\/p>\n<p>Copy and save the R script below as 'compare_AF.R' and run it as suggested in the command below.<\/p>\n<p>\u00a0<\/p>\n<p>The R script requires data.table package installed (for suggested instructions, see <strong>Step 1.1<\/strong>).<br \/><br \/><\/p>\n<p>Inside the R script, intersection of the reference data and chip data matching variants\u00a0(same SNP ID in format CHR_POS_REF_ALT) are formed and corresponding allele frequencies are plotted against each other.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_vcf_format.frq<\/p>\n<p>\u2022 ref_data.frq<\/p>\n<p>\u00a0<\/p>\n<p><strong>Output file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_AF.jpg<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>Inspect the plot:<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>See example plots at section 'Expected results' below.<\/p>\n<p>\u00a0<\/p>\n<p><em>Successful genome build lift-over:<\/em><\/p>\n<p>- Nearly all chip data variant allele frequencies correlate with the panel variant allele frequencies and data shows tight, uniform diagonal line.<\/p>\n<p>- Continue with <strong>Step 6<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><em>Unsuccessful genome build lift-over:<\/em><\/p>\n<p>- Some of the chip data variant allele frequencies correlate with the reference data variant allele frequencies, whereas some of the chip data show negative correlation with the reference data variant allele frequencies. Hence, an x-shaped plot is observed<\/p>\n<p>- Continue with <strong>Step 5<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>!! If needed, fix unsuccesful flipping as indicated in the following step (Step 5).<\/strong><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Compare the chip data allele frequencies (created in <strong>Step 3<\/strong>) to the reference data allele frequencies (created in <strong>Step 1.2<\/strong>).<\/p>\n<p>Copy and save the R script below as 'compare_AF.R' and run it as suggested in the command below.<\/p>\n<p>\u00a0<\/p>\n<p>The R script requires data.table package installed (for suggested instructions, see <strong>Step 1.1<\/strong>).<br \/><br \/><\/p>\n<p>Inside the R script, intersection of the reference data and chip data matching variants\u00a0(same SNP ID in format CHR_POS_REF_ALT) are formed and corresponding allele frequencies are plotted against each other.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_vcf_format.frq<\/p>\n<p>\u2022 ref_data.frq<\/p>\n<p>\u00a0<\/p>\n<p><strong>Output file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_AF.jpg<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>Inspect the plot:<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>See example plots at section 'Expected results' below.<\/p>\n<p>\u00a0<\/p>\n<p><em>Successful genome build lift-over:<\/em><\/p>\n<p>- Nearly all chip data variant allele frequencies correlate with the panel variant allele frequencies and data shows tight, uniform diagonal line.<\/p>\n<p>- Continue with <strong>Step 6<\/strong><\/p>\n<p>\u00a0<\/p>\n<p><em>Unsuccessful genome build lift-over:<\/em><\/p>\n<p>- Some of the chip data variant allele frequencies correlate with the reference data variant allele frequencies, whereas some of the chip data show negative correlation with the reference data variant allele frequencies. Hence, an x-shaped plot is observed<\/p>\n<p>- Continue with <strong>Step 5<\/strong><\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<p><strong>!! If needed, fix unsuccesful flipping as indicated in the following step (Step 5).<\/strong><\/p>"},"is_project":0},{"component_id":"1075574","previous_id":"1075572","original_id":"0","guid":"5BCB586519C64DCC84FFD97376A344FB","previous_guid":"BF9BF8CC57E54AADA6C08C93E429C45B","component_type_id":"15","data_id":"3641","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"Rscript --no-save \/path\/to\/compare_AF.R <dataset>_vcf_format.frq \/path\/to\/ref_data.frq","description":"","os_name":"","os_version":"","can_edit":"0"},"is_project":0},{"component_id":"1075575","previous_id":"1075574","original_id":"0","guid":"9AAB7A9F1D0E4D42900C25B587207623","previous_guid":"5BCB586519C64DCC84FFD97376A344FB","component_type_id":"15","data_id":"3642","data":"","order_id":"3","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"#!\/bin\/env Rscript --no-save\n\n# Required packages\nlibrary(data.table) # For fast fread()\n\n# Input variables\nargs <- commandArgs(TRUE)\nindataset <- args[1]\nref_dataset <- args[2]\n\n# Subset the dataset name\ndataset_tag <- sub(\"_vcf_format.frq\", \"\", indataset)\n\n# Read in the frequency files\nchip <- fread(indataset, header = T)\nref_data <- fread(ref_dataset, header = T)\n\n# Take an intersection of the reference and chip data based on SNP column (in format CHR_POS_REF_ALT)\nisec <- merge(ref_data, chip, by = \"SNP\")\n\n# Check that AFs is within range of 10 pp in both datasets\naf_ok <- abs(isec$AF.x - isec$AF.y) < 0.1\n\n# Exclude those not within the AF range\nexclude <- !af_ok\n\n# Save the plot as jpg\njpeg(paste(dataset_tag, \"_AF.jpg\", sep=\"\"))\n# Plot first all and then excludable variants\nplot(isec$AF.x, isec$AF.y, col=1, pch=20, main=\"Chip data AF vs. reference data AF\", xlab=\"Reference data AF\", ylab=\"Chip data AF\")\npoints(isec[exclude]$AF.x, isec[exclude]$AF.y, col=2, pch=20)\n# Draw a legend\nlegend(\"topleft\", legend=c(\"Concordant AF\", \"High AF difference\"), col=c(1,2), pch=20, cex=0.9)\ndev.off()","description":"","os_name":"compare_AF.R","os_version":"","can_edit":"0"},"is_project":0},{"component_id":"1086255","previous_id":"1075575","original_id":"0","guid":"5F075293F69E44C392132F4040D143FE","previous_guid":"9AAB7A9F1D0E4D42900C25B587207623","component_type_id":"17","data_id":"1553","data":"<p>Successful (left) and unsuccessful (right) genome build lift-over.<\/p>\n<p>\u00a0<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/vrpi3gw.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/vrni3gw.png\" data-ofn=\"example_AF_plots.png\" \/><\/p>","order_id":"4","name":"Expected result","data_by_id":"1","type_id":"17","source_data":{"result":"<p>Successful (left) and unsuccessful (right) genome build lift-over.<\/p>\n<p>\u00a0<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/vrpi3gw.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/vrni3gw.png\" data-ofn=\"example_AF_plots.png\" \/><\/p>"},"is_project":0}]},{"id":"616773","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"990636EBA4FA4036AFEB54290CA510A3","previous_guid":"0D287327F8124EF5B3273141A75760CA","previous_id":"615682","last_modified":"1523866056","components":[{"component_id":"1077677","previous_id":0,"original_id":"0","guid":"82742416D10D43F3BA540093957F7573","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Optional VCF conversion","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Optional VCF conversion"},"is_project":0},{"component_id":"1077676","previous_id":"1077677","original_id":"0","guid":"996305B8F74C47FB9826B54E2A5CFDB9","previous_guid":"82742416D10D43F3BA540093957F7573","component_type_id":"1","data_id":null,"data":"<p>PLINK format files can be converted to VCF format if required.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_b38_clean.bed<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_clean.bim<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_clean.fam<\/p>\n<p>\u00a0<\/p>\n<p><strong>Output file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_b38.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><strong>!! If the command fails to write the file<\/strong>, try removing 'bgz' from the command below, and then compress the output separately with for instance 'bgzip &lt;dataset&gt;_b38.vcf'<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>PLINK format files can be converted to VCF format if required.<\/p>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_b38_clean.bed<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_clean.bim<\/p>\n<p>\u2022 &lt;dataset&gt;_b38_clean.fam<\/p>\n<p>\u00a0<\/p>\n<p><strong>Output file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_b38.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><strong>!! If the command fails to write the file<\/strong>, try removing 'bgz' from the command below, and then compress the output separately with for instance 'bgzip &lt;dataset&gt;_b38.vcf'<\/p>"},"is_project":0},{"component_id":"1077678","previous_id":"1077676","original_id":"0","guid":"8470CAFF52BE471AAA055CF39492DA42","previous_guid":"996305B8F74C47FB9826B54E2A5CFDB9","component_type_id":"15","data_id":"3677","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Convert the PLINK format to VCF format\nplink --bfile <dataset>_b38_clean --recode vcf-iid bgz --output-chr M --out <dataset>_b38\n","description":"","os_name":"","os_version":"","can_edit":"0"},"is_project":0},{"component_id":"1091572","previous_id":"1077678","original_id":"0","guid":"9EA8A161AA2E45C98F53526CABF2D1F4","previous_guid":"8470CAFF52BE471AAA055CF39492DA42","component_type_id":"13","data_id":"18329","data":"","order_id":"3","name":"Comment","data_by_id":"1","type_id":"13","source_data":{"annotation_id":"18329","thread_id":"18329","id":"18329","thread_title":"Comment on step 10 of Genotyping chip data lift-over to reference genome build GRCh38\/hg38","uri":"comment-on-step-10-of-genotyping-chip-data-liftover","thread_uri":"comment-on-step-10-of-genotyping-chip-data-liftover","step_id":"616773","protocol_uri":"genotyping-chip-data-lift-over-to-reference-genome-nqtddwn","protocol_name":"Genotyping chip data lift-over to reference genome build GRCh38\/hg38","protocol_name_html":"Genotyping chip data lift-over to reference genome build GRCh38\/hg38","annotation":"<p>In <strong>Step10<\/strong>, it is possible to use parameter '--output-chr chrM' instead of '--output-chr M' and omit <strong>Step11<\/strong>. <br \/><br \/>This will output chromosome names with 'chr' followed by number for autosomes or X\/Y\/XY\/M for other chromosomes.<br \/>See PLINK documentation for more information: <a href=\"https:\/\/www.cog-genomics.org\/plink\/2.0\/data#irreg_output\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/www.cog-genomics.org\/plink\/2.0\/data#irreg_output<\/a><\/p>","thread_text":"<p>In <strong>Step10<\/strong>, it is possible to use parameter '--output-chr chrM' instead of '--output-chr M' and omit <strong>Step11<\/strong>. <br \/><br \/>This will output chromosome names with 'chr' followed by number for autosomes or X\/Y\/XY\/M for other chromosomes.<br \/>See PLINK documentation for more information: <a href=\"https:\/\/www.cog-genomics.org\/plink\/2.0\/data#irreg_output\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/www.cog-genomics.org\/plink\/2.0\/data#irreg_output<\/a><\/p>","body":"<p>In <strong>Step10<\/strong>, it is possible to use parameter '--output-chr chrM' instead of '--output-chr M' and omit <strong>Step11<\/strong>. <br \/><br \/>This will output chromosome names with 'chr' followed by number for autosomes or X\/Y\/XY\/M for other chromosomes.<br \/>See PLINK documentation for more information: <a href=\"https:\/\/www.cog-genomics.org\/plink\/2.0\/data#irreg_output\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/www.cog-genomics.org\/plink\/2.0\/data#irreg_output<\/a><\/p>","is_private":"0","public_protocol":"1","can_edit":0,"can_delete":"0","show_name":"1","created_date":"1523866055","created_on":"1523866055","modified_on":null,"last_updated":null,"profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/swii3gw.jpg","full_name":"Marita A. Isokallio","affiliation":"FIMM, University of Helsinki","username":"marita-a-isokallio","email":"priit.palta@gmail.com","pa_useranme":"priit-palta","comments":[]},"is_project":0}]},{"id":"616774","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"7852BC784AF94A95A88596380D38E8F6","previous_guid":"990636EBA4FA4036AFEB54290CA510A3","previous_id":"616773","last_modified":"1523351523","components":[{"component_id":"1077680","previous_id":0,"original_id":"0","guid":"4A323DB5C20E4AAD84A0F1ECF0235BAE","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Optional VCF conversion","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Optional VCF conversion"},"is_project":0},{"component_id":"1077679","previous_id":"1077680","original_id":"0","guid":"E01349D18E7744DEB38F4B96B850C9C5","previous_guid":"4A323DB5C20E4AAD84A0F1ECF0235BAE","component_type_id":"1","data_id":null,"data":"<p>Correct the chromosome notation to correspond the notation used in GRCh38\/hg38.<\/p>\n<p>\u00a0<\/p>\n<p>GRCh38\/hg38 chromosome notation uses 'chr' tag, whereas PLINK format uses only numbers.<\/p>\n<p>\u00a0<\/p>\n<p>First, generate a mapping file for the chromosome names as a space-separated file &lt;old_name&gt; &lt;new_name&gt;, one chromosome per line. Save the file as 'chr_names.txt'.<\/p>\n<pre class=\"language-markup\"><code># Example of chr_names.txt format\n1 chr1\n2 chr2\n...\nX chrX\nY chrY\nM chrM\n<\/code><\/pre>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 chr_names.txt<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><strong>Output file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_b38_renamed_chrs.vcf.gz<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Correct the chromosome notation to correspond the notation used in GRCh38\/hg38.<\/p>\n<p>\u00a0<\/p>\n<p>GRCh38\/hg38 chromosome notation uses 'chr' tag, whereas PLINK format uses only numbers.<\/p>\n<p>\u00a0<\/p>\n<p>First, generate a mapping file for the chromosome names as a space-separated file &lt;old_name&gt; &lt;new_name&gt;, one chromosome per line. Save the file as 'chr_names.txt'.<\/p>\n<pre class=\"language-markup\"><code># Example of chr_names.txt format\n1 chr1\n2 chr2\n...\nX chrX\nY chrY\nM chrM\n<\/code><\/pre>\n<p>\u00a0<\/p>\n<p><strong>Input files:<\/strong><\/p>\n<p>\u2022 chr_names.txt<\/p>\n<p>\u2022 &lt;dataset&gt;_b38.vcf.gz<\/p>\n<p>\u00a0<\/p>\n<p><strong>Output file:<\/strong><\/p>\n<p>\u2022 &lt;dataset&gt;_b38_renamed_chrs.vcf.gz<\/p>"},"is_project":0},{"component_id":"1077681","previous_id":"1077679","original_id":"0","guid":"FF39FCC62A1A41EB8F2D84C4EE6704EC","previous_guid":"E01349D18E7744DEB38F4B96B850C9C5","component_type_id":"15","data_id":"3678","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"# Correct the chromosome notation\nbcftools annotate --rename-chrs chr_names.txt <dataset>_b38.vcf.gz -Oz -o <dataset>_b38_renamed_chrs.vcf.gz ","description":"","os_name":"","os_version":"","can_edit":"0"},"is_project":0}]}]}