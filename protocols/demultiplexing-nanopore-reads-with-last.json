{"id":21929,"title":"Demultiplexing Nanopore reads with LAST","title_html":"Demultiplexing Nanopore reads with LAST","image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/bcixa.png","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/bcixa.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.znhf5b6","doi_status":2,"uri":"demultiplexing-nanopore-reads-with-last-znhf5b6","type_id":1,"published_on":1554074856,"version_id":1,"created_on":1554066788,"categories":null,"creator":{"name":"David Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","username":"david-eccles","link":"https:\/\/doi.org\/10.5281\/zenodo.2535894","image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg"},"badges":[{"id":3,"image":{"source":"\/img\/badges\/silver.svg","placeholder":"\/img\/badges\/silver.svg"},"name":"Power author!"},{"id":6,"image":{"source":"\/img\/badges\/socialbutterfly.svg","placeholder":"\/img\/badges\/socialbutterfly.svg"},"name":"Social butterfly"}],"research_interests":null},"journal":null,"journal_name":null,"journal_link":null,"public":1,"has_versions":1,"link":"https:\/\/doi.org\/10.5281\/zenodo.2535894","total_collections":0,"number_of_steps":8,"authors":[{"name":"David Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","username":"david-eccles","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg"},"badges":[],"research_interests":null}],"versions":[],"groups":[],"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":0,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"steps":[{"id":726015,"guid":"BC72D07F1EB34CE4BC31A6DFB3F9D5BE","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"BE5E1BCB3EAB4EE3B3398142A2DE247C","order_id":1,"type_id":6,"title":"Section","source":{"title":"Generating Barcode Index"}},{"id":1054724,"guid":"24E51DD8E9A54FBABD006CC3748EF83B","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Prepare a FASTA file containing barcode sequences (see attached FASTA file). To reduce the chance of mismatched adapters, this should <\/span><span style = \"font-style:italic;\">only<\/span><span> contain the barcode sequences. That restriction means this approach will not work for short reads, where the barcode sequences are very likely to occur within sequences.<\/span><\/div><\/div>"}},{"id":1054725,"guid":"6D43E4F0241511E9B5045FC0FC2F250F","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/bciwa.fa","placeholder":"\/img\/extensions\/file.png","original_name":"barcode_base.fa"}}],"cases":null,"data":null,"section":null,"section_color":"#A492FF"},{"id":726016,"guid":"D5777824BC024489A5D1DF113B908F4B","previous_id":726015,"previous_guid":"BC72D07F1EB34CE4BC31A6DFB3F9D5BE","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"7B7914173AF14087AF528155A6C461BB","order_id":1,"type_id":6,"title":"Section","source":{"title":"Generating Barcode Index"}},{"id":1054724,"guid":"8756B5D4C4B34E75B33055C3B557D958","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Prepare the LAST index for the barcode file. This will generate seven additional files of the form <index name>.XXX:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">lastdb barcode_base.fa barcode_base.fa<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":726017,"guid":"3CA6C7D3CB0C43C185258E7B87715773","previous_id":726016,"previous_guid":"D5777824BC024489A5D1DF113B908F4B","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"485D8A4780994E48837D38915D2550C4","order_id":1,"type_id":6,"title":"Section","source":{"title":"Mapping Reads to Barcodes"}},{"id":1054724,"guid":"3B2E4530E46A4428A4B644CB379713C1","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Combine all input reads into a single file<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">pv ..\/called_all\/*.fastq | gzip > reads_all.fastq.gz<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span>Note: I'm using the pipe viewer command <\/span><span style = \"font-style:italic;\">pv<\/span><span> to produce a progress indicator while the command is running. If this command is not available, it can be replaced with <\/span><span style = \"font-style:italic;\">cat<\/span><span> with no change in function (apart from not showing progess).<\/span><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#FFED92"},{"id":726018,"guid":"48A93DF0988443FA8AED9E30DCE17992","previous_id":726017,"previous_guid":"3CA6C7D3CB0C43C185258E7B87715773","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"8CFBB78868374A4985E26F88237B9DD7","order_id":1,"type_id":6,"title":"Section","source":{"title":"Mapping Reads to Barcodes"}},{"id":1054724,"guid":"3E905C71BCD7441393BBBF20A29E6E78","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Use LAST in FASTQ alignment mode (-Q 1) to map the reads. In this example, it is distributed over 10 processing threads (-P 10). Here <\/span><span style = \"font-style:italic;\">maf-convert<\/span><span> is used to convert to a single line per match, <\/span><span style = \"font-style:italic;\">cut<\/span><span> retains only the barcode and read IDs, and <\/span><span style = \"font-style:italic;\">uniq<\/span><span> is used to make sure that multiple same barcodes per read (e.g. for reverse \/ complement barcodes at each end) will not produce duplicates:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">lastal -Q 1 -P10 barcode_base.fa <(pv reads_all.fastq.gz) | \\<\/div><div class = \"text-block\">  maf-convert -n tab | cut -f 2,7 | uniq | \\<\/div><div class = \"text-block\">  gzip > barcode_assignments.txt.gz<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">For an extremely stringent search, the output of lastal can be piped through last-map-probs, which will reduce the likelihood of a partial barcode match to other DNA sequences. The downside is that this is more likely to drop reads due to slight mismatches in the barcode portion of the read:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\"><span>lastal -Q 1 -P10 barcode_base.fa <(pv reads_all.fastq.gz) | <\/span><span style = \"font-weight:bold;\">last-map-probs |<\/span><span> \\\n  maf-convert -n tab | cut -f 2,7 | uniq | \\\n  gzip > barcode_assignments.txt.gz<\/span><\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">The output of this command will be a gzipped tab-separated 2-column file with barcode names in the first column, and read IDs in the second column.<\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":726019,"guid":"5040081BC74A49A6BD3EDA15A95DEA1E","previous_id":726021,"previous_guid":"7B3A7BDA74294AE9B27769F7803A3D9F","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"0383AE4366EC46C5AB8C5C28BC4BD8D4","order_id":1,"type_id":6,"title":"Section","source":{"title":"Splitting Read File Per Barcode"}},{"id":1054724,"guid":"3FE6CA0E031C4EF29FDF08074E0E385C","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Create a file containing barcode read counts for the appropriate read category. For example, for non-chimeric reads:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">pv unique_assignments.txt.gz | zcat | awk '{print $1}' | \\<\/div><div class = \"text-block\">  sort | uniq -c > barcode_counts.txt<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Or for all reads:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">pv barcode_assignments.txt.gz | zcat | awk '{print $1}' | \\<\/div><div class = \"text-block\">  sort | uniq -c > barcode_counts.txt<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":"#94EBFF"},{"id":726020,"guid":"981B7493F63C4EF4BF6C02D15254B485","previous_id":726019,"previous_guid":"5040081BC74A49A6BD3EDA15A95DEA1E","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"4DD121FD3BFF414EA9E14C415ADB6936","order_id":1,"type_id":6,"title":"Section","source":{"title":"Splitting Read File Per Barcode"}},{"id":1054724,"guid":"6B6AED26CAE54123BBC38A6EBB7A6C67","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">For each discovered barcode, using the appropriate read category assignment file, find the corresponding read IDs, then extract those IDs out of the read FASTQ file. This uses one of my own scripts, <\/div><div class = \"text-block\"><a style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">fastx-fetch.pl<\/span><\/a><\/div><div class = \"text-block\">, to do this directly from a FASTQ file:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo \"** ${bc} **\";<\/div><div class = \"text-block\">  fastx-fetch.pl -i <(zgrep ${bc} unique_assignments.txt.gz | awk '{print $2}') \\<\/div><div class = \"text-block\">    <(pv reads_all.fastq.gz) | \\<\/div><div class = \"text-block\">    gzip > reads_${bc}.fastq.gz;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Note: this step processes through the read file once per barcode, which could take a while depending on how many barcodes are detected.<\/div><div class = \"text-block\">Or, alternatively, for all reads:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo \"** ${bc} **\";<\/div><div class = \"text-block\">  fastx-fetch.pl -i <(zgrep ${bc} barcode_assignments.txt.gz | awk '{print $2}') \\<\/div><div class = \"text-block\">    <(pv reads_all.fastq.gz) | \\<\/div><div class = \"text-block\">    gzip > reads_${bc}.fastq.gz;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":726021,"guid":"7B3A7BDA74294AE9B27769F7803A3D9F","previous_id":726023,"previous_guid":"0CE1767053FB11E997514BD1ED400300","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"67E1B3A78BAA4AD99B12963422CF3011","order_id":1,"type_id":6,"title":"Section","source":{"title":"Optional [but recommended]: identifying chimeric reads"}},{"id":1054724,"guid":"E7200C25810C4480B24FEE0B29CB5C61","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Identify reads with multiple barcodes (i.e. potentially chimeric reads). This is identical to the last step, except for using '<\/span><span style = \"font-style:italic;\">uniq -D<\/span><span>' to only print <\/span><span style = \"font-style:italic;\">duplicated<\/span><span> reads. This step is only strictly needed when chimeric reads need to be inspected.<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">pv barcode_assignments.txt.gz | zcat | sort -k 2,2 | uniq | \\<\/div><div class = \"text-block\">  uniq -f 1 -D | gzip > duplicate_assignments.txt.gz<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null},{"id":726023,"guid":"0CE1767053FB11E997514BD1ED400300","previous_id":726018,"previous_guid":"48A93DF0988443FA8AED9E30DCE17992","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"047C28A648C84CF38AF7F21F19EC4882","order_id":1,"type_id":6,"title":"Section","source":{"title":"Optional [but recommended]: identifying chimeric reads"}},{"id":1054724,"guid":"07DFA7F945DF44A3A612F20C825E87C4","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Identify reads with unique barcode classes attached to each read. The <\/span><span style = \"font-style:italic;\">sort<\/span><span> command sorts by the second field (read ID), then <\/span><span style = \"font-style:italic;\">uniq <\/span><span>identifies duplicated lines when ignoring the first field (barcode). Two <\/span><span style = \"font-style:italic;\">uniq<\/span><span> commands are used to allow for the possibility that a sequence could be tailed by matching barcodes at both ends. The downside of this is that it will also collapse chimeric reads with the <\/span><span style = \"font-style:italic;\">same<\/span><span> barcode. This uses '<\/span><span style = \"font-style:italic;\">uniq -u<\/span><span>' to only print the unique lines.<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">pv barcode_assignments.txt.gz | zcat | sort -k 2,2 | uniq | \\<\/div><div class = \"text-block\">  uniq -f 1 -u | gzip > unique_assignments.txt.gz<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":null,"data":null,"section":null,"section_color":null}],"materials":[],"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>This protocol is for a semi-manual method for read demultiplexing, as used after my presentation <\/span><span style = \"font-style:italic;\">Sequencing DNA with Linux Cores and Nanopores<\/span><span> to work out the number of reads captured by different barcodes.<\/span><\/div><div class = \"text-block\">Input: reads as a FASTQ file, barcode sequences as a FASTA file<\/div><div class = \"text-block\">Output: reads split into single FASTQ files per target [barcode]<\/div><div class = \"text-block\">Note: barcode \/ adapter sequences are not trimmed by this protocol<\/div><\/div>","changed_on":1554074856}