{"id":28301,"title":"Demultiplexing Nanopore reads with LAST","title_html":"Demultiplexing Nanopore reads with LAST","image":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/bnrjjpt6.png","placeholder":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/bnrjjpt6.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.7vmhn46","doi_status":2,"uri":"demultiplexing-nanopore-reads-with-last-7vmhn46","type_id":1,"published_on":1570061922,"parent_protocols":[],"parent_collections":[],"version_id":5,"created_on":1569989742,"categories":null,"creator":{"name":"David A. Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","affiliations":[{"affiliation":"Malaghan Institute of Medical Research (NZ)","url":"http:\/\/www.malaghan.org.nz\/","is_default":1}],"username":"david-eccles","link":"https:\/\/doi.org\/10.5281\/zenodo.2535894","image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg"},"badges":[{"id":3,"image":{"source":"\/img\/badges\/silver.svg","placeholder":"\/img\/badges\/silver.svg"},"name":"Power author!"},{"id":6,"image":{"source":"\/img\/badges\/socialbutterfly.svg","placeholder":"\/img\/badges\/socialbutterfly.svg"},"name":"Social butterfly"}],"research_interests":null,"blocked_by_you":false,"blocked_you":false},"journal":null,"journal_name":null,"journal_link":null,"article_citation":null,"public":1,"has_versions":1,"link":"https:\/\/doi.org\/10.5281\/zenodo.2535894","total_collections":0,"number_of_steps":8,"authors":[{"name":"David Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","affiliations":[],"username":"david-eccles","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg"},"badges":[],"research_interests":null,"blocked_by_you":false,"blocked_you":false}],"versions":[],"groups":[],"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"can_be_copied":1,"can_remove_fork":1,"forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":0,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"guid":"4463A178F1A74DB595705D231AE13A7F","steps":[{"id":820981,"guid":"95DBE61D81884EFEB56C1EC96F36D9C9","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"179CBB206EE548F3BC1B5BCB7CBF3BEF","order_id":1,"type_id":6,"title":"Section","source":{"title":"Generating Barcode Index"}},{"id":1054724,"guid":"7D04C43B784E425888058A5800379F13","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Prepare a FASTA file containing barcode sequences (see attached FASTA file). To reduce the chance of mismatched adapters, this should <\/span><span style = \"font-style:italic;\">only<\/span><span> contain the barcode sequences. That restriction means this approach will not work for short reads, where the barcode sequences are very likely to occur within sequences.<\/span><\/div><\/div>"}},{"id":1054725,"guid":"6D43E4F0241511E9B5045FC0FC2F250F","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/bciwa.fa","placeholder":"\/img\/extensions\/file.png","original_name":"barcode_base.fa"}}],"cases":[],"data":null,"section":null,"section_color":"#A492FF","critical":null,"critical_id":null,"duration":0},{"id":820982,"guid":"D752337E064F42059C2D18B7E77BA37F","previous_id":820981,"previous_guid":"95DBE61D81884EFEB56C1EC96F36D9C9","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"D1C6EA164AE3491D945F3FCB54CAFCAD","order_id":1,"type_id":6,"title":"Section","source":{"title":"Generating Barcode Index"}},{"id":1054724,"guid":"DCD860A656B54B17AD927CC31F6EE808","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Prepare the LAST index for the barcode file. Following <\/div><div class = \"text-block\"><a href=\"https:\/\/github.com\/mcfrith\/last-rna\/blob\/master\/last-long-reads.md#option-1-prepare-a-genome-without-repeat-masking\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Martin Frith's recommendation<\/span><\/a><\/div><div class = \"text-block\">, the '-uNEAR' seeding scheme is used to slightly increase sensitivity. This will generate seven additional files of the form <index name>.XXX:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">lastdb -uNEAR barcode_base.fa barcode_base.fa<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#A492FF","critical":null,"critical_id":null,"duration":0},{"id":820983,"guid":"1A9DFE06744B4A0CA8B8266862F691E6","previous_id":820991,"previous_guid":"655245B0E4CD11E98A3FA99156212B2C","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"CBB487F866AA4C5880236C5D1E2660E4","order_id":1,"type_id":6,"title":"Section","source":{"title":"Mapping Reads to Barcodes"}},{"id":1054724,"guid":"519189B95F0D4816B59D83333996A51E","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Combine all input reads into a single file<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">pv ..\/called_all\/*.fastq | gzip > reads_all.fastq.gz<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span>Note: I'm using the pipe viewer command <\/span><span style = \"font-style:italic;\">pv<\/span><span> to produce a progress indicator while the command is running. If this command is not available, it can be replaced with <\/span><span style = \"font-style:italic;\">cat<\/span><span> with no change in function (apart from not showing progess).<\/span><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#94EBFF","critical":null,"critical_id":null,"duration":0},{"id":820984,"guid":"F1D6BBEF4F9344018194B28D920B3D4A","previous_id":820983,"previous_guid":"1A9DFE06744B4A0CA8B8266862F691E6","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"E63E8EE6B71A4FCDB6CB48CCA6255920","order_id":1,"type_id":6,"title":"Section","source":{"title":"Mapping Reads to Barcodes"}},{"id":1054724,"guid":"2F698FB8F07F44B99BA43CF8F3D0D3D9","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Use LAST, ignoring FASTQ quality scores for substitution (-Q 0), using the pre-defined substitution matrix to map the reads. In this example, it is distributed over 10 processing threads (-P 10). Here <\/span><span style = \"font-style:italic;\">maf-convert<\/span><span> is used to convert to a single line per match, <\/span><span style = \"font-style:italic;\">cut<\/span><span> retains only the barcode and read IDs, and <\/span><span style = \"font-style:italic;\">uniq<\/span><span> is used to make sure that multiple same barcodes per read (e.g. for reverse \/ complement barcodes at each end) will not produce duplicates:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">lastal -Q 0 -P10 -p bc.mat barcode_base.fa <(pv reads_all.fastq.gz) | \\<\/div><div class = \"text-block\">  maf-convert -n tab | cut -f 2,7 | sort | uniq | \\<\/div><div class = \"text-block\">  gzip > barcode_assignments.txt.gz<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">For a more stringent search, lastal can do an overlap match (-T 1) rather than the default local match, which will make sure that only the ends of the barcode are matched (hopefully the entire barcode) when demultiplexing. The downside is that this is more likely to drop reads due to slight mismatches in the barcode portion of the read:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\"><span>lastal <\/span><span style = \"font-weight:bold;\">-T 1<\/span><span> -Q 0 -P10 -p bc.mat barcode_base.fa <(pv reads_all.fastq.gz) | \\<\/span><\/div><div class = \"text-block\">  maf-convert -n tab | cut -f 2,7 | sort | uniq | \\\n  gzip > barcode_assignments.txt.gz<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Stringency can also be altered by adjusting the query letters per random alignment setting (-D <value>, 1e6 by default). Lowering this number will produce more matches, at the expense of more false positive matches:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\"><span>lastal <\/span><span style = \"font-weight:bold;\">-D 1e5<\/span><span> -Q 0 -P10 -p bc.mat barcode_base.fa <(pv reads_all.fastq.gz) | \\<\/span><\/div><div class = \"text-block\">  maf-convert -n tab | cut -f 2,7 | sort | uniq | \\<\/div><div class = \"text-block\">  gzip > barcode_assignments.txt.gz<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">The output of this command will be a gzipped tab-separated 2-column file with barcode names in the first column, and read IDs in the second column.<\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#94EBFF","critical":null,"critical_id":null,"duration":0},{"id":820985,"guid":"D50779A0014946B2862E7844F317682E","previous_id":820984,"previous_guid":"F1D6BBEF4F9344018194B28D920B3D4A","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"B6F5F21CF6A7440C9E4D5DBDB1F36B88","order_id":1,"type_id":6,"title":"Section","source":{"title":"Splitting Read File Per Barcode"}},{"id":1054724,"guid":"4ED43453D18E4A2D8901C3C9231419FD","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">For each discovered barcode, using the appropriate read category assignment file, find the corresponding read IDs, then extract those IDs out of the read FASTQ file. This uses one of my scripts, <\/div><div class = \"text-block\"><a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-fetch.pl\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">fastx-fetch.pl<\/span><\/a><\/div><div class = \"text-block\"><span>, to do this directly from a FASTQ file. The '<\/span><span style = \"font-style:italic;\">-lengths<\/span><span>' command-line parameter also outputs sequence lengths for each read (see next step):<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">mkdir -p demultiplexed<\/div><div class = \"text-block\">fastx-fetch.pl -lengths -demultiplex barcode_assignments.txt.gz \\<\/div><div class = \"text-block\">  -prefix 'demultiplexed\/reads' <(pv reads_all.fastq.gz) > barcode_counts.txt<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span>Note: this demultiplexing code will only by default put reads into a barcode bin if they have a single unique barcode sequence detected. Otherwise, they will be put into a 'BCchim' bin if multiple adapters are detected (i.e. a chimeric read), or a 'BCmiss' bin if no adapters are detected. If these reads should be duplicated and put in one bin per barcode, then the <\/span><span style = \"font-style:italic;\">-chimeric<\/span><span> option can be added to the command arguments:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">mkdir -p demultiplexed<\/div><div class = \"text-block\"><span>fastx-fetch.pl -lengths -demultiplex barcode_assignments.txt.gz <\/span><span style = \"font-weight:bold;\">-chimeric<\/span><span> \\<\/span><\/div><div class = \"text-block\">  -prefix 'demultiplexed\/reads' <(pv reads_all.fastq.gz) > barcode_counts.txt<\/div><\/div><\/code><\/pre><\/div><\/div>"}},{"id":1054725,"guid":"22FAE380B71311E9903F3F1BAFB0F8DF","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/bnrmjpt6.pl","placeholder":"\/img\/extensions\/file.png","original_name":"fastx-fetch.pl"}}],"cases":[],"data":null,"section":null,"section_color":"#84CE84","critical":null,"critical_id":null,"duration":0},{"id":820986,"guid":"BD812DCAABCE4BA88D00689FB4D03FAE","previous_id":820985,"previous_guid":"D50779A0014946B2862E7844F317682E","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"383A48C622FC4D56A5D9F35F8913FBC9","order_id":1,"type_id":6,"title":"Section","source":{"title":"[optional] Displaying Read Length Statistics"}},{"id":1054724,"guid":"7F3CD2BEDCCD496EA5A57AD567B23A64","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>The <\/span><span style = \"font-style:italic;\">lengths<\/span><span> output from the demultiplexing step can be fed into another one of my scripts, <\/span><\/div><div class = \"text-block\"><a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/length_plot.r\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">length-plot.r<\/span><\/a><\/div><div class = \"text-block\">, in order to display length-based QC plots:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">fastx-length demultiplexed\/lengths_*.txt.gz<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span>As output, this produces a multi-page PDF file, <\/span><span style = \"font-style:italic;\">Sequence_curves.pdf<\/span><span>. Here are some examples of the plots that are produced:<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">1. Read Count Frequency Curve<\/span><\/div><div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/public\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/bnrajpt6.png\" \/><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">2. Called Bases Frequency Curve<\/span><\/div><div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/public\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/bnrdjpt6.png\" \/><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">3. Called Bases Density Curve<\/span><\/div><div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/public\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/bnrcjpt6.png\" \/><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">4. Cumulative Sequenced Bases Curve<\/span><\/div><div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/public\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/bnrejpt6.png\" \/><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">5. Digital Electrophoresis Plot (relative frequency)<\/span><\/div><div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/public\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/bnrfjpt6.png\" \/><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">5. Digital Electrophoresis Plot (sample-normalised)<\/span><\/div><div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/public\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/bnrgjpt6.png\" \/><\/div><\/div>"}},{"id":1054725,"guid":"38716D10B71311E9903F3F1BAFB0F8DF","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/bnrnjpt6.r","placeholder":"\/img\/extensions\/r.png","original_name":"length_plot.r"}},{"id":1054726,"guid":"A752C1543D7F468889B4477549C0DF15","order_id":3,"type_id":1,"title":"description","source":{"description":"<div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/public\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/bnrajpt6.png\" \/><\/div>"}},{"id":1054727,"guid":"BBD28F37424C4C5192D42F5FD36A9804","order_id":4,"type_id":1,"title":"description","source":{"description":"<div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/public\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/bnrdjpt6.png\" \/><\/div>"}},{"id":1054728,"guid":"0A758C39010A4AFFA1719C899E069FAA","order_id":5,"type_id":1,"title":"description","source":{"description":"<div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/public\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/bnrcjpt6.png\" \/><\/div>"}},{"id":1054729,"guid":"BC313BD6B71F4C01B988B7D6EBEB67CA","order_id":6,"type_id":1,"title":"description","source":{"description":"<div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/public\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/bnrejpt6.png\" \/><\/div>"}},{"id":1054730,"guid":"4EAC333547754942A7623185C0E7C454","order_id":7,"type_id":1,"title":"description","source":{"description":"<div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/public\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/bnrfjpt6.png\" \/><\/div>"}},{"id":1054731,"guid":"EB52EEAB5AC240939C99362AD21B31EF","order_id":8,"type_id":1,"title":"description","source":{"description":"<div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/public\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/bnrgjpt6.png\" \/><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#FFED92","critical":null,"critical_id":null,"duration":0},{"id":820987,"guid":"84782C9842FA4782997753FDD210834C","previous_id":820986,"previous_guid":"BD812DCAABCE4BA88D00689FB4D03FAE","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"72A132F34FB5491CA52B286F58F070E3","order_id":1,"type_id":6,"title":"Section","source":{"title":"Downstream Workflows"}},{"id":1054724,"guid":"EA253B9386E74416B450CE1F497F3364","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Following on from here, cDNA reads can be oriented in preparation for stranded mapping:<\/div><div class = \"text-block\"><a href=\"https:\/\/dx.doi.org\/10.17504\/protocols.io.43qgymw\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Preparing Reads for Stranded Mapping<\/span><\/a><\/div><\/div>"}}],"cases":[],"data":null,"section":null,"section_color":"#EA9F6C","critical":null,"critical_id":null,"duration":0},{"id":820991,"guid":"655245B0E4CD11E98A3FA99156212B2C","previous_id":820982,"previous_guid":"D752337E064F42059C2D18B7E77BA37F","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"5F517F6D7E6A48009D943782EF35EC61","order_id":1,"type_id":6,"title":"Section","source":{"title":"Generating Barcode Index"}},{"id":1054724,"guid":"1FBA3A9CBB1C45A2B8F26C6AE4230E5B","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Prepare a substitution matrix for barcode mapping. The default substitution matrix is swayed too much by INDELs in the barcode sequences, so here's one that I've developed using a combination of trial & error and last-train:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">#last -Q 0<\/div><div class = \"text-block\">#last -a 10<\/div><div class = \"text-block\">#last -A 10<\/div><div class = \"text-block\">#last -b 5<\/div><div class = \"text-block\">#last -B 5<\/div><div class = \"text-block\">#last -S 1<\/div><div class = \"text-block\"># score matrix (query letters = columns, reference letters = rows):<\/div><div class = \"text-block\">       A      C      G      T<\/div><div class = \"text-block\">A      4    -24     -9    -24<\/div><div class = \"text-block\">C    -24      5    -24    -14<\/div><div class = \"text-block\">G     -9    -24      7    -24<\/div><div class = \"text-block\">T    -24    -14    -24      8<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">This matrix has a moderate penalty for opening gaps (i.e. insertions and deletions), and a lower penalty for inserting them. Insertions and deletions are considered to be equally likely in the barcode region. It also has a moderate penalty for A\/G transition variants, and a higher penalty for C\/T transition variants (but still lower than other substitution penalties).<\/div><\/div>"}},{"id":1054725,"guid":"44FF9FF0E4CE11E98A3FA99156212B2C","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/protocols-files.s3.amazonaws.com\/private\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/brycjpt6.mat?X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJYFAX46LHRVQMGOA%2F20191003%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20191003T001843Z&X-Amz-SignedHeaders=host&X-Amz-Expires=604800&X-Amz-Signature=eec3624aed85dbe302035e6522191a9d20cac36599b3e0c6333a3ddf6dec5eb4","placeholder":"\/img\/extensions\/file.png","original_name":"bc.mat"}}],"cases":[],"data":null,"section":null,"section_color":"#A492FF","critical":null,"critical_id":null,"duration":0}],"document":null,"materials":[],"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>This protocol is for a semi-manual method for read demultiplexing, as used after my presentation <\/span><span style = \"font-style:italic;\">Sequencing DNA with Linux Cores and Nanopores<\/span><span> to work out the number of reads captured by different barcodes.<\/span><\/div><div class = \"text-block\">Input: reads as a FASTQ file, barcode sequences as a FASTA file<\/div><div class = \"text-block\">Output: reads split into single FASTQ files per target [barcode]<\/div><div class = \"text-block\">Note: barcode \/ adapter sequences are not trimmed by this protocol<\/div><\/div>","changed_on":1570061922}