{"uri":"stranded-mapping-from-long-reads-syheft6","version_id":"2","protocol_name":"Stranded Mapping from Long Reads","protocol_name_html":"Stranded Mapping from Long Reads","is_prepublished":"0","can_edit":"0","parent_id":"11236","api_version":"1","is_new_mode":"0","last_modified":"1535953869","type_id":"1","link":"https:\/\/bioinformatics.stackexchange.com\/a\/3922\/73","fork_id":"","public_fork_note":"","number_of_steps":"20","has_versions":"1","first_published_date":"1535953869","publish_date":"2018-09-03 05:51:09","documents":null,"have_protocol_in_step":"0","is_protocol_in_step":"0","vendor_name":"Contributed by users","vendor_link":"https:\/\/www.protocols.io","vendor_logo":"\/img\/vendors\/1.png","mod_mins":"5","mod_secs":"3","description":"<p>This protocol demonstrates how to convert raw long reads produced using a strand-specific sequencing protocol (e.g. ONT's strand-switching protocol) into strand-specific mapped reads.<\/p>\n<p>\u00a0<\/p>\n<p>The general ides is to use LAST to identify the adapter orientation relative to the genome, and then use that information to reorient called sequences to create a stranded BAM files that is displayable in a genome browser.<\/p>","is_bookmarked":"0","can_reassign":"1","before_start":"<p>I have written <a href=\"https:\/\/github.com\/gringer\/bioinfscripts\/blob\/master\/maf_bcsplit.pl\" target=\"_blank\" rel=\"noopener noreferrer\">my own script<\/a> to process LAST results into a CSV format, which makes it easier to do line-by-line data filtering. I have also created a <a href=\"https:\/\/github.com\/gringer\/bioinfscripts\/blob\/master\/fastx-fetch.pl\" target=\"_blank\" rel=\"noopener noreferrer\">fastq filtering script<\/a> that helps for filtering reads into different files.<\/p>\n<p>\u00a0<\/p>\n<p>You will also need access to the following free and open-source software programs:<\/p>\n<ul>\n<li><a href=\"http:\/\/last.cbrc.jp\/\" target=\"_blank\" rel=\"noopener noreferrer\">LAST<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/lh3\/minimap2#install\" target=\"_blank\" rel=\"noopener noreferrer\">minimap2<\/a><\/li>\n<li><a href=\"http:\/\/www.htslib.org\/download\/\" target=\"_blank\" rel=\"noopener noreferrer\">samtools<\/a><\/li>\n<\/ul>\n<p>And the following additional data files:<\/p>\n<ul>\n<li>a FASTA file containing strand-specific primer \/ adapter sequences.<\/li>\n<li>a FASTA file containing the genome \/ sequence of interest.<\/li>\n<\/ul>","has_guidelines":"0","materials":[],"warning":"","version_class":"11236","public":"1","is_owner":"1","is_original_owner":"1","created_on":"1535197634","protocol_affiliation":"Malaghan Institute of Medical Research (NZ)","affiliation":"Malaghan Institute of Medical Research (NZ)","doi":"dx.doi.org\/10.17504\/protocols.io.syheft6","doi_status":"2","changed_fork_steps":null,"profile_url":"David-y2138443y2","protocol_img":"https:\/\/s3.amazonaws.com\/pr-journal\/vi4jpt6.png","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","full_name":"David Eccles","created_by":"David Eccles","private_link":"42F4FB7AA3BF658CBF32DD9137DD879C","original_img":"1","username":"david-eccles","is_retracted":"0","retraction_reason":null,"plos_id":null,"manuscript_citation":null,"journal_name":null,"is_donations_disabled":"0","is_donations_disabled_by_user":"9","item_record_id":346865,"fork_info":[],"compare_forks":[],"protocols":[],"groups":[],"number_of_shared_runs":[],"ownership_history":[],"keywords":"","transfer_to_user":[],"sub_transfer":false,"is_transfer_pending":false,"number_of_bookmarks":"0","collections":[],"tags":[{"tag_id":"8","tag_name":"RNA-seq"},{"tag_id":"454","tag_name":"bioinformatics"},{"tag_id":"472","tag_name":"RNA"},{"tag_id":"643","tag_name":"long read sequencing"},{"tag_id":"767","tag_name":"Analysis"},{"tag_id":"893","tag_name":"cDNA"}],"archived":0,"sub_authors":[],"sub_protocols_number":0,"can_edit_shared":0,"shared_runs":[],"is_shared_run":0,"is_shared":1,"banner":null,"contact_badges":[{"badge_id":"2","badge_image":"\/img\/badges\/bronze.svg","badge_description":"Author!"},{"badge_id":"6","badge_image":"\/img\/badges\/socialbutterfly.svg","badge_description":"Social butterfly"}],"number_of_comments":0,"big_protocol_img":"https:\/\/s3.amazonaws.com\/pr-journal\/vi3jpt6.png","big_protocol_img_ofn":"stranded_mtdna.png","is_locked":0,"is_locked_by":false,"authors":"David Eccles","authors_list":[{"name":"David Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","username":"david-eccles","profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg"}],"user":{"profile_image":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","username":"david-eccles","full_name":"David Eccles","created_by":"David Eccles"},"access":{"can_view":"1","can_remove":"0","can_add":"0","can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":"0","can_move":"1","can_transfer":"1","can_download":"1","is_locked":"0"},"is_contact_suspended":0,"guidelines":null,"status_id":"2","is_research":"1","status_info":"We are still developing and optimizing this protocol","steps":[{"id":"657819","is_changed":1,"original_id":"618702","is_skipped":"0","is_checked":"0","guid":"82FAD473CBFD4075B86DC9615B3C77B4","previous_guid":"041512F2CE7E4F0ABFBA74C9029AB3AE","previous_id":"657839","last_modified":"1535200369","components":[{"component_id":"1183285","previous_id":0,"original_id":"1083170","guid":"A81ED7AF68014CFBADCF2B10DFB07BC0","previous_guid":null,"component_type_id":"6","data_id":null,"data":"Read Correction","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Read Correction"},"is_project":0},{"component_id":"1183286","previous_id":"1183285","original_id":"1083171","guid":"E95B2AF1BF804141A58C3278D9B4BC9C","previous_guid":"A81ED7AF68014CFBADCF2B10DFB07BC0","component_type_id":"1","data_id":null,"data":"<p>I prefer starting off my data analysis with a read correction with Canu. I use <code>minimap<\/code> as the mapper to speed this up. The <code>genomeSize<\/code> parameter should be approximately a tenth to a fortieth of the number of bases in your dataset to make sure that no sequences are excluded (bigger is better, as long as Canu doesn't freak out about memory consumption):<\/p>\n<p>\u00a0<\/p>\n<p>(This creates a file <code><\/code><code>canu_corrected\/canu_corrected.correctedReads.fasta.gz<\/code>)<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>I prefer starting off my data analysis with a read correction with Canu. I use <code>minimap<\/code> as the mapper to speed this up. The <code>genomeSize<\/code> parameter should be approximately a tenth to a fortieth of the number of bases in your dataset to make sure that no sequences are excluded (bigger is better, as long as Canu doesn't freak out about memory consumption):<\/p>\n<p>\u00a0<\/p>\n<p>(This creates a file <code><\/code><code>canu_corrected\/canu_corrected.correctedReads.fasta.gz<\/code>)<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"1183287","previous_id":"1183286","original_id":"1083377","guid":"E7A0EE7924524AD1BD36BA66CC2D93D4","previous_guid":"E95B2AF1BF804141A58C3278D9B4BC9C","component_type_id":"15","data_id":"4700","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"canu -correct overlapper=minimap genomeSize=400M \\\n  minReadLength=100 minOverlapLength=30 -p canu_corrected -d canu_corrected -nanopore-raw .\/called_pass.fastq.gz \\\n  .\/called_fail.fastq.gz","description":"Correct Reads with canu (both passed and failed sequences), using minimap as the mapper","os_name":"","os_version":"","can_edit":"1"},"is_project":0}],"available_protocols":["11237"]},{"id":"657821","is_changed":1,"original_id":"618705","is_skipped":"0","is_checked":"0","guid":"F934432B8EBF4B149D431F74727521BA","previous_guid":"C990065A88B248FDBB7C8D19EC2F4DE9","previous_id":"657830","last_modified":"1535201793","components":[{"component_id":"1183290","previous_id":0,"original_id":"1083176","guid":"19656A46C7CB4979AAE65DCA1968D04E","previous_guid":null,"component_type_id":"6","data_id":null,"data":"Read Mapping","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Read Mapping"},"is_project":0},{"component_id":"1183291","previous_id":"1183290","original_id":"1083177","guid":"729F035214464431A724BA6E91C0EE79","previous_guid":"19656A46C7CB4979AAE65DCA1968D04E","component_type_id":"1","data_id":null,"data":"<p>Now that the reads have been demultiplexed and oriented, the mapping can be done<code>.<\/code> I use <code>minimap2<\/code> for mapping long reads to a transcriptome. This creates '.bam' files in the 'demultiplexed' directory.<\/p>\n<p>\u00a0<\/p>\n<p>This is where the reverse complementing done during demultiplexing gives a big saving of effort.<\/p>\n<p><code>\n<\/code><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Now that the reads have been demultiplexed and oriented, the mapping can be done<code>.<\/code> I use <code>minimap2<\/code> for mapping long reads to a transcriptome. This creates '.bam' files in the 'demultiplexed' directory.<\/p>\n<p>\u00a0<\/p>\n<p>This is where the reverse complementing done during demultiplexing gives a big saving of effort.<\/p>\n<p><code>\n<\/code><\/p>"},"is_project":0},{"component_id":"1183292","previous_id":"1183291","original_id":"1083435","guid":"C9C8F86433674641919497AA472A30F0","previous_guid":"729F035214464431A724BA6E91C0EE79","component_type_id":"15","data_id":"4701","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"cd demultiplexed;\nfor x in BC*;\n  do echo ${x};\n  ~\/install\/minimap2\/minimap2 -Q -t 10 -a -x splice mmus_ucsc_all-split.idx ${x}\/${x}_reads_dirAdjusted.fasta.gz | \\\n    samtools view -b | samtools sort > mm2_called_all_${x}_vs_MmusG.bam;\ndone","description":"Mapping reads to an indexed transcriptome using minimap2.","os_name":"","os_version":"","can_edit":"1"},"is_project":0}],"available_protocols":["11237"]},{"id":"657822","is_changed":1,"original_id":"618707","is_skipped":"0","is_checked":"0","guid":"A05013CB6F6946B895A4FC2DB6E9FF2C","previous_guid":"494EEBC7B62B4421AC1A16A89B43FBDB","previous_id":"660365","last_modified":"1535953683","components":[{"component_id":"1183293","previous_id":0,"original_id":"1083180","guid":"5A8C6E0EC8C94CA581292213DD78712C","previous_guid":null,"component_type_id":"6","data_id":null,"data":"Sanity Check","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Sanity Check"},"is_project":0},{"component_id":"1183294","previous_id":"1183293","original_id":"1083181","guid":"EDA23047E5214E88A8A8EF10776471D5","previous_guid":"5A8C6E0EC8C94CA581292213DD78712C","component_type_id":"1","data_id":null,"data":"<p>If this has worked properly, then mapping human or mouse to the mitochondrial genome should show most expression appearing on the positive strand, with a small scattering of negative-strand expression, a bit like the <em>Expected Results<\/em> shown here.<\/p>\n<p>\u00a0<\/p>\n<p>If not, check for the following issues:<\/p>\n<p>\u00a0<\/p>\n<ul>\n<li>Tracks not displaying at all in JBrowse -- make sure track IDs inside square brackets are of the form [ <em>tracks.&lt;unique-id-without-dots&gt;-track<\/em> ]<\/li>\n<li>JBrowse track is reflected in the X axis -- make sure that the reverse bedgraph file is orientated the correct way; it should be created with the '-f 0x10' flag (noe capitalisation.<\/li>\n<li>JBrowse track only shows one direction -- make sure that the reverse bedgraph file has <em>negative<\/em> values, and re-generate the bigwig file<\/li>\n<\/ul>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>If this has worked properly, then mapping human or mouse to the mitochondrial genome should show most expression appearing on the positive strand, with a small scattering of negative-strand expression, a bit like the <em>Expected Results<\/em> shown here.<\/p>\n<p>\u00a0<\/p>\n<p>If not, check for the following issues:<\/p>\n<p>\u00a0<\/p>\n<ul>\n<li>Tracks not displaying at all in JBrowse -- make sure track IDs inside square brackets are of the form [ <em>tracks.&lt;unique-id-without-dots&gt;-track<\/em> ]<\/li>\n<li>JBrowse track is reflected in the X axis -- make sure that the reverse bedgraph file is orientated the correct way; it should be created with the '-f 0x10' flag (noe capitalisation.<\/li>\n<li>JBrowse track only shows one direction -- make sure that the reverse bedgraph file has <em>negative<\/em> values, and re-generate the bigwig file<\/li>\n<\/ul>"},"is_project":0},{"component_id":"1183295","previous_id":"1183294","original_id":"1083452","guid":"E9EEC0AEFDFE41E486A791837BE794C3","previous_guid":"EDA23047E5214E88A8A8EF10776471D5","component_type_id":"17","data_id":"1788","data":"<p><br \/>\u00a0<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/6qmjpt6.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/6qkjpt6.png\" data-ofn=\"mtDNA_WT.png\" \/><\/p>","order_id":"2","name":"Expected result","data_by_id":"1","type_id":"17","source_data":{"result":"<p><br \/>\u00a0<\/p>\n<p><img id=\"s-mce-img\" class=\"s-mce-img\" src=\"https:\/\/s3.amazonaws.com\/pr-journal\/6qmjpt6.png\" data-src=\"https:\/\/s3.amazonaws.com\/pr-journal\/6qkjpt6.png\" data-ofn=\"mtDNA_WT.png\" \/><\/p>"},"is_project":0}],"available_protocols":["11237"]},{"id":"657823","is_changed":1,"original_id":"618708","is_skipped":"0","is_checked":"0","guid":"ACB352005580496D9A162F3B925FF656","previous_guid":"3C21B77EB2C14D35A88DA86E5CCE04AA","previous_id":"657843","last_modified":"1535201318","components":[{"component_id":"1183296","previous_id":0,"original_id":"1083185","guid":"5047118DDDF645259DCC4396ABB55059","previous_guid":null,"component_type_id":"6","data_id":null,"data":"Demultiplexing","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Demultiplexing"},"is_project":0},{"component_id":"1183297","previous_id":"1183296","original_id":"1083184","guid":"9A3CDCC4E48E41349842C25F09ADCB8F","previous_guid":"5047118DDDF645259DCC4396ABB55059","component_type_id":"1","data_id":null,"data":"<p>Chimeric reads (containing adapter sequences from different barcodes) are excluded, and the inner adapters are tallied by creating 'wide' tables indicating barcode\/adapter assignments. This <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/bca_parser.r\" target=\"_blank\" rel=\"noopener noreferrer\">R script<\/a> creates files 'barcode-adapter_assignments_ideal.csv.gz' and 'barcode-adapter_assignments_valid.csv.gz'.<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-javascript\"><code>#!\/usr\/bin\/env Rscript\nbc.df &lt;- read.csv(\"barcode_assignments_all.csv.gz\");\nad.df &lt;- read.csv(\"adapter_assignments_all.csv.gz\");\n\nlibrary(dplyr);\nlibrary(tidyr);\n\n## Create table of adapter additions\nad.tbl &lt;- group_by(ad.df, query, target, dir) %&gt;% summarise() %&gt;%\n    unite(tdir, target, dir, sep=\".\") %&gt;% mutate(present=TRUE) %&gt;%\n    spread(tdir, present);\n\n## collapse multiple query\/target pairs into one\nbc.tbl &lt;- group_by(bc.df, query, target) %&gt;% summarise(dir=paste(unique(dir), collapse=\"\/\"));\nbc.wide &lt;- spread(bc.tbl, target, dir);\n\n## identify reads with a unique barcode\nbc.unique.tbl &lt;- group_by(bc.tbl, query) %&gt;% summarise(n = n()) %&gt;%\n    filter(n == 1) %&gt;% select(-n) %&gt;% left_join(bc.tbl, by=\"query\") %&gt;%\n    left_join(ad.tbl, by=\"query\", copy=TRUE);\n\nbc.unique.tbl$`ONT_SSP.-`[is.na(bc.unique.tbl$`ONT_SSP.-`)] &lt;- FALSE;\nbc.unique.tbl$`ONT_SSP.+`[is.na(bc.unique.tbl$`ONT_SSP.+`)] &lt;- FALSE;\nbc.unique.tbl$`ONT_VNP.-`[is.na(bc.unique.tbl$`ONT_VNP.-`)] &lt;- FALSE;\nbc.unique.tbl$`ONT_VNP.+`[is.na(bc.unique.tbl$`ONT_VNP.+`)] &lt;- FALSE;\n\ncolnames(bc.unique.tbl) &lt;- c(\"query\",\"target\",\"bcDir\",\"SSPrev\",\"SSPfwd\",\"VNPrev\",\"VNPfwd\");\n\n## read is considerd \"valid\" (for now) if at least one primer matches\nbc.valid.tbl &lt;- filter(bc.unique.tbl, (SSPrev | VNPfwd | VNPrev | SSPfwd));\n## ideal reads have forward and reverse cDNA adapters in opposing orientations\nbc.ideal.tbl &lt;- filter(bc.unique.tbl, ((SSPrev &amp; !SSPfwd &amp; VNPfwd &amp; !VNPrev) | (!SSPrev &amp; SSPfwd &amp; !VNPfwd &amp; VNPrev)));\n\nwrite.csv(bc.ideal.tbl, row.names=FALSE, file=gzfile(\"barcode-adapter_assignments_ideal.csv.gz\"), quote=FALSE);\nwrite.csv(bc.valid.tbl, row.names=FALSE, file=gzfile(\"barcode-adapter_assignments_valid.csv.gz\"), quote=FALSE);<\/code><\/pre>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Chimeric reads (containing adapter sequences from different barcodes) are excluded, and the inner adapters are tallied by creating 'wide' tables indicating barcode\/adapter assignments. This <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/bca_parser.r\" target=\"_blank\" rel=\"noopener noreferrer\">R script<\/a> creates files 'barcode-adapter_assignments_ideal.csv.gz' and 'barcode-adapter_assignments_valid.csv.gz'.<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-javascript\"><code>#!\/usr\/bin\/env Rscript\nbc.df &lt;- read.csv(\"barcode_assignments_all.csv.gz\");\nad.df &lt;- read.csv(\"adapter_assignments_all.csv.gz\");\n\nlibrary(dplyr);\nlibrary(tidyr);\n\n## Create table of adapter additions\nad.tbl &lt;- group_by(ad.df, query, target, dir) %&gt;% summarise() %&gt;%\n    unite(tdir, target, dir, sep=\".\") %&gt;% mutate(present=TRUE) %&gt;%\n    spread(tdir, present);\n\n## collapse multiple query\/target pairs into one\nbc.tbl &lt;- group_by(bc.df, query, target) %&gt;% summarise(dir=paste(unique(dir), collapse=\"\/\"));\nbc.wide &lt;- spread(bc.tbl, target, dir);\n\n## identify reads with a unique barcode\nbc.unique.tbl &lt;- group_by(bc.tbl, query) %&gt;% summarise(n = n()) %&gt;%\n    filter(n == 1) %&gt;% select(-n) %&gt;% left_join(bc.tbl, by=\"query\") %&gt;%\n    left_join(ad.tbl, by=\"query\", copy=TRUE);\n\nbc.unique.tbl$`ONT_SSP.-`[is.na(bc.unique.tbl$`ONT_SSP.-`)] &lt;- FALSE;\nbc.unique.tbl$`ONT_SSP.+`[is.na(bc.unique.tbl$`ONT_SSP.+`)] &lt;- FALSE;\nbc.unique.tbl$`ONT_VNP.-`[is.na(bc.unique.tbl$`ONT_VNP.-`)] &lt;- FALSE;\nbc.unique.tbl$`ONT_VNP.+`[is.na(bc.unique.tbl$`ONT_VNP.+`)] &lt;- FALSE;\n\ncolnames(bc.unique.tbl) &lt;- c(\"query\",\"target\",\"bcDir\",\"SSPrev\",\"SSPfwd\",\"VNPrev\",\"VNPfwd\");\n\n## read is considerd \"valid\" (for now) if at least one primer matches\nbc.valid.tbl &lt;- filter(bc.unique.tbl, (SSPrev | VNPfwd | VNPrev | SSPfwd));\n## ideal reads have forward and reverse cDNA adapters in opposing orientations\nbc.ideal.tbl &lt;- filter(bc.unique.tbl, ((SSPrev &amp; !SSPfwd &amp; VNPfwd &amp; !VNPrev) | (!SSPrev &amp; SSPfwd &amp; !VNPfwd &amp; VNPrev)));\n\nwrite.csv(bc.ideal.tbl, row.names=FALSE, file=gzfile(\"barcode-adapter_assignments_ideal.csv.gz\"), quote=FALSE);\nwrite.csv(bc.valid.tbl, row.names=FALSE, file=gzfile(\"barcode-adapter_assignments_valid.csv.gz\"), quote=FALSE);<\/code><\/pre>"},"is_project":0}],"available_protocols":["11237"]},{"id":"657824","is_changed":1,"original_id":"618785","is_skipped":"0","is_checked":"0","guid":"3E34AD3A346C40FC96346011E6C838B5","previous_guid":"1C9D31BBD2094E1F9F54EDA7E1B9C497","previous_id":"657835","last_modified":"1535200128","components":[{"component_id":"1183299","previous_id":0,"original_id":"1083380","guid":"684A8019DA3349B9AB0F5993068B0D47","previous_guid":null,"component_type_id":"6","data_id":null,"data":"Read Correction","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Read Correction"},"is_project":0},{"component_id":"1183300","previous_id":"1183299","original_id":"1083379","guid":"E53CCD4DE6EC426CBB93C7487E51F936","previous_guid":"684A8019DA3349B9AB0F5993068B0D47","component_type_id":"1","data_id":null,"data":"<p>Download canu v1.7.1 or later<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Download canu v1.7.1 or later<\/p>"},"is_project":0},{"component_id":"1183301","previous_id":"1183300","original_id":"1083385","guid":"CB39C82BE8614200A176D4B7481ED480","previous_guid":"E53CCD4DE6EC426CBB93C7487E51F936","component_type_id":"8","data_id":"231","data":"","order_id":"2","name":"Software package","data_by_id":"1","type_id":"8","source_data":{"id":"231","name":"canu","developer":"Maryland Bioinformatics Labs","repository":"https:\/\/github.com\/marbl\/canu","link":"https:\/\/github.com\/marbl\/canu\/releases","os_name":"Linux \/ Darwin","os_version":"","version":"1.7.1","can_edit":"1"},"is_project":0}],"available_protocols":["11237"]},{"id":"657825","is_changed":1,"original_id":"618797","is_skipped":"0","is_checked":"0","guid":"589CFFACF3FD4A04B762CEE8970AC8B9","previous_guid":"D63005FFE2F14A7B9F8048CA9001524B","previous_id":"657842","last_modified":"1535200776","components":[{"component_id":"1183302","previous_id":0,"original_id":"1083417","guid":"0793F787B8904091A6D8C47B5A31D0ED","previous_guid":null,"component_type_id":"6","data_id":null,"data":"Demultiplexing","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Demultiplexing"},"is_project":0},{"component_id":"1183303","previous_id":"1183302","original_id":"1083416","guid":"1B75C34F918A4C5F9E34C0876377BA94","previous_guid":"0793F787B8904091A6D8C47B5A31D0ED","component_type_id":"1","data_id":null,"data":"<p>The next step I carry out is a basic read-level QC to exclude <a href=\"https:\/\/f1000research.com\/articles\/6-631\/v2\" target=\"_blank\" rel=\"noopener noreferrer\">chimeric reads<\/a>. <a href=\"https:\/\/github.com\/rrwick\/Porechop\" target=\"_blank\" rel=\"noopener noreferrer\">Porechop<\/a> can be used for this, although that removes adapters by default, which is not particularly useful in this case.<\/p>\n<p>\u00a0<\/p>\n<p>I use LAST to search for adapter sequences within the corrected reads, pass it through <a href=\"https:\/\/github.com\/gringer\/bioinfscripts\/blob\/master\/maf_bcsplit.pl\" target=\"_blank\" rel=\"noopener noreferrer\">my conversion script<\/a>, and extract out duplicated mappings (i.e. where the same read\/adapter pair appears more than once in the mapping results).<\/p>\n<p>\u00a0<\/p>\n<p>The first phase of this is mapping to barcode sequences to generate a CSV file of assignments. The corrected and uncorrected reads are mapped separately to give the uncorrected reads the best chance of mapping with '-Q 1'; the corrected reads are in FASTA format, so the corrected mapping does not use quality scores.<\/p>\n<p>\u00a0<\/p>\n<p>Note that this isn't a perfect mapping. Due to the lack of adapter sequences, these barcode sequences alone can match sequences that are inside the sequence of interest. On the plus side, there won't be any spurious matches to adapters from other barcode sequences if the correct barcode has too many errors.<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>The next step I carry out is a basic read-level QC to exclude <a href=\"https:\/\/f1000research.com\/articles\/6-631\/v2\" target=\"_blank\" rel=\"noopener noreferrer\">chimeric reads<\/a>. <a href=\"https:\/\/github.com\/rrwick\/Porechop\" target=\"_blank\" rel=\"noopener noreferrer\">Porechop<\/a> can be used for this, although that removes adapters by default, which is not particularly useful in this case.<\/p>\n<p>\u00a0<\/p>\n<p>I use LAST to search for adapter sequences within the corrected reads, pass it through <a href=\"https:\/\/github.com\/gringer\/bioinfscripts\/blob\/master\/maf_bcsplit.pl\" target=\"_blank\" rel=\"noopener noreferrer\">my conversion script<\/a>, and extract out duplicated mappings (i.e. where the same read\/adapter pair appears more than once in the mapping results).<\/p>\n<p>\u00a0<\/p>\n<p>The first phase of this is mapping to barcode sequences to generate a CSV file of assignments. The corrected and uncorrected reads are mapped separately to give the uncorrected reads the best chance of mapping with '-Q 1'; the corrected reads are in FASTA format, so the corrected mapping does not use quality scores.<\/p>\n<p>\u00a0<\/p>\n<p>Note that this isn't a perfect mapping. Due to the lack of adapter sequences, these barcode sequences alone can match sequences that are inside the sequence of interest. On the plus side, there won't be any spurious matches to adapters from other barcode sequences if the correct barcode has too many errors.<\/p>"},"is_project":0},{"component_id":"1183304","previous_id":"1183303","original_id":"1083418","guid":"82F9FAF0FECE43548B8F92587B09E34A","previous_guid":"1B75C34F918A4C5F9E34C0876377BA94","component_type_id":"15","data_id":"4703","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"(lastal -P 10 barcode_base.fa <(pv canu_corrected\/canu_corrected.correctedReads.fasta.gz | zcat);\nlastal -P 10 -Q 1 barcode_base.fa <(pv uncorrected_all.fastq.gz | zcat)) | \\\n  maf_bcsplit.pl | gzip > barcode_assignments_all.csv.gz","description":"Map to barcode sequences (excluding adapters)","os_name":"","os_version":"","can_edit":"1"},"is_project":0}],"available_protocols":["11237"]},{"id":"657830","is_changed":1,"original_id":"618804","is_skipped":"0","is_checked":"0","guid":"C990065A88B248FDBB7C8D19EC2F4DE9","previous_guid":"D796F47A0B76493AA6CF15B0A0592DEA","previous_id":"657846","last_modified":"1535202038","components":[{"component_id":"1183317","previous_id":0,"original_id":"1083441","guid":"DFFD4D8EA33E472A85CB919F95FACC02","previous_guid":null,"component_type_id":"6","data_id":null,"data":"Read Mapping","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Read Mapping"},"is_project":0},{"component_id":"1183318","previous_id":"1183317","original_id":"1083440","guid":"3E9A29085ACD436D95CDCC9E78652C71","previous_guid":"DFFD4D8EA33E472A85CB919F95FACC02","component_type_id":"1","data_id":null,"data":"<p>Download samtools v1.8 or later<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Download samtools v1.8 or later<\/p>"},"is_project":0},{"component_id":"1183319","previous_id":"1183318","original_id":"1083442","guid":"44A66AFFBEF044769AB1B5791E1B09E1","previous_guid":"3E9A29085ACD436D95CDCC9E78652C71","component_type_id":"8","data_id":"233","data":"","order_id":"2","name":"Software package","data_by_id":"1","type_id":"8","source_data":{"id":"233","name":"SAMtools","developer":"Wellcome Trust Sanger Institute","repository":"https:\/\/github.com\/samtools\/samtools","link":"http:\/\/www.htslib.org\/download\/","os_name":"Linux","os_version":"","version":"1.8","can_edit":"1"},"is_project":0}],"available_protocols":["11237"]},{"id":"657834","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"C7E87951802940179A6A7AB0DF070A7E","previous_guid":null,"previous_id":"0","last_modified":"1535198205","components":[{"component_id":"1183330","previous_id":0,"original_id":"0","guid":"5E05FE27A46343E7891336FCF562133A","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Index Preparation","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Index Preparation"},"is_project":0},{"component_id":"1183329","previous_id":"1183330","original_id":"0","guid":"CBAA47FC15634BEFB8EB76E78F34F1E9","previous_guid":"5E05FE27A46343E7891336FCF562133A","component_type_id":"1","data_id":null,"data":"<div>\n<div id=\"\">\n<div>\n<div>\n<div>\n<p>Prepare genome index for spliced alignment<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<\/div>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<div>\n<div id=\"\">\n<div>\n<div>\n<div>\n<p>Prepare genome index for spliced alignment<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<\/div>"},"is_project":0},{"component_id":"1183331","previous_id":"1183329","original_id":"0","guid":"44D4C535A3474BBF8AAD1BE36674BBFD","previous_guid":"CBAA47FC15634BEFB8EB76E78F34F1E9","component_type_id":"8","data_id":"232","data":"","order_id":"2","name":"Software package","data_by_id":"1","type_id":"8","source_data":{"id":"232","name":"minimap2","developer":"Heng Li","repository":"https:\/\/github.com\/lh3\/minimap2","link":"https:\/\/github.com\/lh3\/minimap2\/releases","os_name":"Linux","os_version":"","version":"2.10","can_edit":"1"},"is_project":0},{"component_id":"1183332","previous_id":"1183331","original_id":"0","guid":"128D3E7036D342968C60E2A463FB11C8","previous_guid":"44D4C535A3474BBF8AAD1BE36674BBFD","component_type_id":"15","data_id":"4709","data":"","order_id":"3","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"minimap2 -d mmus_ucsc_all-splice.idx -Q -t 10 -x splice mmus_ucsc_all.fa","description":"","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"657835","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"1C9D31BBD2094E1F9F54EDA7E1B9C497","previous_guid":"C7E87951802940179A6A7AB0DF070A7E","previous_id":"657834","last_modified":"1535200101","components":[{"component_id":"1183334","previous_id":0,"original_id":"0","guid":"1F15CA83B45C44C68E23A4825D75C518","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Index Preparation","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Index Preparation"},"is_project":0},{"component_id":"1183333","previous_id":"1183334","original_id":"0","guid":"8FB626CA8E6E4C2C999B56A42774FEC7","previous_guid":"1F15CA83B45C44C68E23A4825D75C518","component_type_id":"1","data_id":null,"data":"<p>Prepare barcode and inner primer adapter indexes<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Prepare barcode and inner primer adapter indexes<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"1183337","previous_id":"1183333","original_id":"0","guid":"83DDC4547AF7442F93218F14D2C6D7C9","previous_guid":"8FB626CA8E6E4C2C999B56A42774FEC7","component_type_id":"8","data_id":"326","data":"","order_id":"2","name":"Software package","data_by_id":"1","type_id":"8","source_data":{"id":"326","name":"LAST","developer":"Martin Frith","repository":"http:\/\/last.cbrc.jp\/last\/","link":"http:\/\/last.cbrc.jp\/","os_name":"Debian GNU\/Linux","os_version":"","version":"","can_edit":"1"},"is_project":0},{"component_id":"1183338","previous_id":"1183337","original_id":"0","guid":"06B99150D3D742BE8F30727CF5A8820A","previous_guid":"83DDC4547AF7442F93218F14D2C6D7C9","component_type_id":"15","data_id":"4710","data":"","order_id":"3","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"lastdb -uNEAR -R01 PCR_barcode_base.fa PCR_barcode_base.fa\nlastdb -uNEAR -R01 adapter_seqs.fa adapter_seqs.fa","description":"Index the adapter files (used for demultiplexing)","os_name":"","os_version":"","can_edit":"1"},"is_project":0},{"component_id":"1183343","previous_id":"1183338","original_id":"0","guid":"8F27FE71E500481F9B7E4E49738FF845","previous_guid":"06B99150D3D742BE8F30727CF5A8820A","component_type_id":"23","data_id":"28643","data":"","order_id":"4","name":"File","data_by_id":"1","type_id":"23","source_data":{"media_url":"https:\/\/s3.amazonaws.com\/pr-journal\/59djpt6.fa","original_name":"adapter_seqs.fa","file_id":"28643","thumb_id":null,"thumb_url":"https:\/\/s3.amazonaws.com\/pr-journal\/59djpt6.fa","icon":"https:\/\/www.protocols.io\/img\/extensions\/file.png"},"is_project":0},{"component_id":"1183344","previous_id":"1183343","original_id":"0","guid":"A56D178BFF52438F92409FBB541F11A9","previous_guid":"8F27FE71E500481F9B7E4E49738FF845","component_type_id":"23","data_id":"28644","data":"","order_id":"5","name":"File","data_by_id":"1","type_id":"23","source_data":{"media_url":"https:\/\/s3.amazonaws.com\/pr-journal\/59ejpt6.fa","original_name":"barcode_base.fa","file_id":"28644","thumb_id":null,"thumb_url":"https:\/\/s3.amazonaws.com\/pr-journal\/59ejpt6.fa","icon":"https:\/\/www.protocols.io\/img\/extensions\/file.png"},"is_project":0}]},{"id":"657839","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"041512F2CE7E4F0ABFBA74C9029AB3AE","previous_guid":"3E34AD3A346C40FC96346011E6C838B5","previous_id":"657824","last_modified":"1535200250","components":[{"component_id":"1183346","previous_id":0,"original_id":"0","guid":"B9670140713D4101A0111B26E25CB30B","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Read Correction","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Read Correction"},"is_project":0},{"component_id":"1183345","previous_id":"1183346","original_id":"0","guid":"7EA5013D6F08463183671284B45756F7","previous_guid":"B9670140713D4101A0111B26E25CB30B","component_type_id":"1","data_id":null,"data":"<p>Collate basecalled reads (yes, all of them, and ignore the barcode assignments).<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Collate basecalled reads (yes, all of them, and ignore the barcode assignments).<\/p>"},"is_project":0},{"component_id":"1183347","previous_id":"1183345","original_id":"0","guid":"6574F96BFBA245E889072F380224B0C2","previous_guid":"7EA5013D6F08463183671284B45756F7","component_type_id":"15","data_id":"4711","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"pv workspace\/fail\/*\/*.fastq | gzip > called_fail.fastq.gz\npv workspace\/pass\/*\/*.fastq | gzip > called_pass.fastq.gz","description":"Collate basecalled reads into separate files for pass and fail (but all barcodes thrown together)","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"657840","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"FF6F0BCB86204B79AA75F955F98F680B","previous_guid":"82FAD473CBFD4075B86DC9615B3C77B4","previous_id":"657819","last_modified":"1535200446","components":[{"component_id":"1183349","previous_id":0,"original_id":"0","guid":"B672151A818F4840B6884898C7C3C4EA","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Read Correction","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Read Correction"},"is_project":0},{"component_id":"1183348","previous_id":"1183349","original_id":"0","guid":"31B6FB434235422698CF1C05394BBBC9","previous_guid":"B672151A818F4840B6884898C7C3C4EA","component_type_id":"1","data_id":null,"data":"<p>\u00a0Identify corrected reads using <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-length.pl\" target=\"_blank\" rel=\"noopener noreferrer\">fastx-length.pl<\/a><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>\u00a0Identify corrected reads using <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-length.pl\" target=\"_blank\" rel=\"noopener noreferrer\">fastx-length.pl<\/a><\/p>"},"is_project":0},{"component_id":"1183350","previous_id":"1183348","original_id":"0","guid":"1372F5EF222141F3A89209E3FD4C5E2F","previous_guid":"31B6FB434235422698CF1C05394BBBC9","component_type_id":"15","data_id":"4712","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"pv canu_corrected\/canu_corrected.correctedReads.fasta.gz | \\\n  fastx-length.pl | awk '{print $2}' | gzip > names_corrected_all.txt.gz","description":"create list of corrected sequence lengths","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"657841","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"DABA305C76154845B5540CD7EF9C11A7","previous_guid":"FF6F0BCB86204B79AA75F955F98F680B","previous_id":"657840","last_modified":"1535200494","components":[{"component_id":"1183352","previous_id":0,"original_id":"0","guid":"C601962DFE7A4D4D99B5844792763AC6","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Read Correction","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Read Correction"},"is_project":0},{"component_id":"1183351","previous_id":"1183352","original_id":"0","guid":"9CFAD910E78E4C63A6B21081EA392498","previous_guid":"C601962DFE7A4D4D99B5844792763AC6","component_type_id":"1","data_id":null,"data":"<p>Extract uncorrected reads using <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-fetch.pl\" target=\"_blank\" rel=\"noopener noreferrer\">fastx-fetch.pl<\/a><\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Extract uncorrected reads using <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-fetch.pl\" target=\"_blank\" rel=\"noopener noreferrer\">fastx-fetch.pl<\/a><\/p>"},"is_project":0},{"component_id":"1183353","previous_id":"1183351","original_id":"0","guid":"DA0FF846E8874BCABAEDD16F0C3B9999","previous_guid":"9CFAD910E78E4C63A6B21081EA392498","component_type_id":"15","data_id":"4713","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"pv called_pass.fastq.gz called_fail.fastq.gz | \\\n  fastx-fetch.pl -v -i names_corrected_all.txt.gz | gzip > uncorrected_all.fastq.gz","description":"filter\/extract uncorrected reads","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"657842","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"D63005FFE2F14A7B9F8048CA9001524B","previous_guid":"DABA305C76154845B5540CD7EF9C11A7","previous_id":"657841","last_modified":"1535200533","components":[{"component_id":"1183355","previous_id":0,"original_id":"0","guid":"B9898BB27FC244AA8FAC6E88E4F38690","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Read Correction","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Read Correction"},"is_project":0},{"component_id":"1183354","previous_id":"1183355","original_id":"0","guid":"700FEEED8ACD4B9192D57C163E8A5495","previous_guid":"B9898BB27FC244AA8FAC6E88E4F38690","component_type_id":"1","data_id":null,"data":"<p>Join corrected and uncorrected reads. The uncorrected reads are converted to fasta format with <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastq2fasta.pl\" target=\"_blank\" rel=\"noopener noreferrer\">fastq2fasta.pl<\/a> to make the joined file formats consistent.<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Join corrected and uncorrected reads. The uncorrected reads are converted to fasta format with <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastq2fasta.pl\" target=\"_blank\" rel=\"noopener noreferrer\">fastq2fasta.pl<\/a> to make the joined file formats consistent.<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"1183356","previous_id":"1183354","original_id":"0","guid":"F85D6685839A4927AB4CA4D0FC6F0F24","previous_guid":"700FEEED8ACD4B9192D57C163E8A5495","component_type_id":"15","data_id":"4714","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"pv uncorrected_all.fastq.gz | zcat | fastq2fasta.pl | gzip > uncorrected_all.fasta.gz\npv uncorrected_all.fasta.gz canu_corrected\/canu_corrected.correctedReads.fasta.gz | zcat | \\\n  gzip > uncorrected_corrected_all.fasta.gz","description":"Concatenate corrected reads to uncorrected reads","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"657843","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"3C21B77EB2C14D35A88DA86E5CCE04AA","previous_guid":"589CFFACF3FD4A04B762CEE8970AC8B9","previous_id":"657825","last_modified":"1535200828","components":[{"component_id":"1183358","previous_id":0,"original_id":"0","guid":"DEA4D256677B465A9B6EDE5E09F88132","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Demultiplexing","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Demultiplexing"},"is_project":0},{"component_id":"1183357","previous_id":"1183358","original_id":"0","guid":"13FD247EBAA543E9B3A9B6B41B48150F","previous_guid":"DEA4D256677B465A9B6EDE5E09F88132","component_type_id":"1","data_id":null,"data":"<p>Map to inner cDNA \/ adapter sequences to generate CSV file of assignments. The corrected and uncorrected reads are mapped separately because the corrected reads are in FASTA format.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Map to inner cDNA \/ adapter sequences to generate CSV file of assignments. The corrected and uncorrected reads are mapped separately because the corrected reads are in FASTA format.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"1183359","previous_id":"1183357","original_id":"0","guid":"302DF857EF0A424387792D59ADA9069F","previous_guid":"13FD247EBAA543E9B3A9B6B41B48150F","component_type_id":"15","data_id":"4715","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"(lastal -P 10 adapter_seqs.fa <(pv canu_corrected\/canu_corrected.correctedReads.fasta.gz | zcat);\nlastal -P 10 -Q 1 adapter_seqs.fa <(pv uncorrected_all.fastq.gz | zcat)) | \\\n  maf_bcsplit.pl | gzip > adapter_assignments_all.csv.gz","description":"Map to cDNA adapter sequences","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"657844","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"FA88C6F7C5A345D19C81A2A7B6F3C6B5","previous_guid":"ACB352005580496D9A162F3B925FF656","previous_id":"657823","last_modified":"1535201311","components":[{"component_id":"1183360","previous_id":0,"original_id":"0","guid":"89314CE6C8D24F94A92F0B5DA9D85C64","previous_guid":null,"component_type_id":"1","data_id":null,"data":"<p>Create a list of used barcodes<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Create a list of used barcodes<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"1183361","previous_id":"1183360","original_id":"0","guid":"F0B2F576B2554D13A8C8A64AD2B85C89","previous_guid":"89314CE6C8D24F94A92F0B5DA9D85C64","component_type_id":"6","data_id":"0","data":"Demultiplexing","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Demultiplexing"},"is_project":0},{"component_id":"1183362","previous_id":"1183361","original_id":"0","guid":"CC0DF1355F0E4738887A8B0E53CBB7D8","previous_guid":"F0B2F576B2554D13A8C8A64AD2B85C89","component_type_id":"15","data_id":"4716","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"zcat barcode-adapter_assignments_ideal.csv.gz | tail -n +2 | awk -F',' '{print $2}' | sort | uniq > used_barcodes.txt","description":"Create a list of used barcodes","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"657845","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"2DD682DBBDF548A38C184C859BACC490","previous_guid":"FA88C6F7C5A345D19C81A2A7B6F3C6B5","previous_id":"657844","last_modified":"1535201306","components":[{"component_id":"1183363","previous_id":0,"original_id":"0","guid":"158DD9B5775C44938204634E43D08E38","previous_guid":null,"component_type_id":"1","data_id":null,"data":"<p>Demultiplex valid reads by barcodes using <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-fetch.pl\" target=\"_blank\" rel=\"noopener noreferrer\">fastx-fetch.pl<\/a><\/p>","order_id":"0","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Demultiplex valid reads by barcodes using <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-fetch.pl\" target=\"_blank\" rel=\"noopener noreferrer\">fastx-fetch.pl<\/a><\/p>"},"is_project":0},{"component_id":"1183364","previous_id":"1183363","original_id":"0","guid":"35BF7138270D42699D916C216D054668","previous_guid":"158DD9B5775C44938204634E43D08E38","component_type_id":"6","data_id":"0","data":"Demultiplexing","order_id":"1","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Demultiplexing"},"is_project":0},{"component_id":"1183365","previous_id":"1183364","original_id":"0","guid":"26F2530175854FD2B44F84F110B84F2A","previous_guid":"35BF7138270D42699D916C216D054668","component_type_id":"15","data_id":"4717","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"cat used_barcodes.txt | while read bc\n  do echo \"** ${bc} **\"\n  mkdir -p demultiplexed\/${bc};\n  pv uncorrected_corrected_all.fasta.gz |  \\\n    ~\/scripts\/fastx-fetch.pl -i <(zgrep ${bc} barcode-adapter_assignments_ideal.csv.gz | awk -F',' '{print $1}')  | \\\n  gzip > demultiplexed\/${bc}\/${bc}_reads_all.fasta.gz;\ndone","description":"Demultiplex valid reads by barcode","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"657846","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"D796F47A0B76493AA6CF15B0A0592DEA","previous_guid":"2DD682DBBDF548A38C184C859BACC490","previous_id":"657845","last_modified":"1535201408","components":[{"component_id":"1183367","previous_id":0,"original_id":"0","guid":"A0BB03CECACE463082366EEA053A5672","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Demultiplexing","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Demultiplexing"},"is_project":0},{"component_id":"1183366","previous_id":"1183367","original_id":"0","guid":"C4A2D0A7C77246EDA58AF1067728EB60","previous_guid":"A0BB03CECACE463082366EEA053A5672","component_type_id":"1","data_id":null,"data":"<div>\n<div id=\"\">\n<div>\n<div>\n<div>\n<p>Demultiplex barcode-demultiplexed reads by SSP direction.<\/p>\n<p>\u00a0<\/p>\n<p>Note that the last four values in the 'wide' table refer to the reverse and forward mappings of the SSP and VNP primers respectively). The reverse reads are reverse-complemented with <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-rc.pl\" target=\"_blank\" rel=\"noopener noreferrer\">fastx-rc.pl<\/a>, followed by a final concatenation to simplify the subsequent alignment steps.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<\/div>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<div>\n<div id=\"\">\n<div>\n<div>\n<div>\n<p>Demultiplex barcode-demultiplexed reads by SSP direction.<\/p>\n<p>\u00a0<\/p>\n<p>Note that the last four values in the 'wide' table refer to the reverse and forward mappings of the SSP and VNP primers respectively). The reverse reads are reverse-complemented with <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/fastx-rc.pl\" target=\"_blank\" rel=\"noopener noreferrer\">fastx-rc.pl<\/a>, followed by a final concatenation to simplify the subsequent alignment steps.<\/p>\n<p>\u00a0<\/p>\n<p>\u00a0<\/p>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<\/div>"},"is_project":0},{"component_id":"1183368","previous_id":"1183366","original_id":"0","guid":"D43C6445B40146D88EED2833FEEC46BD","previous_guid":"C4A2D0A7C77246EDA58AF1067728EB60","component_type_id":"15","data_id":"4718","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"cat used_barcodes.txt | while read bc\n  do echo \"** ${bc}\/fwd **\";\n  pv demultiplexed\/${bc}\/${bc}_reads_all.fasta.gz |  \\\n    ~\/scripts\/fastx-fetch.pl -i <(zgrep 'FALSE,TRUE,TRUE,FALSE$' barcode-adapter_assignments_ideal.csv.gz | awk -F',' '{print $1}')  | \\\n  gzip > demultiplexed\/${bc}\/${bc}_reads_fwd.fasta.gz;\n  echo \"** ${bc}\/rev **\";\n  pv demultiplexed\/${bc}\/${bc}_reads_all.fasta.gz |  \\\n    ~\/scripts\/fastx-fetch.pl -i <(zgrep 'TRUE,FALSE,FALSE,TRUE$' barcode-adapter_assignments_ideal.csv.gz | awk -F',' '{print $1}')  | \\\n  fastx-rc.pl | gzip > demultiplexed\/${bc}\/${bc}_reads_rev.fasta.gz;\n  pv demultiplexed\/${bc}\/${bc}_reads_fwd.fasta.gz demultiplexed\/${bc}\/${bc}_reads_rev.fasta.gz | zcat | \\\n    gzip > demultiplexed\/${bc}\/${bc}_reads_dirAdjusted.fasta.gz\ndone","description":"demultiplex demultiplexed reads by direction","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"657848","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"1AF8772CA182467A8CAB89959F00E14C","previous_guid":"F934432B8EBF4B149D431F74727521BA","previous_id":"657821","last_modified":"1535952942","components":[{"component_id":"1183372","previous_id":0,"original_id":"0","guid":"BACFC77C7DA8485CB6E6C8F3E4EAC8E1","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Creating BigWig Coverage Files","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Creating BigWig Coverage Files"},"is_project":0},{"component_id":"1183371","previous_id":"1183372","original_id":"0","guid":"CDCB9377178E4D5489CC1A0617D9E056","previous_guid":"BACFC77C7DA8485CB6E6C8F3E4EAC8E1","component_type_id":"1","data_id":null,"data":"<p>Within the same 'demultiplexed' directory, a bedGraph of coverage is created using samtools mpileup and <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/mpileupDC.pl\" target=\"_blank\" rel=\"noopener noreferrer\">mpileupDC.pl<\/a>, excluding any skipped intronic sequence. When 'mpileupDC.pl' is provided with a single file, it will output a bedGraph file with a header line starting with '##'; this header line is removed. The particular JBrowse plugin that I use for stranded display requires that the reverse strand have <em>negative<\/em> coverage values, so that file needs to be changed:<\/p>\n<p>\u00a0<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Within the same 'demultiplexed' directory, a bedGraph of coverage is created using samtools mpileup and <a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/mpileupDC.pl\" target=\"_blank\" rel=\"noopener noreferrer\">mpileupDC.pl<\/a>, excluding any skipped intronic sequence. When 'mpileupDC.pl' is provided with a single file, it will output a bedGraph file with a header line starting with '##'; this header line is removed. The particular JBrowse plugin that I use for stranded display requires that the reverse strand have <em>negative<\/em> coverage values, so that file needs to be changed:<\/p>\n<p>\u00a0<\/p>"},"is_project":0},{"component_id":"1183373","previous_id":"1183371","original_id":"0","guid":"D9A6231900594D828E43137662CC8390","previous_guid":"CDCB9377178E4D5489CC1A0617D9E056","component_type_id":"15","data_id":"4719","data":"","order_id":"2","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"for x in BC*;\n  do echo ${x};\n  samtools view -b -F 0x10 mm2_called_all_${x}_vs_MmusG.bam | \\\n    samtools mpileup -A -B -Q 0 -q 0 -I -q 0 -Q 0 - | \\\n    mpileupDC.pl | tail -n +2 > mm2_called_all_${x}_vs_MmusG.bg.plus\n  samtools view -b -f 0x10 mm2_called_all_${x}_vs_MmusG.bam | \\\n    samtools mpileup -A -B -Q 0 -q 0 -I -q 0 -Q 0 - | \\\n    mpileupDC.pl | tail -n +2 > mm2_called_all_${x}_vs_MmusG.bg.minus\n  perl -i -pe 's\/([0-9]+)$\/-$1\/' mm2_called_all_${x}_vs_MmusG.bg.minus\ndone;","description":"Generate bedGraphs from both forward and reverse reads","os_name":"","os_version":"","can_edit":"1"},"is_project":0}]},{"id":"658015","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"EFFF0D530BF24831A7BEAFB026FC3A12","previous_guid":"1AF8772CA182467A8CAB89959F00E14C","previous_id":"657848","last_modified":"1535950243","components":[{"component_id":"1183765","previous_id":0,"original_id":"0","guid":"2A06737856AD49CE98D8086E342245A2","previous_guid":null,"component_type_id":"6","data_id":"0","data":"Creating BigWig Coverage Files","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"Creating BigWig Coverage Files"},"is_project":0},{"component_id":"1183764","previous_id":"1183765","original_id":"0","guid":"E43A1832D59C47019E7FB3A23905813A","previous_guid":"2A06737856AD49CE98D8086E342245A2","component_type_id":"1","data_id":null,"data":"<p>Stranded bedgraph files are converted to bigwig. This requires BEDTools and a genome information file containing chromosome lengths (one for Mmus\/mm10 is attached to this step).<\/p>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Stranded bedgraph files are converted to bigwig. This requires BEDTools and a genome information file containing chromosome lengths (one for Mmus\/mm10 is attached to this step).<\/p>"},"is_project":0},{"component_id":"1183766","previous_id":"1183764","original_id":"0","guid":"269CE57721154A059DD356D4E1527D1F","previous_guid":"E43A1832D59C47019E7FB3A23905813A","component_type_id":"8","data_id":"383","data":"","order_id":"2","name":"Software package","data_by_id":"1","type_id":"8","source_data":{"id":"383","name":"BEDTools","developer":"Quinlan laboratory, University of Utah","repository":"https:\/\/github.com\/arq5x\/bedtools2\/","link":"http:\/\/omictools.com\/bedtools-tool","os_name":"","os_version":"","version":"2.26.0","can_edit":"1"},"is_project":0},{"component_id":"1183769","previous_id":"1183766","original_id":"0","guid":"E2C812488FAB40CC8880ACE2EF5A75F2","previous_guid":"269CE57721154A059DD356D4E1527D1F","component_type_id":"15","data_id":"4721","data":"","order_id":"3","name":"Command","data_by_id":"1","type_id":"15","source_data":{"name":"for x in BC*\n  do echo ${x}\n  basename=\"mm2_called_${x}_all_vs_mmusAll\"\n  bedGraphToBigWig ${basename}.bg.plus Mmus_genome.chrInfo.txt ${basename}.bw.plus\n  bedGraphToBigWig ${basename}.bg.minus Mmus_genome.chrInfo.txt ${basename}.bw.minus \ndone","description":"Convert bedgraph to bigwig","os_name":"","os_version":"","can_edit":"1"},"is_project":0},{"component_id":"1189729","previous_id":"1183769","original_id":"0","guid":"BF5EDC317CF347988487509111252BAA","previous_guid":"E2C812488FAB40CC8880ACE2EF5A75F2","component_type_id":"23","data_id":"29129","data":"","order_id":"4","name":"File","data_by_id":"1","type_id":"23","source_data":{"media_url":"https:\/\/s3.amazonaws.com\/pr-journal\/6qjjpt6.txt","original_name":"mmus_genome.chrinfo.txt","file_id":"29129","thumb_id":null,"thumb_url":"https:\/\/s3.amazonaws.com\/pr-journal\/6qjjpt6.txt","icon":"https:\/\/www.protocols.io\/img\/extensions\/txt.png"},"is_project":0}]},{"id":"660365","is_changed":"0","original_id":"0","is_skipped":"0","is_checked":"0","guid":"494EEBC7B62B4421AC1A16A89B43FBDB","previous_guid":"EFFF0D530BF24831A7BEAFB026FC3A12","previous_id":"658015","last_modified":"1535953831","components":[{"component_id":"1189731","previous_id":0,"original_id":"0","guid":"0D89579A4BE04B2C81C72B8E28BCC103","previous_guid":null,"component_type_id":"6","data_id":"0","data":"JBrowse Configuration","order_id":"0","name":"Section","data_by_id":"0","type_id":"6","source_data":{"section":"JBrowse Configuration"},"is_project":0},{"component_id":"1189730","previous_id":"1189731","original_id":"0","guid":"CDF3115ABF634CF2A23A4CFD6B4C6C89","previous_guid":"0D89579A4BE04B2C81C72B8E28BCC103","component_type_id":"1","data_id":null,"data":"<p>Each track should have its own JBrowse configuration section using the <em>StrangedBigWig<\/em> class and <em>StrandedXYPlot<span style=\"text-decoration: underline;\"><\/span><\/em><span style=\"text-decoration: underline;\"><\/span> type. An example is shown here:<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-markup\"><code>[tracks.BWCG004-4T1-BC04-both-track ]\nstoreClass     = StrandedPlotPlugin\/Store\/SeqFeature\/StrandedBigWig\nurlTemplate    = bw\/mm2_called_CG004_BC04_vs_MmusG.bw\ncategory       = MinION - Coverage\ntype           = StrandedPlotPlugin\/View\/Track\/Wiggle\/StrandedXYPlot\nkey            = MinION minimap2 coverage from CG004-4T1-WT (combined strands)\nscale          = log\nscoreType      = maxScore\nautoscale      = global\nstyle.pos_color = darkred\nstyle.neg_color = darkgreen<\/code><\/pre>","order_id":"1","name":"Description","data_by_id":"0","type_id":"1","source_data":{"description":"<p>Each track should have its own JBrowse configuration section using the <em>StrangedBigWig<\/em> class and <em>StrandedXYPlot<span style=\"text-decoration: underline;\"><\/span><\/em><span style=\"text-decoration: underline;\"><\/span> type. An example is shown here:<\/p>\n<p>\u00a0<\/p>\n<pre class=\"language-markup\"><code>[tracks.BWCG004-4T1-BC04-both-track ]\nstoreClass     = StrandedPlotPlugin\/Store\/SeqFeature\/StrandedBigWig\nurlTemplate    = bw\/mm2_called_CG004_BC04_vs_MmusG.bw\ncategory       = MinION - Coverage\ntype           = StrandedPlotPlugin\/View\/Track\/Wiggle\/StrandedXYPlot\nkey            = MinION minimap2 coverage from CG004-4T1-WT (combined strands)\nscale          = log\nscoreType      = maxScore\nautoscale      = global\nstyle.pos_color = darkred\nstyle.neg_color = darkgreen<\/code><\/pre>"},"is_project":0}]}]}